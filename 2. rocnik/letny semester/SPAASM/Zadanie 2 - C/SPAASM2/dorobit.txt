/*
 * else if (strcmp(args[i], "help") == 0) {
            if (*sockfd != -1) {
                char mess[MAX_LINE_LENGTH];
                strcpy(mess, args[i]);
                strcat(mess, " ");
                send_message(*sockfd, mess);
                char message[MAX_PROMPT_LENGTH];
                memset(message, 0, sizeof(message));
                ssize_t num_bytes = recv(*sockfd, message, sizeof(message), 0);
                if (num_bytes > 0) {
                    message[num_bytes] = '\0';
                    printf("%s\n", message);
                }
            } else {
                fprintf(stderr, "No connection to server\n");
                return 1;
            }
        } else if (strcmp(args[i], "fork") == 0) {
            pid_t pid = fork();
            if (pid == 0) {
                printf("This is the child process.\n");
                exit(EXIT_SUCCESS);
            } else if (pid > 0) {
                printf("This is the parent process.\n");
            } else {
                perror("lsh");
            }
        } else if (strstr(args[i], "-p") != NULL) {
            char **subargs = lsh_split_args(args[i]);
            int j = 0;
            while (subargs[j] != NULL) {
                if (strcmp(subargs[j], "-p") == 0) {
                    if (subargs[j + 1] != NULL) {
                        char *new_port = realloc(*port, (strlen(subargs[j + 1]) + 1) * sizeof(char));
                        if (new_port == NULL) {
                            fprintf(stderr, "Memory allocation failed\n");
                            exit(EXIT_FAILURE);
                        }
                        *port = new_port;
                        strcpy(*port, subargs[j + 1]);
                        if (*sockfd != -1) {
                            close(*sockfd);
                        }
                        *sockfd = connect_to_server(port);
                    } else {
                        fprintf(stderr, "Missing port number after -p option\n");
                        return 1;
                    }
                }
                j++;
            }
            free(subargs);
        } else {
            //send_message(*sockfd, args[i]);
            if (strstr(args[i], ">") != NULL) {
                redirect_output(args[i]);
            } else {
                // Execute the command with its arguments (Nechat tu len send_message a ostatne parsovat az na serveri)!!!!!//
                char **cmd_args = lsh_split_args(args[i]);
                char *output = lsh_execute_external(cmd_args);
                if (output != NULL) {
                    // Print the command's output to the console
                    printf("%s\n", output);
                    free(output);
                }
                free(cmd_args);
            }
        }

        char *lsh_execute_external(char **args) {
    //executes command and returns it//
    pid_t pid;
    int fd[2];
    pipe(fd);

    pid = fork();
    if (pid == 0) {
        // Child process
        dup2(fd[1], STDOUT_FILENO); // Redirect stdout to the pipe
        close(fd[0]); // Close the read end of the pipe

        // Execute the command
        if (execvp(args[0], args) == -1) {
            perror("lsh");
            exit(EXIT_FAILURE);
        }
    } else if (pid < 0) {
        // Error forking
        perror("lsh");
    } else {
        // Parent process
        close(fd[1]); // Close the write end of the pipe

        // Read the output from the pipe
        char *output = malloc(MAX_LINE_LENGTH * sizeof(char));
        read(fd[0], output, MAX_LINE_LENGTH);

        return output;
    }

    return NULL;
}

void redirect_output(char *args) {
    char **subargs = lsh_split_args(args);
    int pos = 0;

    // Find the position of ">"
    while (subargs[pos] != NULL && strcmp(subargs[pos], ">") != 0) {
        pos++;
    }

    if (subargs[pos] != NULL) {
        // Check if ">" was found
        if (subargs[pos + 1] != NULL) {
            // Extract the output file name
            char *output_file = subargs[pos + 1];

            // Extract the command before ">"
            char *command_args[pos + 1];
            for (int i = 0; i < pos; i++) {
                command_args[i] = subargs[i];
            }
            command_args[pos] = NULL; // Null-terminate the command arguments

            // Execute the command
            char *output = lsh_execute_external(command_args);
            if (output != NULL) {
                // Write the output to the file
                FILE *file = fopen(output_file, "w");
                if (file == NULL) {
                    perror("Error opening file");
                } else {
                    fprintf(file, "%s", output);
                    fclose(file);
                }
                free(output);
            }
        } else {
            printf("Missing output file after \">\n");
        }
    } else {
        printf("No output redirection found\n");
    }

    // Free the memory allocated for subargs
    free(subargs);
}
 */

 char **lsh_split_args(char *argument) {
     int bufsize = MAX_LINE_LENGTH, position = 0;
     char **subargs = malloc(bufsize * sizeof(char *));
     char *subarg;

     if (!subargs) {
         fprintf(stderr, "lsh: allocation error\n");
         exit(EXIT_FAILURE);
     }

     // Split the line based on semicolon
     subarg = strtok(argument, " \t\n");
     while (subarg != NULL) {
         // Add the token to the list
         subargs[position] = subarg;
         position++;

         // Resize the buffer if necessary
         if (position >= bufsize) {
             bufsize += MAX_LINE_LENGTH;
             subargs = realloc(subargs, bufsize * sizeof(char *));
             if (!subargs) {
                 fprintf(stderr, "lsh: allocation error\n");
                 exit(EXIT_FAILURE);
             }
         }

         // Get the next token
         subarg = strtok(NULL, " \t\n");
     }
     subargs[position] = NULL; // Null-terminate the list
     return subargs;
 }