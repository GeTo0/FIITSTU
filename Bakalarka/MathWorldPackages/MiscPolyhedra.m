(*:Mathematica Version: 6.0 *)

(*:Package Version: 1.98 *)

(*:Name: MathWorld`MiscPolyhedra` *)

(*:Author:

Eric W. Weisstein (eww@wolfram.com)

Additional authors:

David Eppstein (eppstein@ics.uci.edu):
Zonohedron (http://www.ics.uci.edu/~eppstein/junkyard/ukraine/ukraine.ma)

Ed Pegg Jr. (edp@wolfram.com):
2002-09-25 Hexahedron

Russell Towle (rustybel@foothill.net):
Trapezohedron

*)

(*:Summary:

Adds functionality to construct and perform operations on 
a number of polyhedra.  It is interlinked with other packages
by the author for Platonic solids, Johnson solids, and R. Maeder's
package for uniform polyhedra.

*)

(*:URL:
	Current version available from
	
	http://mathworld.wolfram.com/packages/MiscPolyhedra.m
*)


(*:History:
  v1.00 (1998-11-09): Written
  v1.01 (1998-11-15): cuboid, Jack, RhombicDodecahedronConstruction,
                      RhombicDodecahedron vertex fixed
  v1.02 (1998-12-11): Renamed from PolyhedronCompounds` to Polyhedra`
  v1.03 (1998-12-12): SquashedDodecahedron
  v1.04 (1999-01-08): Cube4Compound
  v1.05 (1999-01-27): RhombicDodecahedronStellation[n]
  v1.06 (1999-01-28): Named Archimdean solid duals added
  v1.07 (1999-06-18): CuboctahedronRhombicDodecahedron,
                      CuboctahedronRhombicDodecahedronSolid,
                      GreatRhombicTriacontahedron
  v1.10 (1999-07-25): Cumulate, Orient, PolyhedronEdgeLengths,
                      PolyhedronFaceCenters
  v1.11 (1999-07-26): TetrahedronExact
  v1.12 (1999-07-27): CubeExact, CumulateWireframe, DodecaedrhonExact, IcosahedronExact, 
                      OctahedronExact
  v1.20 (1999-07-27): Uniform polyhedron information added to this package
  v1.21 (1999-07-28): Changed DualArchimedeanPolyhedron[...] to 
                      Dual[...,Method->Tangential]
  v1.22 (1999-07-28): CircumsphereRadius, InsphereRadius, MidsphereRadius
  v1.23 (1999-07-29): Added Wireframe, wrapped Orient around CubeExact.
                      Broke out LabelVertices and LabelPolyhedronVertices
  v1.23 (1999-08-01): PlanarPolygon, PolyhedronFaces, PyramidVolume, PolyhedronVolume,
                      PolyhedronSurfaceArea, SmallTriambicIcosahedronExact.
  v1.24 (1999-08-02): Renamed ArchimedeanExact` to Archimedean`
  v1.25 (1999-08-02): UniformPolyhedronHullName
  v1.26 (1999-08-03): Cleaned up Orient a bit.
  v1.30 (1999-08-03): SnubDisphenoid, Deltahedron, Antiprism etc. moved
                      here.  Changed default for Antiprism to unit edge
                      length.  
  v1.31 (1999-08-04): GreatDodecahedronExact, GyroelongatedSquareDipyramid,
                      GreatStellatedDodecahedronExact, SmallStellatedDodecahedronExact
  v1.32 (1999-08-04): PolyhedronSymmetricSurfaceArea, PolyhedronSymmetricVolume
  v1.33 (1999-08-08): GreatIcosahedronExact
  v1.34 (1999-08-13): Corrected GreatIcosahedronExact pyramid height
  v1.35 (1999-08-14): ToExact, DualModel
  v1.36 (1999-08-16): AntiprismNet, PrismNet
  v1.37 (1999-08-17): <<Archimdean` removed
  v1.38 (1999-08-18): Modified ToExact with fix for Select[] bug under 
                      Linux
  v1.39 (1999-08-18): PointPlaneDistance, Polygon2D, Polygon3D
  v1.40 (1999-08-26): Arbitrary side length for Antiprism and Prism and Nets.
  v1.41 (1999-08-26): Fixed rotm to handle x==y==0
  v1.42 (1999-08-27): MidpointCumulate
  v1.43 (1999-08-29): Replaced SteveC's HiddenWireframe to now work rigorously.
  v1.44 (1999-08-29): PolyhedronCompoundSurfaceArea, PolyhedronCompoundVolume
                      Removed simplify from PolyhedronSurfaceArea
  v1.45 (1999-08-31): Replaced Union[] with Union[...,SameTest->SameQ] to workaround
                      Mathematica bug
  v1.46 (1999-09-02): Moved Cube-n-Compounds to Platonic`
  v1.47 (1999-09-13): ConnectivityTable,
                      Csaszar, FromFaces, Szilassi
  v1.48 (1999-09-17): Renamed cuboid to UnitCuboid to avoid conflict
                      with SolidGeometry cuboid.  Removed Tringulated
                      option from Pyramid.  Removed Graphics3D from
                      PyramidalFrustum
  v1.49 (1999-09-20): RectifiedPair, Rectify
  v1.50 (1999-10-07): ToExactN
  v1.51 (1999-10-29): RhombicIcosahedronExact
  v1.52 (1999-11-22): Moved SnubDisphenoid and Gyroelongated ...
                      to Johnson.m.  Dipyramid added,
                      and pyramid changed to default to unit edge lengths.
                      ElongatedDipyramid, ElongatedPyramid.
  v1.53 (2000-01-01): URL updated. Bipyramid, Cupola.
  v1.54 (2000-01-04): centroid fixed to Centroid in SquashedDodecahedron.
                      RhombicDodecahedron moved to Archimdean`.
  v1.55 (2000-01-14): DuerersSolid
  v1.56 (2000-01-28): PolyhedronFaceList change from {n, #} to {#, n}
  v1.57 (2000-02-02): Fixed deltahedra syntax
  v1.58 (2000-02-03): Skeleton
  v1.59 (2000-02-06): ElongatedCupola, ElongatedGyrobicupola,
                      ElongatedOrthobicupola, ElongatedOrthocupolarotunda,
                      ElongatedRotunda, 
                      Gyrobicupola, Gyrocupolarotunda, GyroelongatedCupola,
                      GyroelongatedPyramid, GyroelongatedRotunda, 
                      Orthobicupola, Orthobirotunda, Orthocupolarotunda, Rotunda
  v1.60 (2000-02-07): Made UniformPolyhedron evaluate explicitly.
  v1.61 (2000-02-09): GyroelongatedBicupola, GyroelongatedCupolarotunda
  v1.62 (2000-02-10): Bulletproofed and added messages to ToExact and ToExactN.
                      AugmentedDodecahedron, AugmentedPrism, Gyrobifastigium.
  v1.63 (2000-02-11): SymbolicUnion
  v1.64 (2000-02-15): Skeleton moved to Graphs`
  v1.65 (2000-02-17): Corrected base of pyramid to be oriented with outward normal
  v1.66 (2000-02-18): Corrected orientations for cupola and rotunda.
                      May break other routines relying on thier orderings?
  v1.67 (2000-02-22): Worked around Recognize bug in ToExactN.  NetVertices.
  v1.68 (2000-02-23): Corrected sign of Cumulate.
  v1.69 (2000-02-24): Added message for when VertexFigures fails
  v1.70 (2000-02-25): Removed outdated code which was shadowing some Archimedean duals
  v1.71 (2000-04-16): TriangleArea renamed TriangleArea3D
  v1.72 (2000-08-19): Continuation characters added to usage messages
  v1.73 (2000-08-22): PolyhedronFaceLists, PolyhedronRotationCompound
  v1.74 (2000-08-23): EschersSolid
  v1.75 (2000-11-02): NetConnectivity
  v1.76 (2000-11-11): Duals` no longer needed here, but now needed in Archimedean`
  v1.80 (2000-11-13): Code for general operations broken off into
                      PolyhedronOperations.  This package now only contains
                      code for constructing and describing specific polyhedra.
                      Package now called MiscPolyhedra`.
  v1.81 (2002-01-25): Analytic form of Zome added
  v1.82 (2002-09-25): Hexahedron
  v1.83 (2002-10-15): Zonohedron
  v1.84 (2002-11-09): DodecahedronSmallTriambicIcosahedronCompound
  v1.85 (2003-01-12): Pyramid and Prism-related code broken off into Prisms.m
  v1.86 (2003-08-13): Stripped some occurrences of Exact, did RhombicIcosahedron correctly
  v1.87 (2003-10-19): updated context
  v1.88 (2003-11-21): Boat.  fixed augmented solids and Deltahedra.  Threw out
                      some old unused code
  v1.89 (2003-12-01): Fixed UniformPolyhedron
  v1.90 (2003-12-07): RhombicEnneacontahedron, GreatRhombicTriacontahedron moved here from
                      Archimedean`
  v1.91 (2003-12-08): Removed undecipherable Towle code
  v1.92 (2003-12-25): Converted Johnson constructors to PolyhedronVertex syntax.
                      Moved Prism-type solids to Prisms`
  v1.93 (2004-02-02): Redid DuerersSolid
  v1.94 (2004-05-19): Fixed EschersSolid
  v1.95 (2004-09-20): Added Spiky
  v1.96 (2005-02-20): reimplemented JessensOrthogonalPolyhedron
  v1.97 (2006-01-31): Fixed Szilassi and Csaszar
  v1.98 (2007-09-27): Fixed names of uniform pentagram pyramids from deltahedron to deltohedron
  
  (c) 1998-2007 Eric W. Weisstein
*)

(*:Keywords:
*)

(*:Requirements:

  Requires a number of packages, e.g.
  
  	Archimedean.m
  	Convexify.m
  	JohnsonSolids.m
   	Platonic.m
   	UniformPolyhedra.m

  available from

    http://mathworld.wolfram.com/packages/

*)

(*:Discussion:

*)

(*:References: *)

(*:Limitations:
	
	This package is still under construction and is not intended to
	be a finished product.
	
	Documentation not complete.
	
	Dodecadodecahedron and Tetrahemihexahedron need analytic vertices
	
	Need to finish converting contents to PolyhedronVertices[...] syntax
	
	Zonohedron code is less than beautiful and would be nice to rewrite.  See
	Eppstein's paper for an explanation of what it's actually doing.  Insufficient
	checking is done in these routines so they can give error messages and wrong
	results for inexact or some exact inputs.
	
	Names for uniform truncations approximate for many solids.
*)

BeginPackage["MathWorld`MiscPolyhedra`",
	{
	"Combinatorica`",
	"MathWorld`Archimedean`",
	"MathWorld`ConvexHull`",
	"MathWorld`JohnsonSolids`",
	"MathWorld`Platonic`",
	"MathWorld`Prisms`",
	"MathWorld`PolyhedronOperations`",
	"MathWorld`SolidGeometry`",
	"MathWorld`UniformPolyhedra`"
	}
]

Boat::usage =
"Polyhedron[Boat] gives the boat octahedron."

Csaszar::usage =
"Polyhedron[Csaszar] gives a set of triangulated polygons for the Csaszar polyhedron."

Deltahedron::usage =
"Polyhedron[Deltahedron[n]] gives the nth (1<=n<=8) convex deltahedron."

Dodecadodecahedron::usage =
"Polyhedron[Dodecadodecahedron] gives a list of Polygons with approximate vertices \
representing this uniform solid."

DodecahedronSmallTriambicIcosahedronCompound::usage =
"Polyhedron[DodecahedronSmallTriambicIcosahedronCompound] gives a list of \
Polygons with analytic vertices representing the compound of the dodecahedron \
and small triambic icosahedron."

DuerersSolid::usage =
"Polyhedron[DuerersSolid] gives Duerer's solid."

Echidnahedron::usage =
"Polyhedron[Echidnahedron] gives a list of Polygons with approximate vertices \
representing this icosahedron stellation."

EschersSolid::usage =
"Polyhedron[EschersSolid] gives a list of polygons representing the solid on the \
right pillar of Escher's \"Waterfall\" woodcut."

GoldenRectangles::usage =
"GoldenRectangles."

GreatRhombicTriacontahedron::usage =
"Polyhedron[GreatRhombicTriacontahedron] gives a list of Polygons with \
analytic vertices representing this stellation of the rhombic triacontahedron."

Hexahedron::usage =
"Polyhedron[Hexahedron[{f1,f2,f3,f4,f5,f6}]] gives the hexahedron having faces with the \
specified number of edges (given in sorted order).  Hexahedron[n] gives the \
nth hexahedron for 1<=n<=7."

Jack::usage =
"Polyhedron[Jack]."

JessensOrthogonalPolyhedron::usage =
"Polyhedron[JessensOrthogonalPolyhedron]."

Octahemioctahedron::usage =
"Polyhedron[Octahemioctahedron] gives a list of Polygons with approximate vertices \
representing this uniform polyhedron."

RhombicDodecahedronStellation::usage =
"Polyhedron[RhombicDodecahedronStellation[n]] gives the nth stellation for n=1, 2."

RhombicEnneacontahedron::usage =
"Polyhedron[RhombicEnneacontahedron[n]] gives the rhombic enneacontahedron equilateral zonohedron."

RhombicIcosahedron::usage =
"Polyhedron[RhombicIcosahedron] gives an analytic rhombic icosahedro equilateral zonohedron."

SmallDitrigonalIcosidodecahedron::usage =
"Polyhedron[SmallDitrigonalIcosidodecahedron] gives a list of Polygons with \
analytic vertices representing the small ditrigonal icosidodecahedron."

SmallTriambicIcosahedron::usage =
"Polyhedron[SmallTriambicIcosahedron] gives a list of Polygons with \
analytic vertices representing the small triambic icosahedron."

Spiky::usage =
"Polyhedron[Spiky] gives the icosahedron cumulation by equal tetrahedra that is the logo \
of Mathematica."

SquashedDodecahedron::usage =
"Polyhedron[SquashedDodecahedron[s]] gives the squashed dodecahedron \
(rotated rhombic dodecahedron) of side length s."

Szilassi::usage =
"Polyhedron[Szilassi] gives a set of triangulated polygons for the Szilassi polyhedron."

Tetrahemihexahedron::usage =
"Polyhedron[Tetrahemihexahedron] gives a list of polygons with approximate vertices \
corresponding to this uniform solid."

Trapezohedron::usage =
"Polyhedron[Trapezohedron[n,pitch]] generates a trapezohedron with n sides
of pitch."

UniformPolyhedron::usage =
"UniformPolyhedron[n,<prec>] gives the list of Polygons corresponding to \
the nth uniform polyhedron using prec digits of precision."

UniformPolyhedronName::usage =
"UniformPolyhedronName[n] gives the name of the nth uniform polyhedron."

UniformPolyhedronDualName::usage =
"UniformPolyhedronDualName[n] gives the name of the dual of the nth uniform \
polyhedron."

UniformPolyhedronHullName::usage =
"UniformPolyhedronHullName[n] gives the name of the convex hull of the \
nth uniform polyhedron."

UnitAntiprism::usage =
"UnitAntiprism."

UnitCuboid::usage =
"UnitCuboid[{a,b,c}] gives a cuboid with center {a,b,c}."

WythoffSymbol::usage =
"WythoffSymbol[n] gives the Wythoff symbol of the nth numbered uniform \
polyhedron."

Zome::usage =
"Zome gives the solid corresponding to the Zome construction unit.  \
To turn into an actual Zome, use Bevel on it."

Zonohedron::usage =
"Zonohedron[vector-list] gives the zonohedron corresponding to the \
specified list of vectors."


(* Options *)

Options[HiddenWireframe]={
	ViewPoint->{1.3,-2.4,2},
	PlotStyles->{Automatic,Dashing[{.02,.02}]}
}


Begin["`Private`"]


addn[n_,k_,m_]:=Mod[n+k-1,m]+1

PolyhedronName[Boat]:="Boat"
PolyhedronPolyhedra[Boat]:={Range[8]}
PolyhedronVertices[Boat]:=
 {{0, -1/2, 1/Sqrt[2]}, {1/2, 0, 0}, {5/6, 0, (2*Sqrt[2])/3}, 
 {0, 1/2, 1/Sqrt[2]}, {-5/6, 0, (2*Sqrt[2])/3}, {-1/2, 0, 0}}
PolyhedronFaces[Boat]:=
	{{1,2,3},{3,2,4},{1,3,4},{4,5,1},{1,5,6},{1,6,2},{4,2,6},{4,6,5}}

PolyhedronName[Csaszar]:="Csaszar polyhedron"
PolyhedronVertices[Csaszar]:={{0,0,15},{-3,3,0},{3,-3,0},{-3,-3,1},{3,3,1},{1,2,2},{-1,-2,2}}
PolyhedronFaces[Csaszar]:=1+{{1,2,3},{2,1,4},{3,5,1},{4,6,2},{6,1,5},{5,2,6},{3,4,5},{4,3,6},
		{0,1,6},{0,2,5},{1,0,4},{2,0,3},{3,0,6},{4,0,5}}
      
Deltahedron[1]:=Polyhedron[Tetrahedron]
Deltahedron[2]:=Dipyramid[3]
Deltahedron[3]:=Polyhedron[Octahedron]
Deltahedron[4]:=Dipyramid[5]
Deltahedron[5]:=JohnsonExact[84]
Deltahedron[6]:=AugmentedPrism[3,{1,2,3}] (* JohnsonExact[51] *)
Deltahedron[7]:=JohnsonExact[17]
Deltahedron[8]:=Polyhedron[Icosahedron]

Diagonals[{a_List,b_List,c_List}]:={prec[a,b],prec[a,c],prec[b,c]};

dodeccube:=Module[
	{top,bot,topV,botV,
			i,r=1/Sqrt[10-2Sqrt[5]]},
	top=Table[r{2Cos[2/5 Pi i],2Sin[2/5 Pi i],GoldenRatio+1},{i,5}];
	bot=-top;
	topV=Table[r{
		2GoldenRatio Cos[2/5 Pi i],
		2GoldenRatio Sin[2/5 Pi i],
		GoldenRatio-1},{i,5}];
	botV=-topV;
	{
			Polygon[{top[[2]],top[[4]],botV[[1]],botV[[5]]}],
			Polygon[{top[[4]],topV[[5]],bot[[2]],botV[[1]]}],
			Polygon[{topV[[5]],topV[[1]],bot[[4]],bot[[2]]}],
			Polygon[{top[[2]],topV[[1]],bot[[4]],botV[[5]]}],
			Polygon[{top[[2]],top[[4]],topV[[5]],topV[[1]]}],
			Polygon[{bot[[2]],bot[[4]],botV[[5]],botV[[1]]}]
	}		
]

(* Dodecadodecahedron *)

(* netlib 141 *)
PolyhedronName[Dodecadodecahedron]:="dodecadodecahedron"
NetFaces[Dodecadodecahedron]:={{65,52,42,43,29,44,45,53,67,60},{64,51,52,65},{27,28,43,42},{21,34,44,29},{55,62,53,45},{88,77,60,67},{58,64,59,76,87,85,103,84,83,75},{41,51,64,58},{60,77,76,59},{105,104,85,87},{112,93,84,103},{74,63,75,83},{15,27,39,38,50,37,36,26,14,23},{16,28,27,15},{52,51,38,39},{61,49,37,50},{25,18,26,36},{6,9,23,14},{22,21,33,20,19,11,3,8,4,12},{35,34,21,22},{43,28,20,33},{10,7,11,19},{1,2,8,3},{5,13,12,4},{69,55,54,46,30,40,31,47,57,56},{79,62,55,69},{44,34,46,54},{17,24,40,30},{32,48,47,31},{72,71,56,57},{95,88,66,78,68,89,98,97,115,96},{86,77,88,95},{53,62,78,66},{70,90,89,68},{117,116,97,98},{124,106,96,115},{132,145,155,154,168,153,152,144,130,137},{133,146,145,132},{170,169,154,155},{176,163,153,168},{142,135,144,152},{109,120,137,130},{139,133,138,121,110,112,94,113,114,122},{156,146,133,139},{137,120,121,138},{92,93,112,110},{85,104,113,94},{123,134,122,114},{182,170,158,159,147,160,161,171,183,174},{181,169,170,182},{145,146,159,158},{136,148,160,147},{172,179,171,161},{191,188,174,183},{175,176,164,177,178,186,194,189,193,185},{162,163,176,175},{154,169,177,164},{187,190,186,178},{196,195,189,194},{192,184,185,193},{128,142,143,151,167,157,166,150,140,141},{118,135,142,128},{153,163,151,143},{180,173,157,167},{165,149,150,166},{125,126,141,140},{102,109,131,119,129,108,99,100,82,101},{111,120,109,102},{144,135,119,131},{127,107,108,129},{80,81,100,99},{73,91,101,82}}
NetVertices[Dodecadodecahedron]:={{-5.56475613201,-0.828230060909},{-4.97418185902,-1.63521334951},{-4.61477193005,-0.515932100581},{-4.60918688543,-2.13395645022},{-4.60573513803,-3.13395049292},{-4.39822942266,1.79384610387},{-4.25322870386,-0.0146811585885},{-4.02419765706,-1.32291538918},{-3.80765514967,0.986862815265},{-3.66823947549,0.796359902449},{-3.66265443087,-0.821664447191},{-3.65920268347,-1.82165848989},{-3.65575093607,-2.8216525326},{-3.4482452207,2.1061440642},{-3.44266017609,0.488119714556},{-3.43920842868,-0.511874328146},{-3.43149008685,-2.74792898472},{-3.08670199452,2.60739500619},{-3.0776652025,-0.0106233861535},{-3.0742134551,-1.01061742886},{-3.07208015788,-1.62864773579},{-3.06862841048,-2.6286417785},{-2.85767094771,1.29916077559},{-2.84091581386,-3.55491227333},{-2.50171276614,3.41843606723},{-2.49612772153,1.80041171759},{-2.49267597413,0.800417674884},{-2.48922422672,-0.199576367818},{-2.48709092951,-0.817606674756},{-2.48150588489,-2.4356310244},{-2.47592084027,-4.05365537403},{-2.47246909287,-5.05364941674},{-2.12209595592,-1.31634977547},{-2.11996265871,-1.9343800824},{-2.1165109113,-2.9343741251},{-1.91113849316,2.61145277862},{-1.90768674575,1.61145873592},{-1.90555344854,0.993428428984},{-1.90210170114,-0.00656561371846},{-1.8909316119,-3.242614313},{-1.54401022235,1.49467937098},{-1.54055847495,0.494685328274},{-1.53710672755,-0.505308714428},{-1.53497343033,-1.12333902137},{-1.53152168293,-2.12333306407},{-1.52938838572,-2.741363371},{-1.52593663831,-3.74135741371},{-1.52248489091,-4.74135145641},{-1.32269751738,2.42249979696},{-0.955569246578,1.30572638931},{-0.953435949363,0.687696082374},{-0.949984201961,-0.312297960328},{-0.946532454559,-1.31229200303},{-0.944399157344,-1.93032230997},{-0.940947409942,-2.93031635267},{-0.938814112727,-3.54834665961},{-0.9353623653250001,-4.54834070231},{-0.594026020391,1.8069773313},{-0.588440975774,0.188952981665},{-0.584989228372,-0.811041061037},{-0.370580018205,2.11676745035},{-0.35595818157,-2.11927529163},{-0.232482794204,2.3082282733},{-0.00345174740195,0.999994042702},{2.43975923148^-16,2.77555756156^-17},{0.00345174740195,-0.999994042702},{0.00558504461694,-1.61802434964},{0.00903679201889,-2.61801839234},{0.0111700892339,-3.23604869928},{0.0124885394208,-3.61801243504},{0.0133033864489,-3.85407900622},{0.0167551338508,-4.85407304892},{0.351187983981,3.5012330701},{0.352506434168,3.11926933433},{0.358091478785,1.5012449847},{0.361543226187,0.501250941993},{0.364994973589,-0.498743100709},{0.594026020391,-1.8069773313},{0.5961593176059999,-2.42500763824},{0.930592167736,5.93029848078},{0.934043915138,4.93030443807},{0.936177212353,4.31227413114},{0.943080707157,2.31228604573},{0.946532454559,1.31229200303},{0.948665751774,0.694261696093},{0.949984201961,0.312297960328},{0.952117499176,-0.305732346609},{0.955569246578,-1.30572638931},{0.95902099398,-2.30572043201},{0.962472741382,-3.30571447472},{1.30330548316,3.19550072349},{1.52806993553,3.12332710677},{1.53152168293,2.12333306407},{1.53365498015,1.50530275713},{1.54055847495,-0.494685328274},{1.54401022235,-1.49467937098},{1.54614351957,-2.11270967791},{1.54959526697,-3.11270372062},{1.88270966691,5.62456613417},{1.88616141431,4.62457209146},{1.88829471153,4.00654178453},{1.89174645893,3.00654774183},{1.89864995373,1.00655965642},{1.90078325095,0.388529349483},{1.90423499835,-0.611464693219},{2.12899945072,-0.683638309939},{2.4698321925,5.81757688827},{2.4732839399,4.81758284556},{2.4767356873,3.81758880286},{2.4801874347,2.81759476016},{2.48232073192,2.19956445322},{2.48363918211,1.81760071746},{2.48577247932,1.19957041052},{2.48922422672,0.199576367818},{2.49612772153,-1.80041171759},{2.49826101874,-2.41844202452},{2.50171276614,-3.41843606723},{2.83614561627,4.93687005179},{2.83827891349,4.31883974486},{3.06730996029,3.01060551426},{3.07076170769,2.01061147156},{3.0742134551,1.01061742886},{3.07979849971,-0.6074069207839999},{3.0811169499,-0.989370656549},{3.41554980003,7.36593546247},{3.41900154743,6.36594141977},{3.41981639446,6.12987484859},{3.42113484465,5.74791111283},{3.42326814186,5.12988080589},{3.42671988926,4.12988676319},{3.42885318648,3.51185645625},{3.43230493388,2.51186241355},{3.43575668128,1.51186837085},{3.66478772809,0.203634140253},{3.78826311545,4.63113770518},{3.80288495209,0.395094963202},{4.01729416225,3.32290347459},{4.02074590965,2.32290943189},{4.02633095427,0.704885082246},{4.36766729921,7.06020311586},{4.37111904661,6.06020907316},{4.37325234382,5.44217876622},{4.37670409122,4.44218472352},{4.37883738844,3.82415441658},{4.38228913584,2.82416037388},{4.38574088324,1.82416633118},{4.38787418046,1.20613602424},{4.75500245126,0.08936261659229999},{4.95478982479,7.25321386996},{4.9582415721899995,6.25321982726},{4.9616933196,5.25322578456},{4.96382661681,4.63519547762},{4.96727836421,3.63520143492},{4.96941166143,3.01717112798},{4.97286340883,2.01717708528},{4.97631515623,1.01718304257},{5.32323654578,5.75447672655},{5.33440663502,2.51842802727},{5.33785838242,1.51843398457},{5.33999167963,0.90040367763},{5.34344342704,-0.0995903650726},{5.54881584518,5.44623653866},{5.55226759259,4.44624249595},{5.5544008898,3.82821218902},{5.90477402675,7.56551183029},{5.90822577416,6.56551778759},{5.91381081877,4.94749343795},{5.91939586339,3.32946908831},{5.9215291606,2.71143878137},{5.92498090801,1.71144473867},{5.92843265541,0.711450695965},{5.93401770003,-0.906573653675},{6.27322074774,6.06677468688},{6.28997588159,1.21270163796},{6.50093334436,5.14050419205},{6.50438509176,4.14051014934},{6.50651838898,3.52247984241},{6.50997013638,2.5224857997},{6.5190069284,-0.0955325926376},{6.86379502073,5.25979139827},{6.87151336257,3.0237367417},{6.87496510997,2.02374269899},{6.88055015458,0.405718349355},{7.08805586995,5.33351494615},{7.09150761735,4.33352090344},{7.09495936475,3.33352686074},{7.10054440937,1.7155025111},{7.23996008356,1.52499959829},{7.45650259094,3.83477780273},{7.68553363774,2.52654357214},{7.83053435654,0.718016309683},{8.03804007191,5.64581290647},{8.04149181931,4.64581886377},{8.04707686393,3.02779451413},{8.4064867929,4.14707576306},{8.99706106589,3.34009247446}}
PolyhedronFaces[Dodecadodecahedron]:=
{{15,39,41,54,77,62,73,52,36,37},{15,39,30,9},{48,61,54,41},{93,76,62,77},{80,
    56,52,73},{36,37,28,26},{5,2,3,1,4,6,8,15,9,11},{11,9,30,33},{37,28,8,
    15},{22,19,4,6},{1,3,16,10},{2,5,24,17},{53,60,44,23,29,11,33,41,48,
    71},{71,48,61,86},{41,33,30,39},{11,29,24,5},{27,46,44,23},{79,69,53,
    60},{104,93,77,86,71,91,97,99,110,101},{104,93,76,90},{77,86,61,54},{53,
    69,91,71},{89,92,99,97},{108,95,101,110},{64,80,73,90,104,98,109,94,88,
    84},{64,80,56,43},{62,76,90,73},{101,95,98,104},{106,87,94,109},{67,65,84,
    88},{6,26,36,43,64,45,51,32,14,22},{6,26,28,8},{52,56,43,36},{84,65,45,
    64},{58,42,32,51},{14,22,19,12},{34,57,70,72,96,74,75,59,38,49},{25,50,57,
    34},{78,81,72,70},{103,83,74,96},{75,59,55,68},{21,35,49,38},{40,25,34,18,
    7,10,1,12,14,20},{63,50,25,40},{34,18,35,49},{7,10,16,13},{4,19,12,1},{32,
    42,20,14},{100,78,70,63,40,58,51,67,88,82},{102,81,78,100},{57,50,63,
    70},{20,42,58,40},{45,65,67,51},{94,87,82,88},{105,103,96,102,100,106,109,
    108,110,107},{85,83,103,105},{72,81,102,96},{82,87,106,100},{98,95,108,
    109},{99,92,107,110},{47,68,75,85,105,89,97,79,60,66},{31,55,68,47},{74,
    83,85,75},{107,92,89,105},{97,79,69,91},{60,66,46,44},{13,2,17,23,27,47,
    31,38,21,7},{18,35,21,7},{59,55,31,38},{47,27,46,66},{23,17,24,29},{3,16,
    13,2}}
PolyhedronVertices[Dodecadodecahedron]:={{.45520409720613175,2.9852283637161371,2.6144275734495506},
{.58179973673199928,2.2572778195070664,1.1749500508768096},{.70384217804085175,2.1302163802643068,2.1593082342515283},
{.77926855484144585,2.0516880921526706,2.7676750486808425},{.8575089628990247,1.6017899137072284,1.8780290136906538},
{.90131099615631922,1.9246266529093337,3.7520332320537766},{.97189527864441998,3.8200764392512153,1.3283121421808006},
{.97955140420890048,1.4747284744594158,2.8623871970630421},{1.0279066356797787,1.1966761087008048,2.3125557094819529},
{1.0939377199533824,3.6930150000148285,2.3126703255567359},{1.1061470437340354,.74677793025596729,1.4229096744962048},
{1.1693640967494892,3.6144867118997792,2.9210371399850335},{1.2205333594812287,2.9650644558017301,.87319280298369513},
{1.2914065380596199,3.4874252726583223,3.9053953233586283},{1.3036158618467372,.54118820289558111,3.0156346722940855},
{1.3425758007893254,2.8380030165593695,1.8575509863569636},{1.3742001443322159,2.4366379892411308,.59191358242875417},
{1.4886968085650687,4.1304511980221102,2.1261740900099247},{1.4934285543883417,2.6809464403356961,3.0742846152166112},
{1.6107392498754231,4.0033897587706312,3.1105322733773448},{1.6152924480962415,3.4025006538134397,.68669656743984357},
{1.6154709957049333,2.5538850010939468,4.0586427985878945},{1.6228382251729344,1.5816260057930731,.13679424323185869},
{1.6499093704963192,1.7811500834405759,1.2949925452399425},{1.8080977194941701,4.3222733481925575,2.6192798920968782},
{1.815753845068957,1.9769253834013426,4.1533549469682934},{1.8639305289320914,2.5474886703691335,.23157722824608955},
{1.8939942531204276,1.5270272049502334,3.2637089119796471},{1.8985474513297968,.92613809998854291,.83987320604279201},
{1.9907047160631734,.9709224734326156,2.1640459368196959},{2.012933767086773,3.1444246255294558,.29015633453361755},
{2.0568461488202782,2.9427880479749864,4.2481379319812301},{2.0689451241129468,.52102429498614984,1.2743999018270516},
{2.1274304313135176,4.8382378343155974,1.824416842118707},{2.1320939780177756,3.7128754125827315,1.4845585152653016},
{2.1398183027068947,1.0433851118376966,4.3066024222019305},{2.2180587107578335,.59348693338622656,3.4169563872113253},
{2.254026070846694,4.110287290107932,.38493931954816921},{2.2664139422299668,.31543456762587712,2.8671248996305763},
{2.324899249413065,4.6326481069468664,3.4171418399219891},{2.3446543502809833,-.13446361082333168,1.9774788646371091},
{2.3761788606350306,3.4587525340878999,3.4532748820039454},{2.3809106064643181,2.0092477764108843,4.4013854072100722},
{2.38827783592909,1.0369887811145474,.47953685185230608},{2.5299138446109556,2.6061837315690217,4.4599645134990032},
{2.629370139695431,2.0028514456807202,.57431983687334038},{2.6563309365415271,2.7268488400917616,-.35145924020781244},
{2.6639870620948955,.38150087530588697,1.1826158146568895},{2.7708276007658609,4.4206620488763623,1.1828012673737016},
{2.7708957998775103,4.0965197129156974,2.4707701194348434},{2.7710061483667732,3.5720463961406041,4.5547474985156036},
{2.783215472155238,.62580932639782655,3.6649868474529528},{2.8613455317089272,.7003844647205117,.69136343337414602},
{2.8614558802083911,.17591114794891793,2.7753408124633814},{2.9273766159948184,3.1967233560210148,.69147804945948222},
{3.0243077759137573,1.591671990971467,3.759769832462269},{3.0902285116983836,4.6124841990418598,1.6759070694612663},
{3.0903388601741156,4.0880108822659339,3.7598844485437655},{3.1684689197568727,4.1625860205938754,.78626103447398181},
{3.1806782435302152,1.2163489508438729,-.10349961659975425},{3.1807885920168031,.69187563407209235,1.9804777624867657},
{3.1808567911409713,.36773329812162553,3.2684466145518805},{3.2876973297962622,4.4068944716808591,3.2686320672669036},
{3.2953534553776631,2.0615465069025299,4.8027071221287244},{3.3223142522137699,2.785543901307857,3.8769280450469763},
{3.421770547298598,2.1822116154068134,-.0087166315777274517},{3.563406555963508,3.7514065658733105,3.9717110300712499},
{3.5707737854469616,2.7791475705808998,.049862474713326277},{3.5755055312566543,1.3296428128961506,.99797299991339115},
{3.6070300416174714,4.9228589578097036,2.4737690172914596},{3.6267851424735208,.15574724003574678,1.0341060419927111},
{3.6852704496781916,4.4729607793613874,1.5841229822981473},{3.6976583210672397,.67810805688952575,4.0663085623726483},
{3.7336256811478202,4.1949084136010725,1.0342914947163669},{3.8118660892073978,3.7450102351538262,.14464545972670177},
{3.8195904138877132,1.0755199344103559,2.9666893666501863},{3.8242539605902212,-.049842487320355914,2.6268310398010572},
{3.8827392677800083,4.2673710520001217,3.1768479801036826},{3.8948382430741539,1.8456072990194657,.20310994994185199},
{3.9387506248264248,1.6439707214624181,4.1610915473833509},{3.9609796758362109,3.8174728735588932,2.2872019451091533},
{4.0531369405562652,3.8622572470000651,3.6113746758966273},{4.0576901387884129,3.2613681420409887,1.1875389699547241},
{4.0877538629758141,2.2409066766364805,4.2196706536731217},{4.1359305468435269,2.8114699635859948,.29789293495985688},
{4.1435866724015691,.46612199880503193,1.8319679898199568},{4.3017750214019875,3.0072452635534903,3.1562553366890112},
{4.3288461667252122,3.2067693411986797,4.3144536386967114},{4.3362133962005825,2.2345103459002076,.39260508333602426},
{4.336391943810731,1.3858946931784969,3.7645513144745954},{4.3409451420167143,.78500558821424986,1.3407156085395418},
{4.4582558375087477,2.1074489066538958,1.3769632667096769},{4.4629875833305886,.65794414897266496,2.3250737919033033},
{4.5774842475670285,2.3517573577548114,3.8593342994954853},{4.6091085911116855,1.9503923304393757,2.5936968955620964},
{4.6480685300601302,4.2472071440918674,1.4356132096377544},{4.6602778538366618,1.3009700743364316,.54585255856501941},
{4.7311510324221123,1.8233308911925904,3.5780550789361882},{4.7823202951479375,1.1739086350975202,1.5302107419304483},
{4.8455373481633345,4.0416174167376849,3.0283382074527415},{4.8577466719473249,1.0953803469865592,2.1385775563531789},
{4.9237777562256251,3.5917192382865544,2.1386921724527742},{4.9721329876946906,3.313666872533425,1.5888606848737742},
{4.9797891132616726,.96831890774651186,3.1229357397307436},{5.050373395750848,2.8637686940760191,.69921464988160198},
{5.094175428999096,3.1866054332898235,2.5732188682363366},{5.1724158370592106,2.7367072548361664,1.6835728332585984},
{5.2478422138590212,2.6581789667273683,2.2919396476781985},{5.369884655165212,2.531117527482082,3.2762978310481135},
{5.4964802946937007,1.8031669832782948,1.8368203084732746}}

(* Dodecahedron-Small Triambic Icosahedron Compound *)

NetPieces[DodecahedronSmallTriambicIcosahedronCompound]:={{48,{1}},{48,{2}},{30,{3,4}}}
NetFaces[DodecahedronSmallTriambicIcosahedronCompound]:={{2,9,8},{1,10,7},{5,4,6},{6,3,5}}
NetVertices[DodecahedronSmallTriambicIcosahedronCompound]:=
{{0,-1/10},{0,1/10},{1,2-Sqrt[5]},{1,-2+Sqrt[5]},
{(15-Sqrt[5])/20,0},{(25+Sqrt[5])/20,0},
{Root[2697881-35185320*#1^2+57524400*#1^4-5968000*#1^6+160000*#1^8&,5,0],-1/10},
{Root[2697881-35185320*#1^2+57524400*#1^4-5968000*#1^6+160000*#1^8&,5,0],1/10},
{Root[1042441-582195720*#1^2+33911604400*#1^4-234151248000*#1^6+431660960000*#1^8&,7,0],Root[642840555601+2681053399320*#1-9558056088200*#1^2-36275909836000*#1^3+63668944950000*#1^4+156081724400000*#1^5-209775762000000*#1^6-215830480000000*#1^7+269788100000000*#1^8&,6,0]},
{Root[1042441-582195720*#1^2+33911604400*#1^4-234151248000*#1^6+431660960000*#1^8&,7,0],Root[642840555601-2681053399320*#1-9558056088200*#1^2+36275909836000*#1^3+63668944950000*#1^4-156081724400000*#1^5-209775762000000*#1^6+215830480000000*#1^7+269788100000000*#1^8&,3,0]}}
PolyhedronFaces[DodecahedronSmallTriambicIcosahedronCompound]:=
{{27,17,64},{64,1,27},{1,64,17},{17,18,37},{37,1,17},{1,37,18},{18,28,68},{68,
    1,18},{1,68,28},{28,14,65},{65,1,28},{1,65,14},{14,27,61},{61,1,14},{1,61,
    27},{19,20,39},{39,2,19},{2,39,20},{20,24,49},{49,2,20},{2,49,24},{24,13,
    47},{47,2,24},{2,47,13},{13,23,41},{41,2,13},{2,41,23},{23,19,43},{43,2,
    23},{2,43,19},{18,17,38},{38,3,18},{3,38,17},{17,30,77},{77,3,17},{3,77,
    30},{30,15,75},{75,3,30},{3,75,15},{15,29,69},{69,3,15},{3,69,29},{29,18,
    71},{71,3,29},{3,71,18},{25,20,56},{56,4,25},{4,56,20},{20,19,40},{40,4,
    20},{4,40,19},{19,26,60},{60,4,19},{4,60,26},{26,16,57},{57,4,26},{4,57,
    16},{16,25,53},{53,4,16},{4,53,25},{21,30,80},{80,5,21},{5,80,30},{30,17,
    78},{78,5,30},{5,78,17},{17,27,63},{63,5,17},{5,63,27},{27,31,90},{90,5,
    27},{5,90,31},{31,21,81},{81,5,31},{5,81,21},{28,18,67},{67,6,28},{6,67,
    18},{18,29,72},{72,6,18},{6,72,29},{29,22,74},{74,6,29},{6,74,22},{22,32,
    82},{82,6,22},{6,82,32},{32,28,92},{92,6,32},{6,92,28},{26,19,59},{59,7,
    26},{7,59,19},{19,23,44},{44,7,19},{7,44,23},{23,21,46},{46,7,23},{7,46,
    21},{21,31,83},{83,7,21},{7,83,31},{31,26,88},{88,7,31},{7,88,26},{25,32,
    86},{86,8,25},{8,86,32},{32,22,84},{84,8,32},{8,84,22},{22,24,52},{52,8,
    22},{8,52,24},{24,20,50},{50,8,24},{8,50,20},{20,25,55},{55,8,20},{8,55,
    25},{23,13,42},{42,9,23},{9,42,13},{13,15,33},{33,9,13},{9,33,15},{15,30,
    76},{76,9,15},{9,76,30},{30,21,79},{79,9,30},{9,79,21},{21,23,45},{45,9,
    21},{9,45,23},{24,22,51},{51,10,24},{10,51,22},{22,29,73},{73,10,22},{10,
    73,29},{29,15,70},{70,10,29},{10,70,15},{15,13,34},{34,10,15},{10,34,
    13},{13,24,48},{48,10,13},{10,48,24},{26,31,87},{87,11,26},{11,87,31},{31,
    27,89},{89,11,31},{11,89,27},{27,14,62},{62,11,27},{11,62,14},{14,16,
    35},{35,11,14},{11,35,16},{16,26,58},{58,11,16},{11,58,26},{14,28,66},{66,
    12,14},{12,66,28},{28,32,91},{91,12,28},{12,91,32},{32,25,85},{85,12,
    32},{12,85,25},{25,16,54},{54,12,25},{12,54,16},{16,14,36},{36,12,16},{12,
    36,14}}
PolyhedronVertices[DodecahedronSmallTriambicIcosahedronCompound]:=
{{0,0,Root[5-20*#1^2+16*#1^4&,1,0]},{0,0,Root[5-20*#1^2+16*#1^4&,4,0]},
{Root[1-5*#1^2+5*#1^4&,1,0],0,Root[1-20*#1^2+80*#1^4&,1,0]},{Root[1-5*#1^2+5*#1^4&,4,0],0,Root[1-20*#1^2+80*#1^4&,4,0]},
{Root[1-20*#1^2+80*#1^4&,2,0],(-1-Sqrt[5])/4,Root[1-20*#1^2+80*#1^4&,1,0]},{Root[1-20*#1^2+80*#1^4&,2,0],(1+Sqrt[5])/4,Root[1-20*#1^2+80*#1^4&,1,0]},
{Root[1-20*#1^2+80*#1^4&,3,0],(-1-Sqrt[5])/4,Root[1-20*#1^2+80*#1^4&,4,0]},{Root[1-20*#1^2+80*#1^4&,3,0],(1+Sqrt[5])/4,Root[1-20*#1^2+80*#1^4&,4,0]},
{Root[1-40*#1^2+80*#1^4&,1,0],-1/2,Root[1-20*#1^2+80*#1^4&,4,0]},{Root[1-40*#1^2+80*#1^4&,1,0],1/2,Root[1-20*#1^2+80*#1^4&,4,0]},
{Root[1-40*#1^2+80*#1^4&,4,0],-1/2,Root[1-20*#1^2+80*#1^4&,1,0]},{Root[1-40*#1^2+80*#1^4&,4,0],1/2,Root[1-20*#1^2+80*#1^4&,1,0]},
{Root[1-50*#1^2+125*#1^4&,1,0],0,Root[1-1300*#1^2+2000*#1^4&,4,0]},
{Root[1-50*#1^2+125*#1^4&,4,0],0,Root[1-1300*#1^2+2000*#1^4&,1,0]},
{Root[1-125*#1^2+125*#1^4&,1,0],0,Root[1-100*#1^2+2000*#1^4&,4,0]},
{Root[1-125*#1^2+125*#1^4&,4,0],0,Root[1-100*#1^2+2000*#1^4&,1,0]},
{Root[1-500*#1^2+2000*#1^4&,1,0],(-5-Sqrt[5])/20,Root[1-1300*#1^2+2000*#1^4&,1,0]},
{Root[1-500*#1^2+2000*#1^4&,1,0],(5+Sqrt[5])/20,Root[1-1300*#1^2+2000*#1^4&,1,0]},
{Root[1-500*#1^2+2000*#1^4&,4,0],(-5-Sqrt[5])/20,Root[1-1300*#1^2+2000*#1^4&,4,0]},
{Root[1-500*#1^2+2000*#1^4&,4,0],(5+Sqrt[5])/20,Root[1-1300*#1^2+2000*#1^4&,4,0]},
{Root[1-200*#1^2+2000*#1^4&,1,0],(-5-2*Sqrt[5])/10,Root[1-100*#1^2+2000*#1^4&,4,0]},
{Root[1-200*#1^2+2000*#1^4&,1,0],(5+2*Sqrt[5])/10,Root[1-100*#1^2+2000*#1^4&,4,0]},
{Root[1-100*#1^2+2000*#1^4&,1,0],(-5-3*Sqrt[5])/20,Root[1-1300*#1^2+2000*#1^4&,4,0]},
{Root[1-100*#1^2+2000*#1^4&,1,0],(5+3*Sqrt[5])/20,Root[1-1300*#1^2+2000*#1^4&,4,0]},
{Root[1-1300*#1^2+2000*#1^4&,4,0],(5+3*Sqrt[5])/20,Root[1-100*#1^2+2000*#1^4&,4,0]},
{Root[1-1300*#1^2+2000*#1^4&,4,0],(-5-3*Sqrt[5])/20,Root[1-100*#1^2+2000*#1^4&,4,0]},
{Root[1-100*#1^2+2000*#1^4&,4,0],(-5-3*Sqrt[5])/20,Root[1-1300*#1^2+2000*#1^4&,1,0]},
{Root[1-100*#1^2+2000*#1^4&,4,0],(5+3*Sqrt[5])/20,Root[1-1300*#1^2+2000*#1^4&,1,0]},
{Root[1-1300*#1^2+2000*#1^4&,1,0],(5+3*Sqrt[5])/20,Root[1-100*#1^2+2000*#1^4&,1,0]},
{Root[1-1300*#1^2+2000*#1^4&,1,0],(-5-3*Sqrt[5])/20,Root[1-100*#1^2+2000*#1^4&,1,0]},
{Root[1-200*#1^2+2000*#1^4&,4,0],(-5-2*Sqrt[5])/10,Root[1-100*#1^2+2000*#1^4&,1,0]},
{Root[1-200*#1^2+2000*#1^4&,4,0],(5+2*Sqrt[5])/10,Root[1-100*#1^2+2000*#1^4&,1,0]},
{Root[-4579+3320*#1+7500*#1^2-8000*#1^3+2000*#1^4&,1,0],Root[1-25*#1^2+5*#1^4&,2,0],Root[-4579+5440*#1+16700*#1^2-12000*#1^3+2000*#1^4&,2,0]},
{Root[-4579+3320*#1+7500*#1^2-8000*#1^3+2000*#1^4&,1,0],Root[1-25*#1^2+5*#1^4&,3,0],Root[-4579+5440*#1+16700*#1^2-12000*#1^3+2000*#1^4&,2,0]},
{Root[-4579-3320*#1+7500*#1^2+8000*#1^3+2000*#1^4&,4,0],Root[1-25*#1^2+5*#1^4&,2,0],Root[-4579-5440*#1+16700*#1^2+12000*#1^3+2000*#1^4&,3,0]},
{Root[-4579-3320*#1+7500*#1^2+8000*#1^3+2000*#1^4&,4,0],Root[1-25*#1^2+5*#1^4&,3,0],Root[-4579-5440*#1+16700*#1^2+12000*#1^3+2000*#1^4&,3,0]},
{Root[-6899-20200*#1+27500*#1^2+16000*#1^3+2000*#1^4&,3,0],0,Root[1-1300*#1^2+2000*#1^4&,1,0]},
{Root[-1699-280*#1+8300*#1^2+8000*#1^3+2000*#1^4&,3,0],0,Root[-17359-2960*#1+33900*#1^2-16000*#1^3+2000*#1^4&,1,0]},
{Root[-6899+20200*#1+27500*#1^2-16000*#1^3+2000*#1^4&,2,0],0,Root[1-1300*#1^2+2000*#1^4&,4,0]},
{Root[-1699+280*#1+8300*#1^2-8000*#1^3+2000*#1^4&,2,0],0,Root[-17359+2960*#1+33900*#1^2+16000*#1^3+2000*#1^4&,4,0]},
{Root[-6899-10400*#1+82800*#1^2-96000*#1^3+32000*#1^4&,1,0],Root[-6899-60840*#1-103760*#1^2+3200*#1^3+6400*#1^4&,3,0],Root[1-1300*#1^2+2000*#1^4&,4,0]},
{Root[-1699+7680*#1-400*#1^2-32000*#1^3+32000*#1^4&,1,0],Root[-1699-12200*#1-20560*#1^2+3200*#1^3+6400*#1^4&,2,0],Root[-17359+2960*#1+33900*#1^2+16000*#1^3+2000*#1^4&,4,0]},
{Root[-6899+50800*#1+407200*#1^2+224000*#1^3+32000*#1^4&,4,0],Root[-6899-37520*#1-38240*#1^2+6400*#1^3+6400*#1^4&,3,0],Root[1-1300*#1^2+2000*#1^4&,4,0]},
{Root[-1699-7120*#1+68000*#1^2+96000*#1^3+32000*#1^4&,4,0],Root[-1699-7440*#1-6240*#1^2+6400*#1^3+6400*#1^4&,2,0],Root[-17359+2960*#1+33900*#1^2+16000*#1^3+2000*#1^4&,4,0]},
{Root[-9539+75120*#1+314800*#1^2+192000*#1^3+32000*#1^4&,3,0],Root[-1699-4760*#1+240*#1^2+9600*#1^3+6400*#1^4&,3,0],Root[-4579+5440*#1+16700*#1^2-12000*#1^3+2000*#1^4&,2,0]},
{Root[-19-880*#1-5200*#1^2+32000*#1^4&,3,0],Root[-31859-83480*#1-50960*#1^2+9600*#1^3+6400*#1^4&,3,0],Root[-4579+5440*#1+16700*#1^2-12000*#1^3+2000*#1^4&,2,0]},
{Root[-6899-10400*#1+82800*#1^2-96000*#1^3+32000*#1^4&,1,0],Root[-6899+60840*#1-103760*#1^2-3200*#1^3+6400*#1^4&,2,0],Root[1-1300*#1^2+2000*#1^4&,4,0]},
{Root[-1699+7680*#1-400*#1^2-32000*#1^3+32000*#1^4&,1,0],Root[-1699+12200*#1-20560*#1^2-3200*#1^3+6400*#1^4&,3,0],Root[-17359+2960*#1+33900*#1^2+16000*#1^3+2000*#1^4&,4,0]},
{Root[-6899+50800*#1+407200*#1^2+224000*#1^3+32000*#1^4&,4,0],Root[-6899+37520*#1-38240*#1^2-6400*#1^3+6400*#1^4&,2,0],Root[1-1300*#1^2+2000*#1^4&,4,0]},
{Root[-1699-7120*#1+68000*#1^2+96000*#1^3+32000*#1^4&,4,0],Root[-1699+7440*#1-6240*#1^2-6400*#1^3+6400*#1^4&,3,0],Root[-17359+2960*#1+33900*#1^2+16000*#1^3+2000*#1^4&,4,0]},
{Root[-9539+75120*#1+314800*#1^2+192000*#1^3+32000*#1^4&,3,0],Root[-1699+4760*#1+240*#1^2-9600*#1^3+6400*#1^4&,2,0],Root[-4579+5440*#1+16700*#1^2-12000*#1^3+2000*#1^4&,2,0]},
{Root[-19-880*#1-5200*#1^2+32000*#1^4&,3,0],Root[-31859+83480*#1-50960*#1^2-9600*#1^3+6400*#1^4&,2,0],Root[-4579+5440*#1+16700*#1^2-12000*#1^3+2000*#1^4&,2,0]},
{Root[-1759+6400*#1-4240*#1^2-6400*#1^3+6400*#1^4&,4,0],Root[-6899+60840*#1-103760*#1^2-3200*#1^3+6400*#1^4&,2,0],(-5+3*Sqrt[5])/10},
{Root[-67279+62560*#1+66160*#1^2-44800*#1^3+6400*#1^4&,2,0],Root[-1699+12200*#1-20560*#1^2-3200*#1^3+6400*#1^4&,3,0],(5-3*Sqrt[5])/10},
{Root[-89699+161520*#1+151200*#1^2-160000*#1^3+32000*#1^4&,2,0],Root[-1699+7440*#1-6240*#1^2-6400*#1^3+6400*#1^4&,3,0],Root[-4579+5440*#1+16700*#1^2-12000*#1^3+2000*#1^4&,2,0]},
{Root[-31859-46480*#1+55200*#1^2+96000*#1^3+32000*#1^4&,4,0],Root[-6899+37520*#1-38240*#1^2-6400*#1^3+6400*#1^4&,2,0],Root[-4579+5440*#1+16700*#1^2-12000*#1^3+2000*#1^4&,2,0]},
{Root[-1759+6400*#1-4240*#1^2-6400*#1^3+6400*#1^4&,4,0],Root[-6899-60840*#1-103760*#1^2+3200*#1^3+6400*#1^4&,3,0],(-5+3*Sqrt[5])/10},
{Root[-67279+62560*#1+66160*#1^2-44800*#1^3+6400*#1^4&,2,0],Root[-1699-12200*#1-20560*#1^2+3200*#1^3+6400*#1^4&,2,0],(5-3*Sqrt[5])/10},
{Root[-89699+161520*#1+151200*#1^2-160000*#1^3+32000*#1^4&,2,0],Root[-1699-7440*#1-6240*#1^2+6400*#1^3+6400*#1^4&,2,0],Root[-4579+5440*#1+16700*#1^2-12000*#1^3+2000*#1^4&,2,0]},
{Root[-31859-46480*#1+55200*#1^2+96000*#1^3+32000*#1^4&,4,0],Root[-6899-37520*#1-38240*#1^2+6400*#1^3+6400*#1^4&,3,0],Root[-4579+5440*#1+16700*#1^2-12000*#1^3+2000*#1^4&,2,0]},
{Root[-6899+10400*#1+82800*#1^2+96000*#1^3+32000*#1^4&,4,0],Root[-6899-60840*#1-103760*#1^2+3200*#1^3+6400*#1^4&,3,0],Root[1-1300*#1^2+2000*#1^4&,1,0]},
{Root[-1699-7680*#1-400*#1^2+32000*#1^3+32000*#1^4&,4,0],Root[-1699-12200*#1-20560*#1^2+3200*#1^3+6400*#1^4&,2,0],Root[-17359-2960*#1+33900*#1^2-16000*#1^3+2000*#1^4&,1,0]},
{Root[-1699+7120*#1+68000*#1^2-96000*#1^3+32000*#1^4&,1,0],Root[-1699-7440*#1-6240*#1^2+6400*#1^3+6400*#1^4&,2,0],Root[-17359-2960*#1+33900*#1^2-16000*#1^3+2000*#1^4&,1,0]},
{Root[-6899-50800*#1+407200*#1^2-224000*#1^3+32000*#1^4&,1,0],Root[-6899-37520*#1-38240*#1^2+6400*#1^3+6400*#1^4&,3,0],Root[1-1300*#1^2+2000*#1^4&,1,0]},
{Root[-6899+10400*#1+82800*#1^2+96000*#1^3+32000*#1^4&,4,0],Root[-6899+60840*#1-103760*#1^2-3200*#1^3+6400*#1^4&,2,0],Root[1-1300*#1^2+2000*#1^4&,1,0]},
{Root[-1699-7680*#1-400*#1^2+32000*#1^3+32000*#1^4&,4,0],Root[-1699+12200*#1-20560*#1^2-3200*#1^3+6400*#1^4&,3,0],Root[-17359-2960*#1+33900*#1^2-16000*#1^3+2000*#1^4&,1,0]},
{Root[-1699+7120*#1+68000*#1^2-96000*#1^3+32000*#1^4&,1,0],Root[-1699+7440*#1-6240*#1^2-6400*#1^3+6400*#1^4&,3,0],Root[-17359-2960*#1+33900*#1^2-16000*#1^3+2000*#1^4&,1,0]},
{Root[-6899-50800*#1+407200*#1^2-224000*#1^3+32000*#1^4&,1,0],Root[-6899+37520*#1-38240*#1^2-6400*#1^3+6400*#1^4&,2,0],Root[1-1300*#1^2+2000*#1^4&,1,0]},
{Root[-1759-6400*#1-4240*#1^2+6400*#1^3+6400*#1^4&,1,0],Root[-6899+60840*#1-103760*#1^2-3200*#1^3+6400*#1^4&,2,0],(5-3*Sqrt[5])/10},
{Root[-67279-62560*#1+66160*#1^2+44800*#1^3+6400*#1^4&,3,0],Root[-1699+12200*#1-20560*#1^2-3200*#1^3+6400*#1^4&,3,0],(-5+3*Sqrt[5])/10},
{Root[-31859+46480*#1+55200*#1^2-96000*#1^3+32000*#1^4&,1,0],Root[-6899+37520*#1-38240*#1^2-6400*#1^3+6400*#1^4&,2,0],Root[-4579-5440*#1+16700*#1^2+12000*#1^3+2000*#1^4&,3,0]},
{Root[-89699-161520*#1+151200*#1^2+160000*#1^3+32000*#1^4&,3,0],Root[-1699+7440*#1-6240*#1^2-6400*#1^3+6400*#1^4&,3,0],Root[-4579-5440*#1+16700*#1^2+12000*#1^3+2000*#1^4&,3,0]},
{Root[-31919+18480*#1+99760*#1^2-51200*#1^3+6400*#1^4&,1,0],Root[-1699+4760*#1+240*#1^2-9600*#1^3+6400*#1^4&,2,0],(-5+3*Sqrt[5])/10},
{Root[-14719-6000*#1+61360*#1^2-38400*#1^3+6400*#1^4&,1,0],Root[-31859+83480*#1-50960*#1^2-9600*#1^3+6400*#1^4&,2,0],(5-3*Sqrt[5])/10},
{Root[-1759-6400*#1-4240*#1^2+6400*#1^3+6400*#1^4&,1,0],Root[-6899-60840*#1-103760*#1^2+3200*#1^3+6400*#1^4&,3,0],(5-3*Sqrt[5])/10},
{Root[-67279-62560*#1+66160*#1^2+44800*#1^3+6400*#1^4&,3,0],Root[-1699-12200*#1-20560*#1^2+3200*#1^3+6400*#1^4&,2,0],(-5+3*Sqrt[5])/10},
{Root[-31859+46480*#1+55200*#1^2-96000*#1^3+32000*#1^4&,1,0],Root[-6899-37520*#1-38240*#1^2+6400*#1^3+6400*#1^4&,3,0],Root[-4579-5440*#1+16700*#1^2+12000*#1^3+2000*#1^4&,3,0]},
{Root[-89699-161520*#1+151200*#1^2+160000*#1^3+32000*#1^4&,3,0],Root[-1699-7440*#1-6240*#1^2+6400*#1^3+6400*#1^4&,2,0],Root[-4579-5440*#1+16700*#1^2+12000*#1^3+2000*#1^4&,3,0]},
{Root[-31919+18480*#1+99760*#1^2-51200*#1^3+6400*#1^4&,1,0],Root[-1699-4760*#1+240*#1^2+9600*#1^3+6400*#1^4&,3,0],(-5+3*Sqrt[5])/10},
{Root[-14719-6000*#1+61360*#1^2-38400*#1^3+6400*#1^4&,1,0],Root[-31859-83480*#1-50960*#1^2+9600*#1^3+6400*#1^4&,3,0],(5-3*Sqrt[5])/10},
{(-5+2*Sqrt[5])/5,Root[-4579-9800*#1-4760*#1^2+800*#1^3+400*#1^4&,3,0],(5-3*Sqrt[5])/10},
{(-5+2*Sqrt[5])/5,Root[-4579+9800*#1-4760*#1^2-800*#1^3+400*#1^4&,2,0],(5-3*Sqrt[5])/10},
{(5-2*Sqrt[5])/5,Root[-4579-9800*#1-4760*#1^2+800*#1^3+400*#1^4&,3,0],(-5+3*Sqrt[5])/10},
{(5-2*Sqrt[5])/5,Root[-4579+9800*#1-4760*#1^2-800*#1^3+400*#1^4&,2,0],(-5+3*Sqrt[5])/10},
{Root[-31919-18480*#1+99760*#1^2+51200*#1^3+6400*#1^4&,4,0],Root[-1699+4760*#1+240*#1^2-9600*#1^3+6400*#1^4&,2,0],(5-3*Sqrt[5])/10},
{Root[-14719+6000*#1+61360*#1^2+38400*#1^3+6400*#1^4&,4,0],Root[-31859+83480*#1-50960*#1^2-9600*#1^3+6400*#1^4&,2,0],(-5+3*Sqrt[5])/10},
{Root[-31919-18480*#1+99760*#1^2+51200*#1^3+6400*#1^4&,4,0],Root[-1699-4760*#1+240*#1^2+9600*#1^3+6400*#1^4&,3,0],(5-3*Sqrt[5])/10},
{Root[-14719+6000*#1+61360*#1^2+38400*#1^3+6400*#1^4&,4,0],Root[-31859-83480*#1-50960*#1^2+9600*#1^3+6400*#1^4&,3,0],(-5+3*Sqrt[5])/10},
{Root[-9539-75120*#1+314800*#1^2-192000*#1^3+32000*#1^4&,2,0],Root[-1699-4760*#1+240*#1^2+9600*#1^3+6400*#1^4&,3,0],Root[-4579-5440*#1+16700*#1^2+12000*#1^3+2000*#1^4&,3,0]},
{Root[-19+880*#1-5200*#1^2+32000*#1^4&,2,0],Root[-31859-83480*#1-50960*#1^2+9600*#1^3+6400*#1^4&,3,0],Root[-4579-5440*#1+16700*#1^2+12000*#1^3+2000*#1^4&,3,0]},
{Root[-9539-75120*#1+314800*#1^2-192000*#1^3+32000*#1^4&,2,0],Root[-1699+4760*#1+240*#1^2-9600*#1^3+6400*#1^4&,2,0],Root[-4579-5440*#1+16700*#1^2+12000*#1^3+2000*#1^4&,3,0]},
{Root[-19+880*#1-5200*#1^2+32000*#1^4&,2,0],Root[-31859+83480*#1-50960*#1^2-9600*#1^3+6400*#1^4&,2,0],Root[-4579-5440*#1+16700*#1^2+12000*#1^3+2000*#1^4&,3,0]}}

dot[x_List,y_List]:=(x-y).(x-y)

PolyhedronName[DueresSolid]:="D\[UDoubleDot]rers solid"
PolyhedronFaces[DuerersSolid]:={{1,7,8,12,3},{9,11,7,1,5},{8,2,6,10,12},{4,9,5,6,2},{
6,5,1,3,10},{11,4,2,8,7},{11,9,4},{12,10,3}}
PolyhedronVertices[DuerersSolid]:=
{{0,-Sqrt[2/3],Sqrt[1/3+1/Sqrt[5]]/2},
{0,Sqrt[2/3],-Sqrt[1/3+1/Sqrt[5]]/2},{0,-Sqrt[1-Sqrt[5]/3],
Sqrt[-1/4+23/(12*Sqrt[5])]},{0,Sqrt[1-Sqrt[5]/3],
-Sqrt[-1+23/(3*Sqrt[5])]/2},{-(1/Sqrt[2]),-(1/Sqrt[6]),
-Sqrt[1/3+1/Sqrt[5]]/2},{-(1/Sqrt[2]),1/Sqrt[6],Sqrt[1/3+1/Sqrt[5]]/2},
{1/Sqrt[2],-(1/Sqrt[6]),-Sqrt[1/3+1/Sqrt[5]]/2},
{1/Sqrt[2],1/Sqrt[6],Sqrt[1/3+1/Sqrt[5]]/2},
{-Sqrt[3-Sqrt[5]]/2,-Sqrt[(3-Sqrt[5])/3]/2,-Sqrt[-1+23/(3*Sqrt[5])]/2},
{-Sqrt[3-Sqrt[5]]/2,Sqrt[1-Sqrt[5]/3]/2,Sqrt[-1/4+23/(12*Sqrt[5])]},
{(-1+Sqrt[5])/(2*Sqrt[2]),-Sqrt[(3-Sqrt[5])/3]/2,
-Sqrt[-1+23/(3*Sqrt[5])]/2},{(-1+Sqrt[5])/(2*Sqrt[2]),
Sqrt[1-Sqrt[5]/3]/2,Sqrt[-1/4+23/(12*Sqrt[5])]}}

(* Echidnahedron *)

(* netlib *)
PolyhedronName[Echidnahedron]:="echidnahedron"
PolyhedronFaces[Echidnahedron]:={{66,65,45},{66,45,49},{66,49,65},{78,65,49},{78,49,60},{78,60,65},{86,65,60},{86,60,64},{86,64,65},{82,65,64},{82,64,53},{82,53,65},{69,65,53},{69,53,45},{69,45,65},{32,31,49},{32,49,45},{32,45,31},{17,31,45},{17,45,34},{17,34,31},{8,31,34},{8,34,30},{8,30,31},{12,31,30},{12,30,41},{12,41,31},{26,31,41},{26,41,49},{26,49,31},{75,57,60},{75,60,49},{75,49,57},{55,57,49},{55,49,41},{55,41,57},{51,57,41},{51,41,47},{51,47,57},{71,57,47},{71,47,58},{71,58,57},{80,57,58},{80,58,60},{80,60,57},{91,77,64},{91,64,60},{91,60,77},{89,77,60},{89,60,58},{89,58,77},{88,77,58},{88,58,59},{88,59,77},{90,77,59},{90,59,63},{90,63,77},{92,77,63},{92,63,64},{92,64,77},{84,68,53},{84,53,64},{84,64,68},{87,68,64},{87,64,63},{87,63,68},{83,68,63},{83,63,52},{83,52,68},{72,68,52},{72,52,46},{72,46,68},{73,68,46},{73,46,53},{73,53,68},{39,37,45},{39,45,53},{39,53,37},{43,37,53},{43,53,46},{43,46,37},{23,37,46},{23,46,35},{23,35,37},{14,37,35},{14,35,34},{14,34,37},{19,37,34},{19,34,45},{19,45,37},{7,28,29},{7,29,33},{7,33,28},{15,28,33},{15,33,44},{15,44,28},{27,28,44},{27,44,48},{27,48,28},{24,28,48},{24,48,40},{24,40,28},{11,28,40},{11,40,29},{11,29,28},{2,16,33},{2,33,29},{2,29,16},{1,16,29},{1,29,30},{1,30,16},{3,16,30},{3,30,34},{3,34,16},{5,16,34},{5,34,35},{5,35,16},{4,16,35},{4,35,33},{4,33,16},{18,36,44},{18,44,33},{18,33,36},{13,36,33},{13,33,35},{13,35,36},{22,36,35},{22,35,46},{22,46,36},{42,36,46},{42,46,52},{42,52,36},{38,36,52},{38,52,44},{38,44,36},{61,62,48},{61,48,44},{61,44,62},{67,62,44},{67,44,52},{67,52,62},{81,62,52},{81,52,63},{81,63,62},{85,62,63},{85,63,59},{85,59,62},{76,62,59},{76,59,48},{76,48,62},{54,56,40},{54,40,48},{54,48,56},{74,56,48},{74,48,59},{74,59,56},{79,56,59},{79,59,58},{79,58,56},{70,56,58},{70,58,47},{70,47,56},{50,56,47},{50,47,40},{50,40,56},{9,25,29},{9,29,40},{9,40,25},{20,25,40},{20,40,47},{20,47,25},{21,25,47},{21,47,41},{21,41,25},{10,25,41},{10,41,30},{10,30,25},{6,25,30},{6,30,29},{6,29,25}}
PolyhedronVertices[Echidnahedron]:={{-.24286409207111663,-5.6786771416950944,8.1837347473096866},{-.088115369316114376,-4.4975443438745647,7.0887406215445589},{-.072551178939206845,-5.0235019839630802,9.6533513684246168},{.17783751420375989,-3.1123889718614542,7.881613655433787},{.18745671285368741,-3.4374486700836984,9.4666302649211391},{.73265673095502754,-8.0574693871615606,7.6899650206192901},{1.1377941468392668,-4.9652235772374612,4.8232331818903529},{1.178541726259877,-6.3421985556541304,11.537471285152537},{1.4903104790713548,-8.3465110492057237,6.2898044211628173},{1.5058746694516904,-8.8724686893079761,8.8544151680445662},{1.7406991722120361,-6.4353980371073688,4.5180667081862504},{1.7814467516108736,-7.8123730155303668,11.232304811440672},{1.8340678353096789,-1.3388397336222347,6.8990017334438593},{1.859251224298732,-2.1898570719807278,11.048629089774796},{2.161400778475034,-3.8691098672843776,4.2159456163355327},{2.1865841675263047,-4.7201272056076969,8.3655729727116674},{2.2117675565644075,-5.5711445439445025,12.515200329096514},{2.591721583421552,-1.6278813956856534,5.498841133974398},{2.6324691627892043,-3.0048563741383726,12.213079237197478},{2.7317841856166116,-9.3401479226696134,6.5889077284006358},{2.7414033842797401,-9.6652076208945392,8.1739243378902371},{2.8672936656157848,-.56778572189402543,7.8767307773712233},{2.882857855926531,-1.0937433620230633,10.441341524220517},{3.1369216015154968,-6.2479021127516421,3.7221758896606974},{3.1621049905475301,-7.0989194510681786,7.8718032460394276},{3.1872883795664756,-7.949936789407854,12.021430602408202},{3.3969294933040476,-4.6618487988708894,3.5354547861761856},{3.4124936836811447,-5.1878064389705486,6.1000655330641108},{3.4221128823438947,-5.5128661371943738,7.6850821425556149},{3.4280578740615139,-5.7137640790724045,8.6646762799552868},{3.4376770727220398,-6.0388237773002668,10.249692889443369},{3.453241263109031,-6.5647814174069077,12.814303636334351},{3.5828065968222095,-4.5326312812512898,7.5696821541869831},{3.5924257954818447,-4.8576909794847608,9.1546987636665091},{3.6880657658602958,-4.1277107652046604,8.4779551764618308},{3.8428144886274833,-2.9465779673718112,7.3829610507034721},{3.85837867897892,-3.4725356074878592,9.9475717975590936},{4.0932031818117353,-1.0354649552679757,5.6112233377276755},{4.1339507611503717,-2.4124399336770487,12.325461440952689},{4.1857116221816367,-6.0028057411205761,7.2645156804877717},{4.1953308208418657,-6.3278654393526949,8.8495322899788174},{4.2635160949223671,-.3802897975460208,7.0808399588529597},{4.2886994838962519,-1.2313071358651384,11.230467315175093},{4.4457195139804156,-4.4167524272467279,7.0777945770049993},{4.4612837043560499,-4.9427100673539263,9.642405323881333},{4.6160324271104244,-3.7615772695375307,8.5474111981092882},{4.6635865888848297,-6.5065030106701062,7.9841854498009011},{4.8183353116428433,-5.3253702128358554,6.8891913240345267},{4.8338995020231994,-5.8513278529465934,9.4538020709156965},{4.990919532099796,-9.0367731443057513,5.3011293326871506},{5.0161029211059979,-9.8877904826468064,9.4507566890932573},{5.0842881951600002,-3.9402148408448384,7.6820643579400012},{5.0939073938121063,-4.2652745390722046,9.2670809674149182},{5.1456682548502634,-7.8556403464830682,4.2061352069250536},{5.1864158342608176,-9.2326153249127696,10.920373310203452},{5.4212403370141005,-6.7955446727086107,6.5840248503336453},{5.4368045273872042,-7.3215023128254215,9.14863559722132},{5.591553250146004,-6.1403695150079954,8.0536414714500555},{5.6871932205226376,-5.4103893007178194,7.3768978842476964},{5.6968124191838512,-5.7354489989458783,8.9619144937288617},{5.826377752903524,-3.7032988627880736,3.7172930115948923},{5.8419419432855818,-4.2292565028874919,6.2819037584849018},{5.8515611419375353,-4.5543162011241645,7.8669203679592954},{5.8575061336513755,-4.7552141429983069,8.8465145053510605},{5.8671253323149433,-5.0802738412128885,10.431531114846621},{5.8826895227010593,-5.6062314813068032,12.996141861731369},{6.0923306364346091,-2.3181434907877006,4.5101660455107433},{6.1175140254483087,-3.1691608291224377,8.6597934018621925},{6.1426974144705168,-4.0201781674161182,12.809420758247508},{6.3967611600559992,-9.1743369181745034,6.090255123655866},{6.4123253504057544,-9.700294558302196,8.654865870561494},{6.5382156317255985,-.60287265929595191,8.3576723100211805},{6.5478348303744034,-.92793235752339249,9.9426889195096606},{6.6471498531892301,-7.2632239060672622,4.3185174106856382},{6.6878974326073163,-8.6401988845077886,11.032755513942223},{7.067851459465004,-4.6969357362656883,4.0163963188475451},{7.0930348484814779,-5.5479530745927637,8.1660236752075566},{7.1182182375278528,-6.3989704128994381,12.315651031573348},{7.4203677916897673,-8.0782232082184795,5.4829675581049782},{7.4455511807004666,-8.9292405465778792,9.63259491450033},{7.498172264393606,-2.4557072646567981,5.2992918364780819},{7.5389198437759436,-3.8326822430597784,12.013529939725552},{7.7737443465489986,-1.3956115908852233,7.6771814798511767},{7.7893085369186862,-1.9215692309770366,10.241792226730851},{8.1010772897591439,-3.9258817245330329,4.9941253627829656},{8.141824869153687,-5.3028567029330248,11.708363466031958},{8.5469622850478912,-2.2106108930381505,8.8416316272682647},{9.0921623031559344,-6.8306316101143144,7.0649663829956729},{9.1017815018074846,-7.1556913083251197,8.6499829924890039},{9.3521701949524845,-5.2445782962367052,6.8782452795244579},{9.367734385319896,-5.770535936311236,9.4428560263843593},{9.522483108077056,-4.5894031385098053,8.3478619006439574}}

EschersSolid:=Cumulate[Polyhedron[RhombicDodecahedron],Sqrt[2/3]]

fs[l_List]:=Plus@@l/5

g[l1_List,l2_List]:=l1+(l2-l1)/GoldenRatio

GoldenRectangles:=Module[
	{top,bot,topV,botV,botRibbon,topRibbon,i,r=1/Sqrt[10-2Sqrt[5]]},
	top=Table[r{2Cos[2/5 Pi i],2Sin[2/5 Pi i],GoldenRatio+1},{i,5}];
	bot=-top;
	topV=Table[r{
		2GoldenRatio Cos[2/5 Pi i],
		2GoldenRatio Sin[2/5 Pi i],
		GoldenRatio-1},{i,5}];
	botV=-topV;
	botRibbon=Table[{
		bot[[i]],
		bot[[p5[i+1]]],
		botV[[p5[i+1]]],
		topV[[p5[i+3]]],
		botV[[p5[i]]]},{i,5}];
	topRibbon=-botRibbon;
(*	Graphics3D[{Polygon/@{top,bot},Polygon/@botRibbon,Polygon/@topRibbon}//
          Flatten]
			*)
		{Polygon[{fs[topRibbon[[1]]],fs[topRibbon[[2]]],
				fs[botRibbon[[1]]],fs[botRibbon[[2]]]}],
			Polygon[{fs[topRibbon[[3]]],fs[botRibbon[[5]]],
					fs[botRibbon[[3]]],fs[topRibbon[[5]]]}],
			Polygon[{fs[top],fs[topRibbon[[4]]],
					fs[bot],fs[botRibbon[[4]]]}]
			}
]
    
(* Great Rhombic Triacontahedron *)

PolyhedronName[GreatRhombicTriacontahedron]:="great rhombic triacontahedron"
PolyhedronFaces[GreatRhombicTriacontahedron]:=
{{138,71,69},{138,85,137},{148,80,78},{148,87,147},{140,139,70,72,31,32},{150,
    149,77,79,37,38},{144,143,86},{144,73,75},{154,153,88},{154,82,84},{156,
    42,41,83,81,155},{146,36,35,76,74,145},{1,22,34},{1,33,25},{166,158,
    141},{166,142,157},{96,51,73,93,86,126},{89,125,85,92,69,47},{170,160,
    151},{170,152,159},{2,26,40},{2,39,29},{97,135,87,100,78,57},{104,61,82,
    101,88,136},{46,107,64},{46,23,19},{1,53,17},{1,34,63},{179,135,67,111,77,
    149},{181,167,117,161,113,173},{1,63,33},{1,18,54},{50,20,24},{50,65,
    108},{180,155,81,112,68,136},{181,174,114,162,121,167},{56,111,67},{56,27,
    15},{2,43,13},{2,40,66},{177,125,64,107,70,139},{182,171,128,163,115,
    175},{2,66,39},{2,14,44},{60,16,28},{60,68,112},{178,145,74,108,65,
    126},{182,176,116,164,132,171},{138,92,85},{138,113,161},{2,44,21},{2,13,
    26},{178,174,141,158,122,145},{97,57,5,19,23,3},{2,29,14},{2,21,43},{144,
    162,114},{144,86,93},{177,139,118,157,142,173},{104,12,24,20,9,61},{148,
    100,87},{148,115,163},{1,54,30},{1,17,22},{180,176,151,160,131,155},{89,
    47,4,15,27,3},{1,25,18},{1,30,53},{154,164,116},{154,88,101},{179,149,127,
    159,152,175},{96,12,28,16,8,51},{56,55,27},{56,4,6},{166,165,142},{166,
    118,120},{168,91,90,119,117,167},{58,32,31,7,5,57},{60,10,8},{60,28,
    59},{166,124,122},{166,141,165},{62,61,9,11,35,36},{168,167,121,123,94,
    95},{170,169,152},{170,127,129},{46,45,23},{46,5,7},{48,38,37,6,4,
    47},{172,99,98,130,128,171},{170,133,131},{170,151,169},{50,11,9},{50,24,
    49},{172,171,132,134,102,103},{52,51,8,10,41,42},{46,7,31},{46,70,
    107},{50,108,74},{50,35,11},{181,173,142,165,141,174},{172,103,39,66,40,
    99},{56,6,37},{56,77,111},{60,112,81},{60,41,10},{182,175,152,169,151,
    176},{168,95,33,63,34,91},{148,130,98},{148,78,100},{166,157,118},{166,
    105,124},{89,3,23,45,64,125},{62,36,14,29,39,103},{154,101,82},{154,102,
    134},{166,120,105},{166,122,158},{58,99,40,26,13,32},{96,126,65,49,24,
    12},{170,159,127},{170,109,133},{138,119,90},{138,69,92},{52,42,18,25,33,
    95},{97,3,27,55,67,135},{170,129,109},{170,131,160},{144,93,73},{144,94,
    123},{104,136,68,59,28,12},{48,91,34,22,17,38},{56,15,4},{56,37,79},{144,
    75,94},{144,121,162},{156,110,30,54,18,42},{177,173,113,137,85,125},{138,
    161,117},{138,90,71},{60,83,41},{60,8,16},{150,38,17,53,30,110},{178,126,
    86,143,114,174},{46,19,5},{46,31,72},{154,84,102},{154,132,164},{146,106,
    21,44,14,36},{179,175,115,147,87,135},{148,163,128},{148,98,80},{50,76,
    35},{50,9,20},{140,32,13,43,21,106},{180,136,88,153,116,176},{144,123,
    121},{144,114,143},{46,72,70},{46,64,45},{146,145,122,124,105,106},{48,47,
    69,71,90,91},{138,137,113},{138,117,119},{50,49,65},{50,74,76},{52,95,94,
    75,73,51},{140,106,105,120,118,139},{56,79,77},{56,67,55},{154,134,
    132},{154,116,153},{58,57,78,80,98,99},{156,155,131,133,109,110},{60,59,
    68},{60,81,83},{148,147,115},{148,128,130},{150,110,109,129,127,149},{62,
    103,102,84,82,61}}
PolyhedronVertices[GreatRhombicTriacontahedron]:=
{{0, 0, -Sqrt[125/32 + (55*Sqrt[5])/32]}, {0, 0, Sqrt[125/32 + (55*Sqrt[5])/32]}, 
 {0, (-5 - 3*Sqrt[5])/4, 0}, {0, (-5 - Sqrt[5])/4, -Sqrt[25/32 + (5*Sqrt[5])/32]}, 
 {0, (-5 - Sqrt[5])/4, Sqrt[25/32 + (5*Sqrt[5])/32]}, 
 {0, (-5 - Sqrt[5])/4, -Sqrt[25/16 + (5*Sqrt[5])/8]}, 
 {0, (-5 - Sqrt[5])/4, Sqrt[25/16 + (5*Sqrt[5])/8]}, 
 {0, (5 + Sqrt[5])/4, -Sqrt[25/32 + (5*Sqrt[5])/32]}, 
 {0, (5 + Sqrt[5])/4, Sqrt[25/32 + (5*Sqrt[5])/32]}, 
 {0, (5 + Sqrt[5])/4, -Sqrt[25/16 + (5*Sqrt[5])/8]}, {0, (5 + Sqrt[5])/4, Sqrt[25/16 + (5*Sqrt[5])/8]}, 
 {0, (5 + 3*Sqrt[5])/4, 0}, {-Sqrt[5 - 2*Sqrt[5]]/4, -Sqrt[5]/4, Sqrt[65/32 + (29*Sqrt[5])/32]}, 
 {-Sqrt[5 - 2*Sqrt[5]]/4, Sqrt[5]/4, Sqrt[65/32 + (29*Sqrt[5])/32]}, 
 {-Sqrt[5 - 2*Sqrt[5]]/4, (-5 - 2*Sqrt[5])/4, -Sqrt[5/16 + Sqrt[5]/8]}, 
 {-Sqrt[5 - 2*Sqrt[5]]/4, (5 + 2*Sqrt[5])/4, -Sqrt[5/16 + Sqrt[5]/8]}, 
 {Sqrt[5 - 2*Sqrt[5]]/4, -Sqrt[5]/4, -Sqrt[65/32 + (29*Sqrt[5])/32]}, 
 {Sqrt[5 - 2*Sqrt[5]]/4, Sqrt[5]/4, -Sqrt[65/32 + (29*Sqrt[5])/32]}, 
 {Sqrt[5 - 2*Sqrt[5]]/4, (-5 - 2*Sqrt[5])/4, Sqrt[5/16 + Sqrt[5]/8]}, 
 {Sqrt[5 - 2*Sqrt[5]]/4, (5 + 2*Sqrt[5])/4, Sqrt[5/16 + Sqrt[5]/8]}, 
 {-Sqrt[(5 - Sqrt[5])/2]/2, 0, Sqrt[65/32 + (29*Sqrt[5])/32]}, 
 {-Sqrt[(5 - Sqrt[5])/2]/4, (-5 - Sqrt[5])/8, -Sqrt[45/16 + (9*Sqrt[5])/8]}, 
 {-Sqrt[(5 - Sqrt[5])/2]/4, (5*(-1 - Sqrt[5]))/8, Sqrt[5/32 + Sqrt[5]/32]}, 
 {-Sqrt[(5 - Sqrt[5])/2]/4, (5*(1 + Sqrt[5]))/8, Sqrt[5/32 + Sqrt[5]/32]}, 
 {-Sqrt[(5 - Sqrt[5])/2]/4, (5 + Sqrt[5])/8, -Sqrt[45/16 + (9*Sqrt[5])/8]}, 
 {Sqrt[(5 - Sqrt[5])/2]/4, (-5 - Sqrt[5])/8, Sqrt[45/16 + (9*Sqrt[5])/8]}, 
 {Sqrt[(5 - Sqrt[5])/2]/4, (5*(-1 - Sqrt[5]))/8, -Sqrt[5/32 + Sqrt[5]/32]}, 
 {Sqrt[(5 - Sqrt[5])/2]/4, (5*(1 + Sqrt[5]))/8, -Sqrt[5/32 + Sqrt[5]/32]}, 
 {Sqrt[(5 - Sqrt[5])/2]/4, (5 + Sqrt[5])/8, Sqrt[45/16 + (9*Sqrt[5])/8]}, 
 {Sqrt[(5 - Sqrt[5])/2]/2, 0, -Sqrt[65/32 + (29*Sqrt[5])/32]}, 
 {-Sqrt[5/32 + Sqrt[5]/32], (-5 - 3*Sqrt[5])/8, Sqrt[45/32 + (9*Sqrt[5])/32]}, 
 {-Sqrt[5/32 + Sqrt[5]/32], (-5 - 3*Sqrt[5])/8, Sqrt[25/8 + (11*Sqrt[5])/8]}, 
 {-Sqrt[5/32 + Sqrt[5]/32], (5 - Sqrt[5])/8, -Sqrt[65/32 + (29*Sqrt[5])/32]}, 
 {-Sqrt[5/32 + Sqrt[5]/32], (-5 + Sqrt[5])/8, -Sqrt[65/32 + (29*Sqrt[5])/32]}, 
 {-Sqrt[5/32 + Sqrt[5]/32], (5 + 3*Sqrt[5])/8, Sqrt[45/32 + (9*Sqrt[5])/32]}, 
 {-Sqrt[5/32 + Sqrt[5]/32], (5 + 3*Sqrt[5])/8, Sqrt[25/8 + (11*Sqrt[5])/8]}, 
 {Sqrt[5/32 + Sqrt[5]/32], (-5 - 3*Sqrt[5])/8, -Sqrt[45/32 + (9*Sqrt[5])/32]}, 
 {Sqrt[5/32 + Sqrt[5]/32], (-5 - 3*Sqrt[5])/8, -Sqrt[25/8 + (11*Sqrt[5])/8]}, 
 {Sqrt[5/32 + Sqrt[5]/32], (5 - Sqrt[5])/8, Sqrt[65/32 + (29*Sqrt[5])/32]}, 
 {Sqrt[5/32 + Sqrt[5]/32], (-5 + Sqrt[5])/8, Sqrt[65/32 + (29*Sqrt[5])/32]}, 
 {Sqrt[5/32 + Sqrt[5]/32], (5 + 3*Sqrt[5])/8, -Sqrt[45/32 + (9*Sqrt[5])/32]}, 
 {Sqrt[5/32 + Sqrt[5]/32], (5 + 3*Sqrt[5])/8, -Sqrt[25/8 + (11*Sqrt[5])/8]}, 
 {-Sqrt[5/16 + Sqrt[5]/8], -Sqrt[5]/4, Sqrt[45/16 + (9*Sqrt[5])/8]}, 
 {-Sqrt[5/16 + Sqrt[5]/8], Sqrt[5]/4, Sqrt[45/16 + (9*Sqrt[5])/8]}, 
 {-Sqrt[5/16 + Sqrt[5]/8], (-5 - 2*Sqrt[5])/4, Sqrt[5 - 2*Sqrt[5]]/4}, 
 {-Sqrt[5/16 + Sqrt[5]/8], (-5 - 2*Sqrt[5])/4, Sqrt[25/32 + (11*Sqrt[5])/32]}, 
 {-Sqrt[5/16 + Sqrt[5]/8], (-5 - 2*Sqrt[5])/4, -Sqrt[5/4 + Sqrt[5]/2]}, 
 {-Sqrt[5/16 + Sqrt[5]/8], (-5 - 2*Sqrt[5])/4, -Sqrt[85/16 + (19*Sqrt[5])/8]}, 
 {-Sqrt[5/16 + Sqrt[5]/8], (5 + 2*Sqrt[5])/4, Sqrt[5 - 2*Sqrt[5]]/4}, 
 {-Sqrt[5/16 + Sqrt[5]/8], (5 + 2*Sqrt[5])/4, Sqrt[25/32 + (11*Sqrt[5])/32]}, 
 {-Sqrt[5/16 + Sqrt[5]/8], (5 + 2*Sqrt[5])/4, -Sqrt[5/4 + Sqrt[5]/2]}, 
 {-Sqrt[5/16 + Sqrt[5]/8], (5 + 2*Sqrt[5])/4, -Sqrt[85/16 + (19*Sqrt[5])/8]}, 
 {Sqrt[5/16 + Sqrt[5]/8], -Sqrt[5]/4, -Sqrt[45/16 + (9*Sqrt[5])/8]}, 
 {Sqrt[5/16 + Sqrt[5]/8], Sqrt[5]/4, -Sqrt[45/16 + (9*Sqrt[5])/8]}, 
 {Sqrt[5/16 + Sqrt[5]/8], (-5 - 2*Sqrt[5])/4, -Sqrt[5 - 2*Sqrt[5]]/4}, 
 {Sqrt[5/16 + Sqrt[5]/8], (-5 - 2*Sqrt[5])/4, -Sqrt[25/32 + (11*Sqrt[5])/32]}, 
 {Sqrt[5/16 + Sqrt[5]/8], (-5 - 2*Sqrt[5])/4, Sqrt[5/4 + Sqrt[5]/2]}, 
 {Sqrt[5/16 + Sqrt[5]/8], (-5 - 2*Sqrt[5])/4, Sqrt[85/16 + (19*Sqrt[5])/8]}, 
 {Sqrt[5/16 + Sqrt[5]/8], (5 + 2*Sqrt[5])/4, -Sqrt[5 - 2*Sqrt[5]]/4}, 
 {Sqrt[5/16 + Sqrt[5]/8], (5 + 2*Sqrt[5])/4, -Sqrt[25/32 + (11*Sqrt[5])/32]}, 
 {Sqrt[5/16 + Sqrt[5]/8], (5 + 2*Sqrt[5])/4, Sqrt[5/4 + Sqrt[5]/2]}, 
 {Sqrt[5/16 + Sqrt[5]/8], (5 + 2*Sqrt[5])/4, Sqrt[85/16 + (19*Sqrt[5])/8]}, 
 {-Sqrt[5/8 + Sqrt[5]/8], 0, -Sqrt[45/16 + (9*Sqrt[5])/8]}, {-Sqrt[5/8 + Sqrt[5]/8], (-5 - Sqrt[5])/4, 
  Sqrt[5/32 + Sqrt[5]/32]}, {-Sqrt[5/8 + Sqrt[5]/8], (5 + Sqrt[5])/4, Sqrt[5/32 + Sqrt[5]/32]}, 
 {Sqrt[5/8 + Sqrt[5]/8], 0, Sqrt[45/16 + (9*Sqrt[5])/8]}, {Sqrt[5/8 + Sqrt[5]/8], (-5 - Sqrt[5])/4, 
  -Sqrt[5/32 + Sqrt[5]/32]}, {Sqrt[5/8 + Sqrt[5]/8], (5 + Sqrt[5])/4, -Sqrt[5/32 + Sqrt[5]/32]}, 
 {-Sqrt[25/32 + (5*Sqrt[5])/32], (-5 - 3*Sqrt[5])/8, -Sqrt[25/32 + (5*Sqrt[5])/32]}, 
 {-Sqrt[25/32 + (5*Sqrt[5])/32], (-5 - 3*Sqrt[5])/8, Sqrt[25/32 + (5*Sqrt[5])/32]}, 
 {-Sqrt[25/32 + (5*Sqrt[5])/32], (-5 - 3*Sqrt[5])/8, -Sqrt[25/16 + (5*Sqrt[5])/8]}, 
 {-Sqrt[25/32 + (5*Sqrt[5])/32], (-5 - 3*Sqrt[5])/8, Sqrt[25/16 + (5*Sqrt[5])/8]}, 
 {-Sqrt[25/32 + (5*Sqrt[5])/32], (5 + 3*Sqrt[5])/8, -Sqrt[25/32 + (5*Sqrt[5])/32]}, 
 {-Sqrt[25/32 + (5*Sqrt[5])/32], (5 + 3*Sqrt[5])/8, Sqrt[25/32 + (5*Sqrt[5])/32]}, 
 {-Sqrt[25/32 + (5*Sqrt[5])/32], (5 + 3*Sqrt[5])/8, -Sqrt[25/16 + (5*Sqrt[5])/8]}, 
 {-Sqrt[25/32 + (5*Sqrt[5])/32], (5 + 3*Sqrt[5])/8, Sqrt[25/16 + (5*Sqrt[5])/8]}, 
 {Sqrt[25/32 + (5*Sqrt[5])/32], (-5 - 3*Sqrt[5])/8, -Sqrt[25/32 + (5*Sqrt[5])/32]}, 
 {Sqrt[25/32 + (5*Sqrt[5])/32], (-5 - 3*Sqrt[5])/8, Sqrt[25/32 + (5*Sqrt[5])/32]}, 
 {Sqrt[25/32 + (5*Sqrt[5])/32], (-5 - 3*Sqrt[5])/8, -Sqrt[25/16 + (5*Sqrt[5])/8]}, 
 {Sqrt[25/32 + (5*Sqrt[5])/32], (-5 - 3*Sqrt[5])/8, Sqrt[25/16 + (5*Sqrt[5])/8]}, 
 {Sqrt[25/32 + (5*Sqrt[5])/32], (5 + 3*Sqrt[5])/8, -Sqrt[25/32 + (5*Sqrt[5])/32]}, 
 {Sqrt[25/32 + (5*Sqrt[5])/32], (5 + 3*Sqrt[5])/8, Sqrt[25/32 + (5*Sqrt[5])/32]}, 
 {Sqrt[25/32 + (5*Sqrt[5])/32], (5 + 3*Sqrt[5])/8, -Sqrt[25/16 + (5*Sqrt[5])/8]}, 
 {Sqrt[25/32 + (5*Sqrt[5])/32], (5 + 3*Sqrt[5])/8, Sqrt[25/16 + (5*Sqrt[5])/8]}, 
 {-Sqrt[45/32 + (9*Sqrt[5])/32], (-5 - 3*Sqrt[5])/8, -Sqrt[5/32 + Sqrt[5]/32]}, 
 {-Sqrt[45/32 + (9*Sqrt[5])/32], (5 + 3*Sqrt[5])/8, -Sqrt[5/32 + Sqrt[5]/32]}, 
 {Sqrt[45/32 + (9*Sqrt[5])/32], (-5 - 3*Sqrt[5])/8, Sqrt[5/32 + Sqrt[5]/32]}, 
 {Sqrt[45/32 + (9*Sqrt[5])/32], (5 + 3*Sqrt[5])/8, Sqrt[5/32 + Sqrt[5]/32]}, 
 {-Sqrt[25/32 + (11*Sqrt[5])/32], (-15 - 7*Sqrt[5])/8, -Sqrt[5/16 + Sqrt[5]/8]}, 
 {-Sqrt[25/32 + (11*Sqrt[5])/32], (-5 - Sqrt[5])/8, -Sqrt[45/32 + (9*Sqrt[5])/32]}, 
 {-Sqrt[25/32 + (11*Sqrt[5])/32], (-5 - Sqrt[5])/8, -Sqrt[25/8 + (11*Sqrt[5])/8]}, 
 {-Sqrt[25/32 + (11*Sqrt[5])/32], (5*(-1 - Sqrt[5]))/8, -Sqrt[5/16 + Sqrt[5]/8]}, 
 {-Sqrt[25/32 + (11*Sqrt[5])/32], (5*(1 + Sqrt[5]))/8, -Sqrt[5/16 + Sqrt[5]/8]}, 
 {-Sqrt[25/32 + (11*Sqrt[5])/32], (5 + Sqrt[5])/8, -Sqrt[45/32 + (9*Sqrt[5])/32]}, 
 {-Sqrt[25/32 + (11*Sqrt[5])/32], (5 + Sqrt[5])/8, -Sqrt[25/8 + (11*Sqrt[5])/8]}, 
 {-Sqrt[25/32 + (11*Sqrt[5])/32], (15 + 7*Sqrt[5])/8, -Sqrt[5/16 + Sqrt[5]/8]}, 
 {Sqrt[25/32 + (11*Sqrt[5])/32], (-15 - 7*Sqrt[5])/8, Sqrt[5/16 + Sqrt[5]/8]}, 
 {Sqrt[25/32 + (11*Sqrt[5])/32], (-5 - Sqrt[5])/8, Sqrt[45/32 + (9*Sqrt[5])/32]}, 
 {Sqrt[25/32 + (11*Sqrt[5])/32], (-5 - Sqrt[5])/8, Sqrt[25/8 + (11*Sqrt[5])/8]}, 
 {Sqrt[25/32 + (11*Sqrt[5])/32], (5*(-1 - Sqrt[5]))/8, Sqrt[5/16 + Sqrt[5]/8]}, 
 {Sqrt[25/32 + (11*Sqrt[5])/32], (5*(1 + Sqrt[5]))/8, Sqrt[5/16 + Sqrt[5]/8]}, 
 {Sqrt[25/32 + (11*Sqrt[5])/32], (5 + Sqrt[5])/8, Sqrt[45/32 + (9*Sqrt[5])/32]}, 
 {Sqrt[25/32 + (11*Sqrt[5])/32], (5 + Sqrt[5])/8, Sqrt[25/8 + (11*Sqrt[5])/8]}, 
 {Sqrt[25/32 + (11*Sqrt[5])/32], (15 + 7*Sqrt[5])/8, Sqrt[5/16 + Sqrt[5]/8]}, 
 {-Sqrt[5/4 + Sqrt[5]/2], 0, Sqrt[45/32 + (9*Sqrt[5])/32]}, 
 {-Sqrt[5/4 + Sqrt[5]/2], 0, Sqrt[25/8 + (11*Sqrt[5])/8]}, {-Sqrt[5/4 + Sqrt[5]/2], (-5 - Sqrt[5])/4, 
  Sqrt[5/16 + Sqrt[5]/8]}, {-Sqrt[5/4 + Sqrt[5]/2], (5 + Sqrt[5])/4, Sqrt[5/16 + Sqrt[5]/8]}, 
 {Sqrt[5/4 + Sqrt[5]/2], 0, -Sqrt[45/32 + (9*Sqrt[5])/32]}, 
 {Sqrt[5/4 + Sqrt[5]/2], 0, -Sqrt[25/8 + (11*Sqrt[5])/8]}, {Sqrt[5/4 + Sqrt[5]/2], (-5 - Sqrt[5])/4, 
  -Sqrt[5/16 + Sqrt[5]/8]}, {Sqrt[5/4 + Sqrt[5]/2], (5 + Sqrt[5])/4, -Sqrt[5/16 + Sqrt[5]/8]}, 
 {-Sqrt[65/32 + (19*Sqrt[5])/32], (-5 - Sqrt[5])/8, -Sqrt[5/32 + Sqrt[5]/32]}, 
 {-Sqrt[65/32 + (19*Sqrt[5])/32], (5 + Sqrt[5])/8, -Sqrt[5/32 + Sqrt[5]/32]}, 
 {Sqrt[65/32 + (19*Sqrt[5])/32], (-5 - Sqrt[5])/8, Sqrt[5/32 + Sqrt[5]/32]}, 
 {Sqrt[65/32 + (19*Sqrt[5])/32], (5 + Sqrt[5])/8, Sqrt[5/32 + Sqrt[5]/32]}, 
 {-Sqrt[25/16 + (5*Sqrt[5])/8], -Sqrt[5]/4, -Sqrt[25/32 + (5*Sqrt[5])/32]}, 
 {-Sqrt[25/16 + (5*Sqrt[5])/8], -Sqrt[5]/4, Sqrt[25/32 + (5*Sqrt[5])/32]}, 
 {-Sqrt[25/16 + (5*Sqrt[5])/8], -Sqrt[5]/4, -Sqrt[25/16 + (5*Sqrt[5])/8]}, 
 {-Sqrt[25/16 + (5*Sqrt[5])/8], -Sqrt[5]/4, Sqrt[25/16 + (5*Sqrt[5])/8]}, 
 {-Sqrt[25/16 + (5*Sqrt[5])/8], Sqrt[5]/4, -Sqrt[25/32 + (5*Sqrt[5])/32]}, 
 {-Sqrt[25/16 + (5*Sqrt[5])/8], Sqrt[5]/4, Sqrt[25/32 + (5*Sqrt[5])/32]}, 
 {-Sqrt[25/16 + (5*Sqrt[5])/8], Sqrt[5]/4, -Sqrt[25/16 + (5*Sqrt[5])/8]}, 
 {-Sqrt[25/16 + (5*Sqrt[5])/8], Sqrt[5]/4, Sqrt[25/16 + (5*Sqrt[5])/8]}, 
 {-Sqrt[25/16 + (5*Sqrt[5])/8], (-5 - 2*Sqrt[5])/4, 0}, {-Sqrt[25/16 + (5*Sqrt[5])/8], 
  (5 + 2*Sqrt[5])/4, 0}, {Sqrt[25/16 + (5*Sqrt[5])/8], -Sqrt[5]/4, -Sqrt[25/32 + (5*Sqrt[5])/32]}, 
 {Sqrt[25/16 + (5*Sqrt[5])/8], -Sqrt[5]/4, Sqrt[25/32 + (5*Sqrt[5])/32]}, 
 {Sqrt[25/16 + (5*Sqrt[5])/8], -Sqrt[5]/4, -Sqrt[25/16 + (5*Sqrt[5])/8]}, 
 {Sqrt[25/16 + (5*Sqrt[5])/8], -Sqrt[5]/4, Sqrt[25/16 + (5*Sqrt[5])/8]}, 
 {Sqrt[25/16 + (5*Sqrt[5])/8], Sqrt[5]/4, -Sqrt[25/32 + (5*Sqrt[5])/32]}, 
 {Sqrt[25/16 + (5*Sqrt[5])/8], Sqrt[5]/4, Sqrt[25/32 + (5*Sqrt[5])/32]}, 
 {Sqrt[25/16 + (5*Sqrt[5])/8], Sqrt[5]/4, -Sqrt[25/16 + (5*Sqrt[5])/8]}, 
 {Sqrt[25/16 + (5*Sqrt[5])/8], Sqrt[5]/4, Sqrt[25/16 + (5*Sqrt[5])/8]}, 
 {Sqrt[25/16 + (5*Sqrt[5])/8], (-5 - 2*Sqrt[5])/4, 0}, {Sqrt[25/16 + (5*Sqrt[5])/8], (5 + 2*Sqrt[5])/4, 
  0}, {-Sqrt[65/32 + (29*Sqrt[5])/32], (-5 - 3*Sqrt[5])/8, -Sqrt[5 - 2*Sqrt[5]]/4}, 
 {-Sqrt[65/32 + (29*Sqrt[5])/32], (-5 - 3*Sqrt[5])/8, -Sqrt[25/32 + (11*Sqrt[5])/32]}, 
 {-Sqrt[65/32 + (29*Sqrt[5])/32], (-5 - 3*Sqrt[5])/8, Sqrt[5/4 + Sqrt[5]/2]}, 
 {-Sqrt[65/32 + (29*Sqrt[5])/32], (-5 - 3*Sqrt[5])/8, Sqrt[85/16 + (19*Sqrt[5])/8]}, 
 {-Sqrt[65/32 + (29*Sqrt[5])/32], (5 - Sqrt[5])/8, Sqrt[5/32 + Sqrt[5]/32]}, 
 {-Sqrt[65/32 + (29*Sqrt[5])/32], (-5 + Sqrt[5])/8, Sqrt[5/32 + Sqrt[5]/32]}, 
 {-Sqrt[65/32 + (29*Sqrt[5])/32], (5 + 3*Sqrt[5])/8, -Sqrt[5 - 2*Sqrt[5]]/4}, 
 {-Sqrt[65/32 + (29*Sqrt[5])/32], (5 + 3*Sqrt[5])/8, -Sqrt[25/32 + (11*Sqrt[5])/32]}, 
 {-Sqrt[65/32 + (29*Sqrt[5])/32], (5 + 3*Sqrt[5])/8, Sqrt[5/4 + Sqrt[5]/2]}, 
 {-Sqrt[65/32 + (29*Sqrt[5])/32], (5 + 3*Sqrt[5])/8, Sqrt[85/16 + (19*Sqrt[5])/8]}, 
 {Sqrt[65/32 + (29*Sqrt[5])/32], (-5 - 3*Sqrt[5])/8, Sqrt[5 - 2*Sqrt[5]]/4}, 
 {Sqrt[65/32 + (29*Sqrt[5])/32], (-5 - 3*Sqrt[5])/8, Sqrt[25/32 + (11*Sqrt[5])/32]}, 
 {Sqrt[65/32 + (29*Sqrt[5])/32], (-5 - 3*Sqrt[5])/8, -Sqrt[5/4 + Sqrt[5]/2]}, 
 {Sqrt[65/32 + (29*Sqrt[5])/32], (-5 - 3*Sqrt[5])/8, -Sqrt[85/16 + (19*Sqrt[5])/8]}, 
 {Sqrt[65/32 + (29*Sqrt[5])/32], (5 - Sqrt[5])/8, -Sqrt[5/32 + Sqrt[5]/32]}, 
 {Sqrt[65/32 + (29*Sqrt[5])/32], (-5 + Sqrt[5])/8, -Sqrt[5/32 + Sqrt[5]/32]}, 
 {Sqrt[65/32 + (29*Sqrt[5])/32], (5 + 3*Sqrt[5])/8, Sqrt[5 - 2*Sqrt[5]]/4}, 
 {Sqrt[65/32 + (29*Sqrt[5])/32], (5 + 3*Sqrt[5])/8, Sqrt[25/32 + (11*Sqrt[5])/32]}, 
 {Sqrt[65/32 + (29*Sqrt[5])/32], (5 + 3*Sqrt[5])/8, -Sqrt[5/4 + Sqrt[5]/2]}, 
 {Sqrt[65/32 + (29*Sqrt[5])/32], (5 + 3*Sqrt[5])/8, -Sqrt[85/16 + (19*Sqrt[5])/8]}, 
 {-Sqrt[85/32 + (31*Sqrt[5])/32], (-5 - Sqrt[5])/8, Sqrt[5/16 + Sqrt[5]/8]}, 
 {-Sqrt[85/32 + (31*Sqrt[5])/32], (5 + Sqrt[5])/8, Sqrt[5/16 + Sqrt[5]/8]}, 
 {Sqrt[85/32 + (31*Sqrt[5])/32], (-5 - Sqrt[5])/8, -Sqrt[5/16 + Sqrt[5]/8]}, 
 {Sqrt[85/32 + (31*Sqrt[5])/32], (5 + Sqrt[5])/8, -Sqrt[5/16 + Sqrt[5]/8]}, 
 {-Sqrt[45/16 + (9*Sqrt[5])/8], -Sqrt[5]/4, -Sqrt[5/16 + Sqrt[5]/8]}, 
 {-Sqrt[45/16 + (9*Sqrt[5])/8], Sqrt[5]/4, -Sqrt[5/16 + Sqrt[5]/8]}, 
 {Sqrt[45/16 + (9*Sqrt[5])/8], -Sqrt[5]/4, Sqrt[5/16 + Sqrt[5]/8]}, 
 {Sqrt[45/16 + (9*Sqrt[5])/8], Sqrt[5]/4, Sqrt[5/16 + Sqrt[5]/8]}, 
 {-Sqrt[25/8 + (11*Sqrt[5])/8], 0, Sqrt[5 - 2*Sqrt[5]]/4}, {-Sqrt[25/8 + (11*Sqrt[5])/8], 0, 
  Sqrt[25/32 + (11*Sqrt[5])/32]}, {-Sqrt[25/8 + (11*Sqrt[5])/8], 0, -Sqrt[5/4 + Sqrt[5]/2]}, 
 {-Sqrt[25/8 + (11*Sqrt[5])/8], 0, -Sqrt[85/16 + (19*Sqrt[5])/8]}, 
 {Sqrt[25/8 + (11*Sqrt[5])/8], 0, -Sqrt[5 - 2*Sqrt[5]]/4}, {Sqrt[25/8 + (11*Sqrt[5])/8], 0, 
  -Sqrt[25/32 + (11*Sqrt[5])/32]}, {Sqrt[25/8 + (11*Sqrt[5])/8], 0, Sqrt[5/4 + Sqrt[5]/2]}, 
 {Sqrt[25/8 + (11*Sqrt[5])/8], 0, Sqrt[85/16 + (19*Sqrt[5])/8]}, 
 {-Sqrt[125/32 + (55*Sqrt[5])/32], (-5 - Sqrt[5])/8, 0}, {-Sqrt[125/32 + (55*Sqrt[5])/32], 
  (5 + Sqrt[5])/8, 0}, {Sqrt[125/32 + (55*Sqrt[5])/32], (-5 - Sqrt[5])/8, 0}, 
 {Sqrt[125/32 + (55*Sqrt[5])/32], (5 + Sqrt[5])/8, 0}, {-Sqrt[85/16 + (19*Sqrt[5])/8], 
  (-5 - 2*Sqrt[5])/4, Sqrt[5/16 + Sqrt[5]/8]}, {-Sqrt[85/16 + (19*Sqrt[5])/8], (5 + 2*Sqrt[5])/4, 
  Sqrt[5/16 + Sqrt[5]/8]}, {Sqrt[85/16 + (19*Sqrt[5])/8], (-5 - 2*Sqrt[5])/4, -Sqrt[5/16 + Sqrt[5]/8]}, 
 {Sqrt[85/16 + (19*Sqrt[5])/8], (5 + 2*Sqrt[5])/4, -Sqrt[5/16 + Sqrt[5]/8]}, 
 {-Sqrt[65/8 + (29*Sqrt[5])/8], 0, -Sqrt[5/16 + Sqrt[5]/8]}, 
 {Sqrt[65/8 + (29*Sqrt[5])/8], 0, Sqrt[5/16 + Sqrt[5]/8]}}

Hexahedron[{3,3,3,3,3,3}] :=With[{
      a ={0,0,0},b={-1,0,1},c={.5,.7,1},d={.5,-.7,1},e ={0,0,2}
      },
     Polygon/@{{a,b,c},{a,b,d},{a,c,d},{e,b,c},{e,b,d},{e,c,d}}
    ]

Hexahedron[{3,3,3,3,3,5}] :=With[{
      a ={0,0,1},b={0.,1.,0.},c={0.95,0.31,0.},d={0.59,-0.81,0.},
      e ={-0.59,-0.81,0.},f={-0.95,0.31,0.}
      }, 
    Polygon/@{{a,b,c},{a,c,d},{a,d,e},{a,e,f},{a,f,b},{b,c,d,e,f}}
    ]

Hexahedron[{3,3,3,3,4,4}]:=With[{
      a ={0,0,0},b1={-1,.3,1},b2 ={-1,-.04,.4},c={.5,.7,1},d={.5,-.7,1},
      e ={0,.2,2}
      },
    Polygon/@{{a,b2,b1,c},{a,b2,d},{a,c,d},{e,b1,c},{e,b1,b2,d},{e,c,d}}
    ]

Hexahedron[{3,3,3,4,4,5}]:= With[{
      a ={0,0,0},b1={-1,.3,1},b2 ={-1,-.04,.4},c1={.5,.7,1},c2={1,.2667,0},
      d={.5,-.7,1},e ={0,.2,2}
      },
    Polygon/@{{a,b2,b1,c1,c2},{a,b2,d},{a,c2,d},{e,b1,c1},{e,b1,b2,d},{e,c1,
          c2,d}}
    ]

Hexahedron[{3,3,4,4,4,4}]:= With[{
      a ={0,0,0},b1={-1,.3,1},b2 ={-.571429,-.228571,.571429},c1={.5,.7,1},
      c2 = {0,.933333,.0},d={.5,-.7,1},e ={0,.2,2}
      },
    Polygon/@{{a,b2,b1,c2},{a,b2,d},{a,c2,c1,d},{e,b1,c2,c1},{e,b1,b2,d},{e,
          c1,d}}
    ]

Hexahedron[{3,3,4,4,5,5}]:= With[{
      a ={0,0,0},b1={-1,.3,1},b2 ={-1,-.04,.4},c1={.65,.57,.7},c2={.5,.7,1},
      d1={.5,-.7,1},d2={.65,-.55,.7},e ={0,.2,2}
      },
    Polygon/@{{a,b2,b1,c2,c1},{a,b2,d1,d2},{a,c1,d2},{e,b1,c2},{e,b1,b2,
          d1},{e,c2,c1,d2,d1}}
    ]

Hexahedron[{4,4,4,4,4,4}]:=With[{
      a={0,0,0},b={0,0,1},c={0,1,0},d={1,0,0},e={0,1,1},f={1,0,1},g={1,1,0},
      h={1,1,1}
      },
    Polygon/@{{a,b,e,c},{a,b,f,d},{a,c,g,d},{h,e,c,g},{h,e,b,f},{h,f,d,g}}
    ]

Hexahedron[n_Integer]:=
  Orient[Hexahedron[{{3,3,3,3,3,3},{3,3,3,3,3,5},{3,3,3,3,4,4},{3,3,3,4,4,5},{3,3,4,
            4,4,4},{3,3,4,4,5,5},{4,4,4,4,4,4}}[[n]]]]/; 1<=n<=7

h[l1_List,l2_List]:=g[l2,l1]

Jack:=Cuboid/@{{-1.5,-.5,-.5},{-.5,-.5,-.5},{.5,-.5,-.5},{-.5,-1.5,-.5},
	{-.5,.5,-.5},{-.5,-.5,-1.5},{-.5,-.5,.5}}

(*
JessensOrthogonalPolyhedron:=oi[2]
*)

PolyhedronName[JessensOrthogonalPolyhedron]:="Jessen's orthogonal polyhedron"
PolyhedronFaces[JessensOrthogonalPolyhedron]:=
{{6,1,3},{6,1,12},{6,12,5},{6,3,11},{6,5,11},{12,1,10},{12,10,2},{5,12,2},{3,
    11,9},{1,3,8},{1,10,8},{10,2,7},{10,8,7},{3,9,8},{9,8,7},{5,2,4},{2,7,
    4},{7,9,4},{11,9,4},{11,4,5}}
PolyhedronVertices[JessensOrthogonalPolyhedron]:=
{{0, -GoldenRatio^(-1), 1 - GoldenRatio^(-1)}, {0, -GoldenRatio^(-1), 
  -1 + GoldenRatio^(-1)}, {0, GoldenRatio^(-1), 1 - GoldenRatio^(-1)}, 
 {0, GoldenRatio^(-1), -1 + GoldenRatio^(-1)}, {1 - GoldenRatio^(-1), 0, -GoldenRatio^(-1)}, 
 {1 - GoldenRatio^(-1), 0, GoldenRatio^(-1)}, {-1 + GoldenRatio^(-1), 0, -GoldenRatio^(-1)}, 
 {-1 + GoldenRatio^(-1), 0, GoldenRatio^(-1)}, {-GoldenRatio^(-1), 1 - GoldenRatio^(-1), 0}, 
 {-GoldenRatio^(-1), -1 + GoldenRatio^(-1), 0}, {GoldenRatio^(-1), 1 - GoldenRatio^(-1), 0}, 
 {GoldenRatio^(-1), -1 + GoldenRatio^(-1), 0}}

line[l_List]:=Line[Join[l,{l[[1]]}]]

lline[l_List]:=Module[{i,j},
	Table[cline[Table[rotz[j Pi/2].l[[i]],{i,Length[l]}]],{j,0,3}]
]

(* Norm *)

norm[a_List,b_List]:=norm[a-b]

norm[a_List]:=Sqrt[normsq[a]]

normsq[a_List,b_List]:=normsq[a-b]

normsq[a_List]:=a.a

OctahedronIcosahedron[1]:=oi[1]

OctahedronIcosahedron[2]:=Module[{v=OctahedronIcosahedronPoints[2]},
		Polygon/@{v[[{1,3,6}]],v[[{1,2,4}]],v[[{1,4,6}]],
				v[[{2,1,9}]],v[[{4,5,6}]],v[[{2,4,8}]],v[[{1,3,9}]],
				v[[{4,5,8}]],v[[{9,2,7}]],v[[{8,2,7}]],v[[{9,11,7}]],
				v[[{7,8,10}]],v[[{7,10,11}]],v[[{3,9,11}]],v[[{3,11,12}]],
				v[[{10,11,12}]],v[[{12,3,6}]],v[[{12,6,5}]],
				v[[{5,10,12}]],v[[{5,10,8}]]}
]

OctahedronIcosahedronPoints[n_]:=Module[
	{
		xp={1,0,0},xm={-1,0,0},
		yp={0,1,0},ym={0,-1,0},
		zp={0,0,1},zm={0,0,-1},
		v
	},
	v[1]={
		g[zp,xp],g[ym,zp],g[yp,zp],
		g[xp,ym],g[zm,xp],g[xp,yp],
		g[xm,ym],g[ym,zm],g[zp,xm],
		g[zm,xm],g[xm,yp],g[yp,zm]
	};
	v[2]={
		h[zp,xp],h[ym,zp],h[yp,zp],
		h[xp,ym],h[zm,xp],h[xp,yp],
		h[xm,ym],h[ym,zm],h[zp,xm],
		h[zm,xm],h[xm,yp],h[yp,zm]
	};
	v[n]
]

OctahedronVertices:={PointSize[.03],
	Point/@{{0,0,1},{0,0,-1},{1,0,0},{-1,0,0},{0,1,0},{0,-1,0}}
}

(* Octahemioctahedron *)

PolyhedronName[Octahemioctahedron]:="octahemioctahedron"
NetFaces[Octahemioctahedron]:={{7,9,12},{1,2,4},{2,6,4},{4,6,9},{6,11,9},{4,9,7},{13,8,10},{8,5,10},{10,5,7},{5,3,7},{10,7,12},{16,19,14},{19,17,14},{14,17,12},{17,15,12},{14,12,9},{22,27,25},{21,26,24},{26,29,24},{24,29,27},{29,31,27},{24,27,22},{18,15,20},{15,17,20},{20,17,22},{17,19,22},{20,22,25},{33,32,30},{32,28,30},{30,28,25},{28,23,25},{30,25,27}}
NetVertices[Octahemioctahedron]:={{-2,-(1/Sqrt[3])},{-3/2,-5/(2Sqrt[3])},{-3/2,1/(2Sqrt[3])},{-1,-(1/Sqrt[3])},{-1,2/Sqrt[3]},{-1/2,-5/(2Sqrt[3])},{-1/2,1/(2Sqrt[3])},{-1/2,7/(2Sqrt[3])},{0,-(1/Sqrt[3])},{0,2/Sqrt[3]},{1/2,-5/(2Sqrt[3])},{1/2,1/(2Sqrt[3])},{1/2,7/(2Sqrt[3])},{1,-(1/Sqrt[3])},{1,2/Sqrt[3]},{3/2,-5/(2Sqrt[3])},{3/2,1/(2Sqrt[3])},{3/2,7/(2Sqrt[3])},{2,-(1/Sqrt[3])},{2,2/Sqrt[3]},{5/2,-5/(2Sqrt[3])},{5/2,1/(2Sqrt[3])},{5/2,7/(2Sqrt[3])},{3,-(1/Sqrt[3])},{3,2/Sqrt[3]},{7/2,-5/(2Sqrt[3])},{7/2,1/(2Sqrt[3])},{7/2,7/(2Sqrt[3])},{4,-(1/Sqrt[3])},{4,2/Sqrt[3]},{9/2,1/(2Sqrt[3])},{9/2,7/(2Sqrt[3])},{5,2/Sqrt[3]}}
PolyhedronFaces[Octahemioctahedron]:={{6,2,9},{6,3,7},{3,1,7},{7,1,2},{1,4,2},{7,2,6},{9,13,7},{13,10,7},{7,10,6},{10,3,6},{7,6,9},{2,4,7},{4,11,7},{7,11,9},{11,13,9},{7,9,2},{8,5,12},{8,4,7},{4,1,7},{7,1,5},{1,3,5},{7,5,8},{12,13,7},{13,11,7},{7,11,8},{11,4,8},{7,8,12},{5,3,7},{3,10,7},{7,10,12},{10,13,12},{7,12,5}}
PolyhedronVertices[Octahemioctahedron]:={{-1.8124523700696942,3.7178418226141683,-.68831620013553378},{-1.5331504343927934,2.7602992293855104,-.75974876186145617},{-1.3879997967813838,3.7742334241201059,.21537622558519083},{-1.2759995935655044,3.4107899190515568,-1.474406237659885},{-1.1308489559560146,4.424724113788677,-.49928125021377046},{-1.1086978611039091,2.8166908308896541,.1439436638619199},{-.85154702027722935,3.4671815205576127,-.57071381193861869},{-.59439617944975366,4.1176722102251516,-1.2853712877383561},{-.57224508459965393,2.50963892732693,-.64214637366434788},{-.42709444698891891,3.5235731220635502,.33297861378210607},{-.31509424377152633,3.1601296169942332,-1.3568038494646975},{-.16994360616160805,4.1740638117297629,-.38167886201616724},{.10935832951571622,3.2165212185008803,-.45311142374191835}}

oi[n_]:=Module[{v=OctahedronIcosahedronPoints[n]},
		Polygon/@{v[[{1,2,3}]],v[[{1,2,4}]],v[[{1,4,5}]],v[[{1,3,6}]],
				v[[{1,5,6}]],v[[{4,2,7}]],v[[{4,7,8}]],v[[{5,4,8}]],
				v[[{3,6,11}]],v[[{2,3,9}]],v[[{2,7,9}]],v[[{7,8,10}]],
				v[[{7,9,10}]],v[[{3,11,9}]],v[[{11,9,10}]],v[[{5,8,12}]],
				v[[{8,10,12}]],v[[{10,11,12}]],v[[{6,11,12}]],v[[{6,12,5}]]}
]

p5[n_]:=Mod[n-1,5]+1

polygon[{a_,b_,c_,d_}]:=Polygon[{a,c,b,d}];

feq[x_,y_,eps_:10^-10]:=Plus@@Abs[x-y]<eps

rotmm::Singular="Singular value ArcTan[0,0] encounted: (`1`,`2`,`3`)"

rotmm[{x_, y_, z_}] := Module[{a, b,eps=.001},
	If[Sqrt[N[y^2+z^2]]<eps && Abs[N[x]]<eps,
		Message[rotmm::Singular,x,y,z],
		{a, b} = {If[Abs[N[y]]<eps && Abs[N[z]]<eps,0,ArcTan[z, y]], ArcTan[Sqrt[y^2 + z^2], x]};
		    {{Cos[b],0,-Sin[b]},{0,1,0},{Sin[b],0,Cos[b]}}.
    		{{1,0,0},{0,Cos[a],-Sin[a]},{0,Sin[a],Cos[a]}}
	]
]

prec[a_,b_]:=Sort[{a,b}];

(*
ppolygon[l_List]:=Module[{i,j},
	Table[Polygon[Table[rotz[j Pi/2].l[[i]],{i,Length[l]}]],{j,0,3}]
]

ppolygon2[l_List]:=Module[{i,j},
	Table[Polygon[Table[rotz[j Pi/2].rotx[k Pi/2].l[[i]],{i,Length[l]}]],{k,0,2,2},
    {j,0,3}]
]

RhombicDodecahedronConstruction:=Graphics3D[{
	RhombicDodecahedron[2][[1]],
	{PointSize[.04],Point/@{{1,0,0},{-1,0,0},{0,1,0},{0,-1,0},{0,0,1},{0,0,-1}}},
	frame[Jack]
}]
*)

polygon[l_List]:=Module[{i},
	{Polygon[l],Polygon[Table[{l[[i,1]],l[[i,2]],-l[[i,3]]},{i,3}]]}
]

RhombicDodecahedronStellation[1]:=Module[
	{
	v=Join[NetlistSolidVertices[10],
	{{0,0,Sqrt[2]},{-1,-1,0},{1,-1,0},{1,1,0},
	{0,-1,1/Sqrt[2]},{1,0,1/Sqrt[2]},
	{-1,1,0},{0,1,1/Sqrt[2]},{-1,0,1/Sqrt[2]}}//N]
	},
	Graphics3D[polygon/@{
		v[[{10,14,17}]],v[[{17,14,8}]],v[[{13,17,7}]],
		v[[{17,7,15}]],v[[{8,13,17}]],v[[{10,15,17}]],		
		v[[{7,13,18}]],v[[{6,16,18}]],v[[{9,18,16}]],
		v[[{9,18,15}]],v[[{6,13,18}]],v[[{7,15,18}]],
		v[[{20,13,6}]],v[[{20,5,13}]],v[[{20,19,12}]],
		v[[{20,12,16}]],v[[{20,6,16}]],v[[{20,5,19}]],	
		v[[{21,5,13}]],v[[{21,8,13}]],v[[{21,11,14}]],
		v[[{11,21,19}]],v[[{21,5,19}]],v[[{21,8,14}]]
	}]
]

RhombicDodecahedronStellation[2]:=Module[
	{
	v=NetlistSolidVertices[12],
	c={{0,-1,Sqrt[3]/2},{0,-1,-Sqrt[3]/2}},
	d={{0,0,Sqrt[3]},{0,0,-Sqrt[3]},{-Sqrt[3/2],-Sqrt[3/2],0}},
	l
	},
	l={LineLineIntersection[v[[{2,6}]],v[[{21,9}]]],
		LineLineIntersection[v[[{1,5}]],v[[{17,12}]]],
		LineLineIntersection[v[[{1,5}]],v[[{15,19}]]],
		LineLineIntersection[v[[{2,6}]],v[[{11,23}]]],
		LineLineIntersection[v[[{10,24}]],v[[{14,20}]]]};
	Graphics3D[{
		lline[{c[[1]],l[[1]],v[[2]],v[[2]]+c[[1]]-l[[1]],v[[1]],l[[2]]}],
		lline[{c[[1]],l[[2]],v[[17]],v[[17]]+c[[1]]-l[[2]],v[[20]],l[[5]]}],
		lline[{c[[1]],l[[5]],v[[24]],v[[24]]+c[[1]]-l[[5]],v[[21]],l[[1]]}],
	
		lline[{c[[2]],l[[5]],v[[24]],v[[23]]+c[[2]]-l[[4]],v[[23]],l[[4]]}],
		lline[{c[[2]],l[[5]],v[[20]],v[[20]]+c[[2]]-l[[5]],v[[19]],l[[3]]}],
		lline[{c[[2]],l[[3]],v[[5]],v[[6]]+c[[2]]-l[[4]],v[[6]],l[[4]]}],

		ppolygon[{v[[1]],{0,-1,2.598076},d[[1]],rotz[-Pi/2].{0,-1,2.598076}}],
		ppolygon[{v[[5]],{0,-1,-2.598076},d[[2]],rotz[-Pi/2].{0,-1,-2.598076}}],

		ppolygon2[{v[[24]],v[[23]]+c[[2]]-l[[4]],d[[3]],v[[24]]+c[[1]]-l[[5]]}],
		ppolygon2[{v[[21]],v[[24]]+c[[1]]-l[[5]],d[[3]],rotz[Pi/2].(v[[17]]+c[[1]]-l[[2]])}],

		{EdgeForm[],
		ppolygon[{v[[2]],v[[2]]+c[[1]]-l[[1]],c[[1]],l[[1]]}],
		ppolygon[{v[[2]]+c[[1]]-l[[1]],v[[1]],l[[2]],c[[1]]}],
		ppolygon[{v[[24]],v[[24]]+c[[1]]-l[[5]],c[[1]],l[[5]]}],
		ppolygon[{v[[21]],l[[1]],c[[1]],v[[24]]+c[[1]]-l[[5]]}],
		ppolygon[{v[[17]],v[[17]]+c[[1]]-l[[2]],c[[1]],l[[2]]}],
		ppolygon[{v[[20]],l[[5]],c[[1]],v[[17]]+c[[1]]-l[[2]]}],

		ppolygon[{v[[23]],v[[23]]+c[[2]]-l[[4]],c[[2]],l[[4]]}],
		ppolygon[{v[[24]],v[[23]]+c[[2]]-l[[4]],c[[2]],l[[5]]}],
		ppolygon[{v[[20]],v[[20]]+c[[2]]-l[[5]],c[[2]],l[[5]]}],
		ppolygon[{v[[19]],v[[20]]+c[[2]]-l[[5]],c[[2]],l[[3]]}],
		ppolygon[{v[[6]],v[[6]]+c[[2]]-l[[4]],c[[2]],l[[4]]}],
		ppolygon[{v[[5]],v[[6]]+c[[2]]-l[[4]],c[[2]],l[[3]]}]
		}
	}]
]

(* Rhombic Enneacontahedron *)

PolyhedronName[RhombicEnneacontahedron]:="rhombic enneacontahedron"
PolyhedronFaces[RhombicEnneacontahedron]:=
{{81,82,45,46},{48,47,88,87},{85,86,47,48},{46,45,84,83},{47,88,44,86},{39,83,
    46,81},{61,62,82,81},{87,88,68,67},{62,77,45,82},{48,87,67,80},{60,73,65,
    79},{64,78,51,72},{85,86,66,65},{63,64,84,83},{70,51,77,62},{80,67,75,
    60},{79,65,85,48},{84,45,78,64},{51,78,45,77},{48,80,60,79},{32,31,62,
    61},{67,68,37,38},{58,28,2,9},{1,8,55,25},{49,69,54,24},{59,29,50,76},{88,
    68,37,92},{32,89,81,61},{17,5,30,43},{23,40,12,4},{65,66,35,36},{34,33,64,
    63},{74,50,28,58},{25,55,71,49},{24,54,7,1},{10,2,29,59},{6,14,41,26},{42,
    27,3,15},{63,83,90,34},{91,35,66,86},{50,29,2,28},{1,25,49,24},{13,14,33,
    34},{36,35,16,15},{57,30,8,1},{9,2,52,23},{72,51,53,26},{56,27,73,60},{65,
    73,27,42},{26,41,64,72},{4,12,21,58},{20,55,5,17},{30,5,55,8},{58,9,23,
    4},{33,64,41,14},{42,15,36,65},{38,37,18,17},{11,12,31,32},{60,75,30,
    57},{23,52,51,70},{26,53,2,10},{1,7,27,56},{15,3,54,19},{59,22,14,6},{70,
    62,40,23},{43,30,75,67},{67,38,17,43},{12,40,62,31},{6,26,10,59},{7,54,3,
    27},{56,60,57,1},{52,2,53,51},{17,18,14,13},{15,16,12,11},{49,71,83,
    39},{86,44,50,74},{76,50,44,88},{39,81,69,49},{19,54,89,32},{92,37,22,
    59},{58,21,35,91},{34,90,55,20},{54,69,81,89},{88,92,59,76},{74,58,91,
    86},{90,83,71,55},{20,17,13,34},{16,35,21,12},{14,22,37,18},{32,11,15,19}}
PolyhedronVertices[RhombicEnneacontahedron]:=
{{0, 0, Sqrt[45/2 + (15*Sqrt[5])/2]}, {0, 0, -Sqrt[81/2 + (27*Sqrt[5])/2]}, 
 {0, -3 - Sqrt[5], 2*Sqrt[3]}, {0, -3 - Sqrt[5], -Sqrt[6*(3 + Sqrt[5])]}, 
 {0, 3 + Sqrt[5], 2*Sqrt[3]}, {0, 3 + Sqrt[5], -Sqrt[6*(3 + Sqrt[5])]}, 
 {-Sqrt[(3 - Sqrt[5])/6], (-3 - Sqrt[5])/2, Sqrt[(2*(27 + 7*Sqrt[5]))/3]}, 
 {-Sqrt[(3 - Sqrt[5])/6], (3 + Sqrt[5])/2, Sqrt[(2*(27 + 7*Sqrt[5]))/3]}, 
 {Sqrt[(3 - Sqrt[5])/6], (-3 - Sqrt[5])/2, -Sqrt[32 + (32*Sqrt[5])/3]}, 
 {Sqrt[(3 - Sqrt[5])/6], (3 + Sqrt[5])/2, -Sqrt[32 + (32*Sqrt[5])/3]}, 
 {-Sqrt[1/2 + Sqrt[5]/6], (-7 - 3*Sqrt[5])/2, -Sqrt[(2*(3 - Sqrt[5]))/3]}, 
 {-Sqrt[1/2 + Sqrt[5]/6], (-7 - 3*Sqrt[5])/2, -Sqrt[21/2 + (5*Sqrt[5])/6]}, 
 {-Sqrt[1/2 + Sqrt[5]/6], (7 + 3*Sqrt[5])/2, -Sqrt[(2*(3 - Sqrt[5]))/3]}, 
 {-Sqrt[1/2 + Sqrt[5]/6], (7 + 3*Sqrt[5])/2, -Sqrt[21/2 + (5*Sqrt[5])/6]}, 
 {Sqrt[1/2 + Sqrt[5]/6], (-7 - 3*Sqrt[5])/2, Sqrt[(27 - 7*Sqrt[5])/6]}, 
 {Sqrt[1/2 + Sqrt[5]/6], (-7 - 3*Sqrt[5])/2, -2*Sqrt[(2*(3 - Sqrt[5]))/3]}, 
 {Sqrt[1/2 + Sqrt[5]/6], (7 + 3*Sqrt[5])/2, Sqrt[(27 - 7*Sqrt[5])/6]}, 
 {Sqrt[1/2 + Sqrt[5]/6], (7 + 3*Sqrt[5])/2, -2*Sqrt[(2*(3 - Sqrt[5]))/3]}, 
 {-Sqrt[7/6 + Sqrt[5]/2], (-5 - 3*Sqrt[5])/2, 4/Sqrt[3]}, 
 {-Sqrt[7/6 + Sqrt[5]/2], (5 + 3*Sqrt[5])/2, 4/Sqrt[3]}, 
 {Sqrt[7/6 + Sqrt[5]/2], (-5 - 3*Sqrt[5])/2, -Sqrt[(2*(23 + 3*Sqrt[5]))/3]}, 
 {Sqrt[7/6 + Sqrt[5]/2], (5 + 3*Sqrt[5])/2, -Sqrt[(2*(23 + 3*Sqrt[5]))/3]}, 
 {-Sqrt[5/2 + (5*Sqrt[5])/6], (-5 - Sqrt[5])/2, -Sqrt[49/2 + (49*Sqrt[5])/6]}, 
 {-Sqrt[5/2 + (5*Sqrt[5])/6], (-1 - Sqrt[5])/2, Sqrt[(2*(27 + 7*Sqrt[5]))/3]}, 
 {-Sqrt[5/2 + (5*Sqrt[5])/6], (1 + Sqrt[5])/2, Sqrt[(2*(27 + 7*Sqrt[5]))/3]}, 
 {-Sqrt[5/2 + (5*Sqrt[5])/6], (5 + Sqrt[5])/2, -Sqrt[49/2 + (49*Sqrt[5])/6]}, 
 {Sqrt[5/2 + (5*Sqrt[5])/6], (-5 - Sqrt[5])/2, Sqrt[29/2 + (13*Sqrt[5])/6]}, 
 {Sqrt[5/2 + (5*Sqrt[5])/6], (-1 - Sqrt[5])/2, -Sqrt[32 + (32*Sqrt[5])/3]}, 
 {Sqrt[5/2 + (5*Sqrt[5])/6], (1 + Sqrt[5])/2, -Sqrt[32 + (32*Sqrt[5])/3]}, 
 {Sqrt[5/2 + (5*Sqrt[5])/6], (5 + Sqrt[5])/2, Sqrt[29/2 + (13*Sqrt[5])/6]}, 
 {-Sqrt[35/6 + (5*Sqrt[5])/2], (-5 - 3*Sqrt[5])/2, -2*Sqrt[5/3]}, 
 {-Sqrt[35/6 + (5*Sqrt[5])/2], (-5 - 3*Sqrt[5])/2, Sqrt[(7 - 3*Sqrt[5])/6]}, 
 {-Sqrt[35/6 + (5*Sqrt[5])/2], (5 + 3*Sqrt[5])/2, -2*Sqrt[5/3]}, 
 {-Sqrt[35/6 + (5*Sqrt[5])/2], (5 + 3*Sqrt[5])/2, Sqrt[(7 - 3*Sqrt[5])/6]}, 
 {Sqrt[35/6 + (5*Sqrt[5])/2], (-5 - 3*Sqrt[5])/2, -Sqrt[(67 - 15*Sqrt[5])/6]}, 
 {Sqrt[35/6 + (5*Sqrt[5])/2], (-5 - 3*Sqrt[5])/2, Sqrt[(2*(7 - 3*Sqrt[5]))/3]}, 
 {Sqrt[35/6 + (5*Sqrt[5])/2], (5 + 3*Sqrt[5])/2, -Sqrt[(67 - 15*Sqrt[5])/6]}, 
 {Sqrt[35/6 + (5*Sqrt[5])/2], (5 + 3*Sqrt[5])/2, Sqrt[(2*(7 - 3*Sqrt[5]))/3]}, 
 {-2*Sqrt[(2*(7 + 3*Sqrt[5]))/3], 0, 4/Sqrt[3]}, {-Sqrt[(2*(7 + 3*Sqrt[5]))/3], 
  -3 - Sqrt[5], -Sqrt[(2*(23 + 3*Sqrt[5]))/3]}, {-Sqrt[(2*(7 + 3*Sqrt[5]))/3], 
  3 + Sqrt[5], -Sqrt[(2*(23 + 3*Sqrt[5]))/3]}, {Sqrt[(2*(7 + 3*Sqrt[5]))/3], 
  -3 - Sqrt[5], 4/Sqrt[3]}, {Sqrt[(2*(7 + 3*Sqrt[5]))/3], 3 + Sqrt[5], 4/Sqrt[3]}, 
 {2*Sqrt[(2*(7 + 3*Sqrt[5]))/3], 0, -Sqrt[(2*(23 + 3*Sqrt[5]))/3]}, 
 {-Sqrt[(10*(7 + 3*Sqrt[5]))/3], 0, -Sqrt[(67 - 15*Sqrt[5])/6]}, 
 {-Sqrt[(10*(7 + 3*Sqrt[5]))/3], 0, Sqrt[(2*(7 - 3*Sqrt[5]))/3]}, 
 {Sqrt[(10*(7 + 3*Sqrt[5]))/3], 0, -2*Sqrt[5/3]}, {Sqrt[(10*(7 + 3*Sqrt[5]))/3], 0, 
  Sqrt[(7 - 3*Sqrt[5])/6]}, {-Sqrt[10 + (10*Sqrt[5])/3], 0, 
  Sqrt[29/2 + (13*Sqrt[5])/6]}, {Sqrt[10 + (10*Sqrt[5])/3], 0, 
  -Sqrt[49/2 + (49*Sqrt[5])/6]}, {-2*Sqrt[(9 + 4*Sqrt[5])/3], 0, 
  -Sqrt[49/2 + (49*Sqrt[5])/6]}, {-Sqrt[(9 + 4*Sqrt[5])/3], -1, 
  -Sqrt[32 + (32*Sqrt[5])/3]}, {-Sqrt[(9 + 4*Sqrt[5])/3], 1, 
  -Sqrt[32 + (32*Sqrt[5])/3]}, {-Sqrt[(9 + 4*Sqrt[5])/3], -2 - Sqrt[5], 
  Sqrt[29/2 + (13*Sqrt[5])/6]}, {-Sqrt[(9 + 4*Sqrt[5])/3], 2 + Sqrt[5], 
  Sqrt[29/2 + (13*Sqrt[5])/6]}, {Sqrt[(9 + 4*Sqrt[5])/3], -1, 
  Sqrt[(2*(27 + 7*Sqrt[5]))/3]}, {Sqrt[(9 + 4*Sqrt[5])/3], 1, 
  Sqrt[(2*(27 + 7*Sqrt[5]))/3]}, {Sqrt[(9 + 4*Sqrt[5])/3], -2 - Sqrt[5], 
  -Sqrt[49/2 + (49*Sqrt[5])/6]}, {Sqrt[(9 + 4*Sqrt[5])/3], 2 + Sqrt[5], 
  -Sqrt[49/2 + (49*Sqrt[5])/6]}, {2*Sqrt[(9 + 4*Sqrt[5])/3], 0, 
  Sqrt[29/2 + (13*Sqrt[5])/6]}, {-Sqrt[(5*(9 + 4*Sqrt[5]))/3], -2 - Sqrt[5], 
  -Sqrt[(2*(3 - Sqrt[5]))/3]}, {-Sqrt[(5*(9 + 4*Sqrt[5]))/3], -2 - Sqrt[5], 
  -Sqrt[21/2 + (5*Sqrt[5])/6]}, {-Sqrt[(5*(9 + 4*Sqrt[5]))/3], 2 + Sqrt[5], 
  -Sqrt[(2*(3 - Sqrt[5]))/3]}, {-Sqrt[(5*(9 + 4*Sqrt[5]))/3], 2 + Sqrt[5], 
  -Sqrt[21/2 + (5*Sqrt[5])/6]}, {Sqrt[(5*(9 + 4*Sqrt[5]))/3], -2 - Sqrt[5], 
  Sqrt[(27 - 7*Sqrt[5])/6]}, {Sqrt[(5*(9 + 4*Sqrt[5]))/3], -2 - Sqrt[5], 
  -2*Sqrt[(2*(3 - Sqrt[5]))/3]}, {Sqrt[(5*(9 + 4*Sqrt[5]))/3], 2 + Sqrt[5], 
  Sqrt[(27 - 7*Sqrt[5])/6]}, {Sqrt[(5*(9 + 4*Sqrt[5]))/3], 2 + Sqrt[5], 
  -2*Sqrt[(2*(3 - Sqrt[5]))/3]}, {-Sqrt[21/2 + (9*Sqrt[5])/2], (-3 - Sqrt[5])/2, 
  2*Sqrt[3]}, {-Sqrt[21/2 + (9*Sqrt[5])/2], (-3 - Sqrt[5])/2, -Sqrt[6*(3 + Sqrt[5])]}, 
 {-Sqrt[21/2 + (9*Sqrt[5])/2], (3 + Sqrt[5])/2, 2*Sqrt[3]}, 
 {-Sqrt[21/2 + (9*Sqrt[5])/2], (3 + Sqrt[5])/2, -Sqrt[6*(3 + Sqrt[5])]}, 
 {Sqrt[21/2 + (9*Sqrt[5])/2], (-3 - Sqrt[5])/2, 2*Sqrt[3]}, 
 {Sqrt[21/2 + (9*Sqrt[5])/2], (-3 - Sqrt[5])/2, -Sqrt[6*(3 + Sqrt[5])]}, 
 {Sqrt[21/2 + (9*Sqrt[5])/2], (3 + Sqrt[5])/2, 2*Sqrt[3]}, 
 {Sqrt[21/2 + (9*Sqrt[5])/2], (3 + Sqrt[5])/2, -Sqrt[6*(3 + Sqrt[5])]}, 
 {-Sqrt[103/6 + (15*Sqrt[5])/2], (-1 - Sqrt[5])/2, -Sqrt[(2*(23 + 3*Sqrt[5]))/3]}, 
 {-Sqrt[103/6 + (15*Sqrt[5])/2], (1 + Sqrt[5])/2, -Sqrt[(2*(23 + 3*Sqrt[5]))/3]}, 
 {Sqrt[103/6 + (15*Sqrt[5])/2], (-1 - Sqrt[5])/2, 4/Sqrt[3]}, 
 {Sqrt[103/6 + (15*Sqrt[5])/2], (1 + Sqrt[5])/2, 4/Sqrt[3]}, 
 {-Sqrt[41/2 + (55*Sqrt[5])/6], (-3 - Sqrt[5])/2, Sqrt[(27 - 7*Sqrt[5])/6]}, 
 {-Sqrt[41/2 + (55*Sqrt[5])/6], (-3 - Sqrt[5])/2, -2*Sqrt[(2*(3 - Sqrt[5]))/3]}, 
 {-Sqrt[41/2 + (55*Sqrt[5])/6], (3 + Sqrt[5])/2, Sqrt[(27 - 7*Sqrt[5])/6]}, 
 {-Sqrt[41/2 + (55*Sqrt[5])/6], (3 + Sqrt[5])/2, -2*Sqrt[(2*(3 - Sqrt[5]))/3]}, 
 {Sqrt[41/2 + (55*Sqrt[5])/6], (-3 - Sqrt[5])/2, -Sqrt[(2*(3 - Sqrt[5]))/3]}, 
 {Sqrt[41/2 + (55*Sqrt[5])/6], (-3 - Sqrt[5])/2, -Sqrt[21/2 + (5*Sqrt[5])/6]}, 
 {Sqrt[41/2 + (55*Sqrt[5])/6], (3 + Sqrt[5])/2, -Sqrt[(2*(3 - Sqrt[5]))/3]}, 
 {Sqrt[41/2 + (55*Sqrt[5])/6], (3 + Sqrt[5])/2, -Sqrt[21/2 + (5*Sqrt[5])/6]}, 
 {-Sqrt[(29 + 12*Sqrt[5])/3], -2 - Sqrt[5], 4/Sqrt[3]}, 
 {-Sqrt[(29 + 12*Sqrt[5])/3], 2 + Sqrt[5], 4/Sqrt[3]}, 
 {Sqrt[(29 + 12*Sqrt[5])/3], -2 - Sqrt[5], -Sqrt[(2*(23 + 3*Sqrt[5]))/3]}, 
 {Sqrt[(29 + 12*Sqrt[5])/3], 2 + Sqrt[5], -Sqrt[(2*(23 + 3*Sqrt[5]))/3]}}/Sqrt[9/2+(3Sqrt[5])/2]

(* Rhombic Icosahedron *)

PolyhedronName[RhombicIcosahedron]:="rhombic icosahedron"
PolyhedronFaces[RhombicIcosahedron]:=
{{19,5,7,9},{20,10,8,6},{7,11,21,23},{8,24,21,12},{20,16,19,22},{2,12,21,
    11},{5,2,11,7},{6,8,12,2},{19,16,2,5},{20,6,2,16},{7,17,3,9},{14,10,20,
    22},{21,18,15,17},{4,18,8,10},{19,9,13,22},{15,18,4,1},{17,15,1,3},{1,4,
    10,14},{3,1,13,9},{13,1,14,22}}
PolyhedronVertices[RhombicIcosahedron]:=
{{0, 0, -Sqrt[125/128 + (25*Sqrt[5])/128]}, {0, 0, Sqrt[125/128 + (25*Sqrt[5])/128]}, 
 {-Sqrt[(5 - Sqrt[5])/2]/4, (-5 - Sqrt[5])/8, -Sqrt[45/128 + (9*Sqrt[5])/128]}, 
 {-Sqrt[(5 - Sqrt[5])/2]/4, (5 + Sqrt[5])/8, -Sqrt[45/128 + (9*Sqrt[5])/128]}, 
 {Sqrt[(5 - Sqrt[5])/2]/4, (-5 - Sqrt[5])/8, Sqrt[45/128 + (9*Sqrt[5])/128]}, 
 {Sqrt[(5 - Sqrt[5])/2]/4, (5 + Sqrt[5])/8, Sqrt[45/128 + (9*Sqrt[5])/128]}, 
 {-Sqrt[5/32 + Sqrt[5]/32], (-5 - 3*Sqrt[5])/8, Sqrt[5/128 + Sqrt[5]/128]}, 
 {-Sqrt[5/32 + Sqrt[5]/32], (5 + 3*Sqrt[5])/8, Sqrt[5/128 + Sqrt[5]/128]}, 
 {Sqrt[5/32 + Sqrt[5]/32], (-5 - 3*Sqrt[5])/8, -Sqrt[5/128 + Sqrt[5]/128]}, 
 {Sqrt[5/32 + Sqrt[5]/32], (5 + 3*Sqrt[5])/8, -Sqrt[5/128 + Sqrt[5]/128]}, 
 {-Sqrt[5/16 + Sqrt[5]/8], -Sqrt[5]/4, Sqrt[45/128 + (9*Sqrt[5])/128]}, 
 {-Sqrt[5/16 + Sqrt[5]/8], Sqrt[5]/4, Sqrt[45/128 + (9*Sqrt[5])/128]}, 
 {Sqrt[5/16 + Sqrt[5]/8], -Sqrt[5]/4, -Sqrt[45/128 + (9*Sqrt[5])/128]}, 
 {Sqrt[5/16 + Sqrt[5]/8], Sqrt[5]/4, -Sqrt[45/128 + (9*Sqrt[5])/128]}, 
 {-Sqrt[5/8 + Sqrt[5]/8], 0, -Sqrt[45/128 + (9*Sqrt[5])/128]}, 
 {Sqrt[5/8 + Sqrt[5]/8], 0, Sqrt[45/128 + (9*Sqrt[5])/128]}, 
 {-Sqrt[25/32 + (11*Sqrt[5])/32], (-5 - Sqrt[5])/8, -Sqrt[5/128 + Sqrt[5]/128]}, 
 {-Sqrt[25/32 + (11*Sqrt[5])/32], (5 + Sqrt[5])/8, -Sqrt[5/128 + Sqrt[5]/128]}, 
 {Sqrt[25/32 + (11*Sqrt[5])/32], (-5 - Sqrt[5])/8, Sqrt[5/128 + Sqrt[5]/128]}, 
 {Sqrt[25/32 + (11*Sqrt[5])/32], (5 + Sqrt[5])/8, Sqrt[5/128 + Sqrt[5]/128]}, 
 {-Sqrt[5/4 + Sqrt[5]/2], 0, Sqrt[5/128 + Sqrt[5]/128]}, 
 {Sqrt[5/4 + Sqrt[5]/2], 0, -Sqrt[5/128 + Sqrt[5]/128]}, 
 {Root[5 - 400*#1^2 + 256*#1^4 & , 1, 0], (-5 - Sqrt[5])/8, -Sqrt[5/128 + Sqrt[5]/128]}, 
 {Root[5 - 400*#1^2 + 256*#1^4 & , 1, 0], (5 + Sqrt[5])/8, -Sqrt[5/128 + Sqrt[5]/128]}}

ribbon[n_,rot_:0,z_:0]:=Module[{c,i,top,bot,R=Csc[Pi/n]/2},
    c=Table[R{Cos[#],Sin[#]}&[2Pi(i+rot/2)/n],{i,n}];
    top=Append[#,z+1/2]&/@c;
    bot=Append[#,z-1/2]&/@c;
    Polygon/@Reverse/@
      Join@@@Transpose[{Partition[top,2,1,1],Reverse/@Partition[bot,2,1,1]}]
]

(* Rim stuff *)

rim1[z_,R_,n_]:=Module[{i},
	Table[{R Cos[2 i Pi/n],R Sin[2 i Pi/n],z},{i,0,n}]
]

rim2[z_,R_,n_]:=Module[{i},
	Table[{R Cos[(2i+1) Pi/n],R Sin[(2i+1) Pi/n],z},{i,0,n}]
]

rim[z_,R_,n_]:=Module[{i},
	Table[{R Cos[2 i Pi/n],R Sin[2 i Pi/n],z},{i,0,n}]
]

Rot[x_List?VectorQ]:=Module[
	{i,rot={{Cos[Pi/3],Sin[Pi/3],0},{-Sin[Pi/3],Cos[Pi/3],0},{0,0,1}}//N},
	Table[rot.x[[i]],{i,1,Length[x]}]
]

Rot[m_,x_List?VectorQ]:=Module[{i,j},
	Table[Table[m.x[[j]][[i]],{i,Length[x[[j]]]}],{j,Length[x]}]
]

rotx[x_]:={{1,0,0},{0,Cos[x],Sin[x]},{0,-Sin[x],Cos[x]}}
roty[x_]:={{Cos[x],0,-Sin[x]},{0,1,0},{Sin[x],0,Cos[x]}}
rotz[x_]:={{Cos[x],Sin[x],0},{-Sin[x],Cos[x],0},{0,0,1}}

RotationFormula[r_List?VectorQ,n0_List?VectorQ,ang_]:=Module[
	{n=Unit[n0]},
	r Cos[ang]+n(n.r)(1-Cos[ang])+Cross[r,n]Sin[ang]
]

RotateAboutAxis[Polygon[l_List],n_List,ang_]:=
	Polygon[RotationFormula[#,n,ang]&/@l]
		
RotateAboutAxis[l_List?VectorQ,n_List,ang_]:=RotateAboutAxis[#,n,ang]&/@l

RotateE[g_,n_,ang_]:=Module[{i},
	Polygon/@Table[RotateAboutAxis[g[[i]],n,ang],{i,Length[g]}]
]

(* Small Ditrigonal Icosidodecahedron *)

PolyhedronName[SmallDitrigonalIcosidodecahedron]:="small ditrigonal icosidodecahedron"
NetFaces[SmallDitrigonalIcosidodecahedron]:={{99,111,103,116,129,126,139,124,122,114},{111,99,96},{116,103,115},{126,129,140},{124,139,134},{114,122,107},{108,96,102,89,81,83,77,86,87,91},{96,108,111},{89,102,90},{83,81,76},{86,77,79},{91,87,100},{131,115,106,109,94,110,113,120,135,123},{115,131,116},{109,106,93},{110,94,101},{120,113,128},{123,135,138},{137,140,127,142,145,149,157,152,155,147},{140,137,126},{142,127,132},{149,145,154},{152,157,158},{147,155,148},{119,134,136,144,153,146,151,141,130,133},{134,119,124},{144,136,150},{146,153,156},{141,151,143},{133,130,118},{98,107,121,112,117,104,92,95,85,97},{107,98,114},{112,121,125},{104,117,105},{95,92,84},{97,85,88},{60,48,56,43,30,33,20,35,37,45},{48,60,63},{43,56,44},{33,30,19},{35,20,25},{45,37,52},{51,63,57,70,78,76,82,73,72,68},{63,51,48},{70,57,69},{76,78,83},{73,82,80},{68,72,59},{28,44,53,50,65,49,46,39,24,36},{44,28,43},{50,53,66},{49,65,58},{39,46,31},{36,24,21},{22,19,32,17,14,10,2,7,4,12},{19,22,33},{17,32,27},{10,14,5},{7,2,1},{12,4,11},{40,25,23,15,6,13,8,18,29,26},{25,40,35},{15,23,9},{13,6,3},{18,8,16},{26,29,41},{61,52,38,47,42,55,67,64,74,62},{52,61,45},{47,38,34},{55,42,54},{64,67,75},{62,74,71}}
NetVertices[SmallDitrigonalIcosidodecahedron]:={{-8.00858491306,-0.141090157243},{-7.74976586795,0.824835669046},{-7.51096124479,-2.4974539978},{-7.49664958651,-0.7732776363280001},{-7.30671656237,1.50707177195},{-7.25214219969,-1.53152817152},{-7.04265908677,0.11772888786},{-6.99902591825,-3.12964147689},{-6.80909289411,-0.8492920686100001},{-6.76207752736,0.668401204006},{-6.65797901856,-1.31791667134},{-6.60564306232,-0.319287136589},{-6.54503541851,-2.2386349527},{-6.30808702762,1.55940772819},{-6.2644538591,-1.68796263656},{-6.1603553503,-3.67428051191},{-6.15165256258,0.571719387599},{-6.10801939406,-2.67565097715},{-6.05497074617,-0.0387055771803},{-6.01239684386,-0.851064026465},{-5.92132389802,1.06033454678},{-5.89853628113,-1.02639391778},{-5.81046335936,-0.796956112367},{-5.66250485292,2.02626037307},{-5.65402889432,-1.78464445296},{-5.55734707791,-2.39506941774},{-5.52233217153,1.34886534906},{-5.40938857147,0.428147067698},{-5.40091261287,-3.38275775834},{-5.27782478471,0.59061481387},{-5.21945554734,2.70849647598},{-5.16396422198,0.415284922559},{-5.12139031967,-0.397073526726},{-5.11615188917,-2.75234223711},{-5.02470850327,-1.00749849151},{-4.95539807173,1.31915359189},{-4.86827403823,-1.9951868321},{-4.85733284407,-1.78641641082},{-4.67481651233,1.86982590803},{-4.66634055372,-1.941078918},{-4.62376665141,-2.75343736729},{-4.60421656262,-3.38452971619},{-4.57071800353,-0.116491967317},{-4.51838204728,0.882137567438},{-4.41428353849,-1.10418030791},{-4.22082601259,2.76083243222},{-4.15022606288,-2.493523192},{-4.13370197908,-0.553507991766},{-4.06439154755,1.77314409163},{-3.96770973114,1.16271912685},{-3.87488293398,0.412417834523},{-3.86964450347,-1.94285087586},{-3.8112752661,0.175030786251},{-3.76554599468,-3.92916875121},{-3.71321003843,-2.93053921645},{-3.67971147934,0.337498532423},{-3.62176665253,-1.18569547085},{-3.4350711565,2.55029005308},{-3.4318336284,1.09465393743},{-3.42659519789,-1.26061477295},{-3.41565400373,-1.05184435167},{-3.25921953869,-2.03953269226},{-3.16777615279,-0.294688946663},{-3.16253772229,-2.64995765704},{-3.07670320695,1.61670962659},{-3.03412930464,0.804351177301},{-3.00610325725,-3.63764599764},{-2.88719459338,0.255983369483},{-2.78309608458,-1.73033450587},{-2.73076012834,-0.731704971112},{-2.62989914764,-1.26238673081},{-2.43320409364,1.14698989367},{-2.2767696286,0.159301553076},{-2.2715311981,-2.1959671573},{-2.22895729579,-3.00832560659},{-2.18008781219,-0.451123411704},{-2.13751390989,-1.26348186099},{-2.02365334715,-1.4388117523},{-1.77914596034,-2.19706228749},{-1.64744923755,0.936447514533},{-1.40294185074,0.178196979346},{-1.28908128801,0.00286708803601},{-1.2465073857,-0.809491361249},{-1.1976379021,1.74771083364},{-1.15506399979,0.935352384352},{-1.14982556929,-1.41991632603},{-0.993391104251,-2.40760466662},{-0.79669605025,0.00177195785499},{-0.695835069551,-0.52890980184},{-0.643499113308,0.469719732914},{-0.539400604511,-1.51659814244},{-0.420491940647,2.37703122469},{-0.392465893251,-2.06496595025},{-0.349891990942,-2.87732439954},{-0.264057475606,1.38934288409},{-0.258819045103,-0.965925826289},{-0.1673756592,0.778917919312},{-0.0109411941594,-0.208770421283},{0,0},{0.00523843050392,-2.35526871038},{0.00847595860304,-3.81090482604},{0.195171454637,-0.0749193021007},{0.253116281447,-1.59811330537},{0.28661484054,1.6699244435},{0.338950796783,2.66855397825},{0.384680068206,-1.4356455592},{0.44304930558,0.682236102905},{0.448287736084,-1.67303260748},{0.541114533246,-2.4233338998},{0.637796349653,-3.03375886458},{1/Sqrt[2],-(1/Sqrt[2])},{0.723630864989,1.23290841905},{0.794230814693,-4.02144720517},{0.987688340595,-0.15643446504},{1.09178684939,-2.14275234039},{1.14412280564,-1.14412280564},{1.17762136473,2.12391494324},{1.19717145352,1.49282259434},{1.23974535583,0.68046414505},{1.24822131443,-3.13044068099},{1.43073764618,0.525801637865},{1.44167884033,0.734572059148},{1.52880287384,-2.57976836484},{1.59811330537,-0.253116281447},{1.68955669128,1.49172746415},{1.69479512178,-0.863541246227},{1.73736902409,-1.67589969551},{1.79286034945,-3.96911124893},{1.85122958682,-1.85122958682},{1.97431741498,2.12214298538},{1.98279337358,-1.68876184065},{2.09573697364,-2.60948012201},{2.13075188002,1.13445464479},{2.22743369642,0.52402968001},{2.23590965503,-3.28687514603},{2.38386816146,-0.463658660585},{2.47194108324,-0.234220855177},{2.49472870013,-2.32094931974},{2.58580164597,-0.409550746487},{2.62837554828,-1.22190919577},{2.68142419616,1.4150362042},{2.72505736469,-1.83233416055},{2.73376015241,2.41366573895},{2.8378586612,0.427347863603},{2.88149182973,-2.82002250115},{3.11844022061,0.97802017975},{3.17904786443,-0.941327636363},{3.23138382067,0.0573018983911},{3.33548232947,-1.92901597696},{3.38249769622,-0.411322704342},{3.57243072035,1.86902670394},{3.61606388887,-1.37834366081},{3.8255470018,0.270913398563},{3.88012136448,-2.7676865449},{4.07005438861,-0.487337136624},{4.0843660469,1.23683922485},{4.32317067006,-2.085450442},{4.58198971516,-1.11952461571}}
PolyhedronFaces[SmallDitrigonalIcosidodecahedron]:={{76,74,80,72,69,64,50,60,54,66},{74,76,77},{72,80,73},{64,69,51},{60,50,41},{66,54,56},{80,77,76,70,62,68,63,71,79,78},{77,80,74},{70,76,58},{68,62,49},{71,63,59},{78,79,75},{69,73,80,75,79,67,55,61,53,65},{73,69,72},{75,80,78},{67,79,57},{61,55,42},{65,53,52},{50,51,69,52,53,38,19,32,18,37},{51,50,64},{52,69,65},{38,53,34},{32,19,13},{37,18,33},{54,41,50,33,18,22,2,24,26,35},{41,54,60},{33,50,37},{22,18,10},{24,2,14},{35,26,45},{76,56,54,45,26,39,28,47,62,58},{56,76,66},{45,54,35},{39,26,20},{47,28,43},{58,62,70},{31,17,12,9,1,7,5,15,27,21},{17,31,30},{9,12,8},{7,1,4},{15,5,25},{21,27,40},{12,30,31,44,63,49,62,43,28,29},{30,12,17},{44,31,48},{49,63,68},{43,62,47},{29,28,16},{1,8,12,16,28,20,26,14,2,6},{8,1,9},{16,12,29},{20,28,39},{14,26,24},{6,2,3},{5,4,1,3,2,10,18,13,19,11},{4,5,7},{3,1,6},{10,2,22},{13,18,32},{11,19,23},{27,25,5,23,19,34,53,42,55,36},{25,27,15},{23,5,11},{34,19,38},{42,53,61},{36,55,46},{31,40,27,46,55,57,79,59,63,48},{40,31,21},{46,27,36},{57,55,67},{59,79,71},{48,63,44}}
PolyhedronVertices[SmallDitrigonalIcosidodecahedron]:={{3.8142072830715827,-.81702976668938636,-.37447380102938546},{4.2522073993440187,.64051051459563811,.17485871697124851},{4.2674145762346055,.038818925002720999,-.62372501237940248},{4.2768131284263428,-.33304692811189364,-1.1172768999792269},{4.2920203053169793,-.93473851770639707,-1.9158606293310159},{4.3891805389119151,-.34306224643574281,.292429898780014},{4.4137862679965821,-1.316619689147173,-.99970571817338747},{4.4738345947109401,-.95094364316660147,.36509288523175667},{4.4890417716018315,-1.5526352327556344,-.43349084412317084},{4.5475120873634149,.56776250569589131,-.77777073272980612},{4.5627192642503249,-.033929083899913282,-1.5763544620807946},{4.6108077342797958,-1.9345164041946795,.48266406703176767},{4.7300204215947125,.52280176357925805,-1.3665281113279497},{4.744533553637733,-.050134209356329799,.70459905247852517},{4.7843464596195053,-1.6253832416601309,-1.3861202938274526},{4.8815066932106591,-1.0337069703868084,.82217023428412115},{4.9061124222961267,-2.0072644130978952,-.46996538266793143},{5.0007193805305611,1.4236111973806155,-1.0270219440770895},{5.0253251096090864,.45005375467233446,-2.3191575610293277},{5.0488078505503352,-.47697612290651231,1.0319965850392081},{5.0886207565249615,-2.0522251552119372,-1.0587227612662091},{5.1224853432076011,1.0417300259423349,-.1108670329218358},{5.1622982491748195,-.53351900635735234,-2.2015863792252335},{5.1977408468116275,.8057144823306104,.45534784113629043},{5.2469523049687222,-1.1414004030845322,-2.1289233927725321},{5.3195068094869729,.42383331089551936,1.3715027522872832},{5.3839254445408598,-2.1249731641177964,-2.0113522109686168},{5.5411340048537392,-1.167620846864733,1.561736920547566},{5.55634118174639,-1.7693124364602178,.7631531911941431},{5.5657397339366832,-2.1411782895752646,.26960130359281835},{5.5809469108289035,-2.7428698791690416,-.52898242575551644},{5.6002983654556576,.92402127492296677,-1.6522538612199221},{5.6603466921759223,1.2896973209025664,-.28745525781643294},{5.7001595981352678,-.28555171139573099,-2.3781746041201458},{5.782112654851231,.90781614946685603,.62869965333724576},{5.8371327377023645,-1.2691244724300328,-2.2606034223168127},{5.9556513801857517,1.216949311996242,-1.2400847075187449},{5.970858557069894,.61525772240082881,-2.0386684368710664},{5.9943412980166725,-.31177215517620437,1.3124857092006881},{6.0435527561873251,-2.2588870405922869,-1.2717855247068784},{6.0680187906787902,1.2069339936725966,.16962209123998295},{6.1172302488285827,-.74018089173562633,-2.4146491426688927},{6.1407129897781325,-1.667210769324966,.93650500340248841},{6.1559201666708567,-2.2689023589207871,.13792127404968941},{6.2744388091501878,.21717142550979676,1.1584399888486142},{6.3294588920053033,-1.9597691963854324,-1.7308630868059856},{6.4114119487158653,-.76640133552081486,1.2760111706525124},{6.4512248546852634,-2.3416503678227789,-.81470817564958762},{6.511273181405472,-1.9759743218429815,.550090427754781},{6.5306246360326429,1.6909168322466329,-.57318100771147952},{6.5458318129187841,1.0892252426527436,-1.3717647370603347},{6.5552303651089385,.71735938953950208,-1.8653166246636205},{6.5704375419959242,.11566779994730272,-2.663900354017589},{6.7276461023166965,1.0730201171967393,.90918877749807379},{6.7920647373607977,-1.4757863578090223,-2.4736661857574236},{6.8646192418821502,.08944735616468876,1.0267599593044298},{6.9138307000351786,-1.8576675292477805,-1.5575112746004959},{6.949273297678081,-.51843404056282814,1.0994229457571464},{6.9890862036437517,-2.0936830728605916,-.99129640054888553},{7.0229507903335158,1.0002721082882285,-.043440672200877901},{7.0627636962970651,-.57497692400993581,-2.1341600185077798},{7.0862464372406073,-1.5020068015951067,1.2169941275610437},{7.110852166323505,-2.4755642443032284,-.075141489390550209},{7.2054591245621166,.95531136617324854,-.63219805080141255},{7.2300648536401395,-.018246076533788597,-1.9243336677534936},{7.3272250872376555,.57343019473605032,.28395686035384921},{7.3670379932011695,-1.0018188375603693,-1.8067624859516601},{7.3815511252572915,-1.5747548105036022,.26436467786167347},{7.5007638125774819,.88256335727005557,-1.584827500501068},{7.5488522825991796,-1.0180239630240873,.47419102861264976},{7.5640594594887381,-1.6197155526132525,-.32439270073964462},{7.6225297752516591,.50068218583340824,-.66867258935298807},{7.6377369521422468,-.10100940376338166,-1.4672563186958243},{7.6977852788593567,.26466664221858676,-.10245771529335814},{7.7223910079369182,-.70889080048998855,-1.3945933322437907},{7.8195512415356802,-.11721452922034223,.81369719586252742},{7.8347584184248569,-.71890611881523542,.01511346651326767},{7.8441569706142394,-1.0907719719292259,-.47843842109030055},{7.8593641475002861,-1.6924635615180231,-1.2770221504396647},{8.2973642637807672,-.23492328024235003,-.72768963243513997}}

(* Small Triambic Icosahedron *)

PolyhedronFaces[SmallTriambicIcosahedron]:=
{{24,2,8},{24,8,10},{24,10,2},{13,2,10},{13,10,9},{13,9,2},{23,2,9},{23,9,
    7},{23,7,2},{19,2,7},{19,7,4},{19,4,2},{20,2,4},{20,4,8},{20,8,2},{27,11,
    5},{27,5,1},{27,1,11},{14,12,11},{14,11,1},{14,1,12},{28,6,12},{28,12,
    1},{28,1,6},{18,3,6},{18,6,1},{18,1,3},{17,5,3},{17,3,1},{17,1,5},{22,8,
    6},{22,6,10},{22,10,8},{15,10,3},{15,3,9},{15,9,10},{21,9,5},{21,5,7},{21,
    7,9},{26,7,11},{26,11,4},{26,4,7},{25,4,12},{25,12,8},{25,8,4},{31,11,
    7},{31,7,5},{31,5,11},{16,12,4},{16,4,11},{16,11,12},{32,6,8},{32,8,
    12},{32,12,6},{29,3,10},{29,10,6},{29,6,3},{30,5,9},{30,9,3},{30,3,5}}
PolyhedronVertices[SmallTriambicIcosahedron]:=
{{0, 0, -5/Sqrt[50 - 10*Sqrt[5]]}, {0, 0, 5/Sqrt[50 - 10*Sqrt[5]]}, {Root[1 - 5*#1^2 + 5*#1^4 & , 1, 0], 0, 
  -(1/Sqrt[10 - 2*Sqrt[5]])}, {Sqrt[(5 + Sqrt[5])/10], 0, 1/Sqrt[10 - 2*Sqrt[5]]}, 
 {Root[1 - 20*#1^2 + 80*#1^4 & , 2, 0], (-1 - Sqrt[5])/4, -(1/Sqrt[10 - 2*Sqrt[5]])}, 
 {Root[1 - 20*#1^2 + 80*#1^4 & , 2, 0], (1 + Sqrt[5])/4, -(1/Sqrt[10 - 2*Sqrt[5]])}, 
 {Sqrt[1/8 - 1/(8*Sqrt[5])], (-1 - Sqrt[5])/4, 1/Sqrt[10 - 2*Sqrt[5]]}, 
 {Sqrt[1/8 - 1/(8*Sqrt[5])], (1 + Sqrt[5])/4, 1/Sqrt[10 - 2*Sqrt[5]]}, 
 {-Sqrt[1 + 2/Sqrt[5]]/2, -1/2, 1/Sqrt[10 - 2*Sqrt[5]]}, {-Sqrt[1 + 2/Sqrt[5]]/2, 1/2, 1/Sqrt[10 - 2*Sqrt[5]]}, 
 {Sqrt[1/4 + 1/(2*Sqrt[5])], -1/2, -(1/Sqrt[10 - 2*Sqrt[5]])}, {Sqrt[1/4 + 1/(2*Sqrt[5])], 1/2, 
  -(1/Sqrt[10 - 2*Sqrt[5]])}, {-Sqrt[5 + 2*Sqrt[5]]/5, 0, Root[5 - 65*#1^2 + #1^4 & , 4, 0]/10}, 
 {Sqrt[5 + 2*Sqrt[5]]/5, 0, -Root[5 - 65*#1^2 + #1^4 & , 4, 0]/10}, {Root[1 - 125*#1^2 + 125*#1^4 & , 1, 0], 0, 
  Sqrt[(5 + Sqrt[5])/2]/10}, {Sqrt[1/2 + 11/(10*Sqrt[5])], 0, -(1/Sqrt[50 - 10*Sqrt[5]])}, 
 {-(1/Sqrt[250 - 110*Sqrt[5]]), (-5 + Sqrt[5])^(-1), Root[1 - 1300*#1^2 + 2000*#1^4 & , 1, 0]}, 
 {-(1/Sqrt[250 - 110*Sqrt[5]]), (5 + Sqrt[5])/20, Root[1 - 1300*#1^2 + 2000*#1^4 & , 1, 0]}, 
 {1/Sqrt[250 - 110*Sqrt[5]], (-5 + Sqrt[5])^(-1), Sqrt[13/40 + 29/(40*Sqrt[5])]}, 
 {1/Sqrt[250 - 110*Sqrt[5]], (5 + Sqrt[5])/20, Sqrt[13/40 + 29/(40*Sqrt[5])]}, 
 {-Sqrt[5 + 2*Sqrt[5]]/10, -1/2 - 1/Sqrt[5], Sqrt[(5 + Sqrt[5])/2]/10}, 
 {-Sqrt[5 + 2*Sqrt[5]]/10, 1/2 + 1/Sqrt[5], Sqrt[(5 + Sqrt[5])/2]/10}, 
 {-Sqrt[(5 + Sqrt[5])/2]/10, (-5 - 3*Sqrt[5])/20, Root[5 - 65*#1^2 + #1^4 & , 4, 0]/10}, 
 {-Sqrt[(5 + Sqrt[5])/2]/10, (5 + 3*Sqrt[5])/20, Root[5 - 65*#1^2 + #1^4 & , 4, 0]/10}, 
 {Sqrt[130 + 58*Sqrt[5]]/20, (5 + 3*Sqrt[5])/20, Sqrt[(5 + Sqrt[5])/2]/10}, 
 {Sqrt[130 + 58*Sqrt[5]]/20, (-5 - 3*Sqrt[5])/20, Sqrt[(5 + Sqrt[5])/2]/10}, 
 {1/Sqrt[50 - 10*Sqrt[5]], (-5 - 3*Sqrt[5])/20, -Root[5 - 65*#1^2 + #1^4 & , 4, 0]/10}, 
 {1/Sqrt[50 - 10*Sqrt[5]], (5 + 3*Sqrt[5])/20, -Root[5 - 65*#1^2 + #1^4 & , 4, 0]/10}, 
 {Root[1 - 1300*#1^2 + 2000*#1^4 & , 1, 0], (5 + 3*Sqrt[5])/20, -Sqrt[(5 + Sqrt[5])/2]/10}, 
 {Root[1 - 1300*#1^2 + 2000*#1^4 & , 1, 0], (-5 - 3*Sqrt[5])/20, -Sqrt[(5 + Sqrt[5])/2]/10}, 
 {Sqrt[5 + 2*Sqrt[5]]/10, -1/2 - 1/Sqrt[5], -(1/Sqrt[50 - 10*Sqrt[5]])}, 
 {Sqrt[5 + 2*Sqrt[5]]/10, 1/2 + 1/Sqrt[5], -(1/Sqrt[50 - 10*Sqrt[5]])}}

(* Spiky *)

PolyhedronName[Spiky]:="spiky"
PolyhedronFaces[Spiky]:=
{{21,2,12},{21,12,6},{21,6,2},{15,2,6},{15,6,5},{15,5,2},{22,2,5},{22,5,11},{22,11,2},
{28,2,11},{28,11,4},{28,4,2},{27,2,4},{27,4,12},{27,12,2},{24,7,9},{24,9,1},{24,1,7},
{16,8,7},{16,7,1},{16,1,8},{23,10,8},{23,8,1},{23,1,10},{25,3,10},{25,10,1},{25,1,3},
{26,9,3},{26,3,1},{26,1,9},{29,12,10},{29,10,6},{29,6,12},{13,6,3},{13,3,5},{13,5,6},
{30,5,9},{30,9,11},{30,11,5},{20,11,7},{20,7,4},{20,4,11},{19,4,8},{19,8,12},{19,12,4},
{32,7,11},{32,11,9},{32,9,7},{14,8,4},{14,4,7},{14,7,8},{31,10,12},{31,12,8},{31,8,10},
{17,3,6},{17,6,10},{17,10,3},{18,9,5},{18,5,3},{18,3,9}}
PolyhedronVertices[Spiky]:=
{{0,0,Root[5-20*#1^2+16*#1^4&,1]},{0,0,Root[5-20*#1^2+16*#1^4&,4]},
{Root[1-5*#1^2+5*#1^4&,1],0,Root[1-20*#1^2+80*#1^4&,1]},
{Root[1-5*#1^2+5*#1^4&,4],0,Root[1-20*#1^2+80*#1^4&,4]},
{Root[1-40*#1^2+80*#1^4&,1],-1/2,Root[1-20*#1^2+80*#1^4&,4]},
{Root[1-40*#1^2+80*#1^4&,1],1/2,Root[1-20*#1^2+80*#1^4&,4]},
{Root[1-40*#1^2+80*#1^4&,4],-1/2,Root[1-20*#1^2+80*#1^4&,1]},
{Root[1-40*#1^2+80*#1^4&,4],1/2,Root[1-20*#1^2+80*#1^4&,1]},
{Root[1-20*#1^2+80*#1^4&,2],(-1-Sqrt[5])/4,Root[1-20*#1^2+80*#1^4&,1]},
{Root[1-20*#1^2+80*#1^4&,2],(1+Sqrt[5])/4,Root[1-20*#1^2+80*#1^4&,1]},
{Root[1-20*#1^2+80*#1^4&,3],(-1-Sqrt[5])/4,Root[1-20*#1^2+80*#1^4&,4]},
{Root[1-20*#1^2+80*#1^4&,3],(1+Sqrt[5])/4,Root[1-20*#1^2+80*#1^4&,4]},
{Root[1-290*#1^2+2555*#1^4-5850*#1^6+2025*#1^8&,1],0,Root[1-7720*#1^2+127280*#1^4-489600*#1^6+518400*#1^8&,6]},
{Root[1-290*#1^2+2555*#1^4-5850*#1^6+2025*#1^8&,8],0,Root[1-7720*#1^2+127280*#1^4-489600*#1^6+518400*#1^8&,3]},
{Root[1-740*#1^2+3230*#1^4-4500*#1^6+2025*#1^8&,1],0,Root[1-520*#1^2+40880*#1^4-835200*#1^6+518400*#1^8&,8]},
{Root[1-740*#1^2+3230*#1^4-4500*#1^6+2025*#1^8&,8],0,Root[1-520*#1^2+40880*#1^4-835200*#1^6+518400*#1^8&,1]},
{Root[1-520*#1^2+40880*#1^4-835200*#1^6+518400*#1^8&,1],Root[1+28*#1-20*#1^2-144*#1^3+144*#1^4&,4],Root[1-7720*#1^2+127280*#1^4-489600*#1^6+518400*#1^8&,3]},
{Root[1-520*#1^2+40880*#1^4-835200*#1^6+518400*#1^8&,1],Root[1-28*#1-20*#1^2+144*#1^3+144*#1^4&,1],Root[1-7720*#1^2+127280*#1^4-489600*#1^6+518400*#1^8&,3]},
{Root[1-520*#1^2+40880*#1^4-835200*#1^6+518400*#1^8&,8],Root[1+28*#1-20*#1^2-144*#1^3+144*#1^4&,4],Root[1-7720*#1^2+127280*#1^4-489600*#1^6+518400*#1^8&,6]},
{Root[1-520*#1^2+40880*#1^4-835200*#1^6+518400*#1^8&,8],Root[1-28*#1-20*#1^2+144*#1^3+144*#1^4&,1],Root[1-7720*#1^2+127280*#1^4-489600*#1^6+518400*#1^8&,6]},
{Root[1-7720*#1^2+127280*#1^4-489600*#1^6+518400*#1^8&,3],Root[1+28*#1-20*#1^2-144*#1^3+144*#1^4&,4],Root[1-520*#1^2+40880*#1^4-835200*#1^6+518400*#1^8&,8]},
{Root[1-7720*#1^2+127280*#1^4-489600*#1^6+518400*#1^8&,3],Root[1-28*#1-20*#1^2+144*#1^3+144*#1^4&,1],Root[1-520*#1^2+40880*#1^4-835200*#1^6+518400*#1^8&,8]},
{Root[1-7720*#1^2+127280*#1^4-489600*#1^6+518400*#1^8&,6],Root[1+28*#1-20*#1^2-144*#1^3+144*#1^4&,4],Root[1-520*#1^2+40880*#1^4-835200*#1^6+518400*#1^8&,1]},
{Root[1-7720*#1^2+127280*#1^4-489600*#1^6+518400*#1^8&,6],Root[1-28*#1-20*#1^2+144*#1^3+144*#1^4&,1],Root[1-520*#1^2+40880*#1^4-835200*#1^6+518400*#1^8&,1]},
{Root[1-1160*#1^2+40880*#1^4-374400*#1^6+518400*#1^8&,1],Root[1+44*#1-100*#1^2-48*#1^3+144*#1^4&,3],Root[1-520*#1^2+40880*#1^4-835200*#1^6+518400*#1^8&,1]},
{Root[1-1160*#1^2+40880*#1^4-374400*#1^6+518400*#1^8&,1],Root[1-44*#1-100*#1^2+48*#1^3+144*#1^4&,2],Root[1-520*#1^2+40880*#1^4-835200*#1^6+518400*#1^8&,1]},
{Root[1-1160*#1^2+40880*#1^4-374400*#1^6+518400*#1^8&,8],Root[1+44*#1-100*#1^2-48*#1^3+144*#1^4&,3],Root[1-520*#1^2+40880*#1^4-835200*#1^6+518400*#1^8&,8]},
{Root[1-1160*#1^2+40880*#1^4-374400*#1^6+518400*#1^8&,8],Root[1-44*#1-100*#1^2+48*#1^3+144*#1^4&,2],Root[1-520*#1^2+40880*#1^4-835200*#1^6+518400*#1^8&,8]},
{Root[1-2960*#1^2+51680*#1^4-288000*#1^6+518400*#1^8&,1],Root[1+16*#1-40*#1^2-192*#1^3+144*#1^4&,4],Root[1-7720*#1^2+127280*#1^4-489600*#1^6+518400*#1^8&,6]},
{Root[1-2960*#1^2+51680*#1^4-288000*#1^6+518400*#1^8&,1],Root[1-16*#1-40*#1^2+192*#1^3+144*#1^4&,1],Root[1-7720*#1^2+127280*#1^4-489600*#1^6+518400*#1^8&,6]},
{Root[1-2960*#1^2+51680*#1^4-288000*#1^6+518400*#1^8&,8],Root[1+16*#1-40*#1^2-192*#1^3+144*#1^4&,4],Root[1-7720*#1^2+127280*#1^4-489600*#1^6+518400*#1^8&,3]},
{Root[1-2960*#1^2+51680*#1^4-288000*#1^6+518400*#1^8&,8],Root[1-16*#1-40*#1^2+192*#1^3+144*#1^4&,1],Root[1-7720*#1^2+127280*#1^4-489600*#1^6+518400*#1^8&,3]}}

(* SquashedDodecahedron *)

SquashedDodecahedron[s_:1]:=Module[
	{
		i,
		v,u,w,
		h=2/3Sqrt[3],a,b,c,
		short={2,5,12},long={1,9,7}
	},
	(* Rhombic dodecahedron vertices *)
	v=Union[Flatten[
		{Table[{
		{{1,1,i},{0,0,2i},{1,-1,i},{2,0,0}}/s,
		{{-1,1,i},{0,0,2i},{1,1,i},{0,2,0}}/s,
		{{-1,-1,i},{0,0,2i},{-1,1,i},{-2,0,0}}/s,
		{{1,-1,i},{0,0,2i},{-1,-1,i},{0,-2,0}}/s
		},{i,-1,1,2}],
		{{{{1,-1,-1},{2,0,0},{1,-1,1},{0,-2,0}}/s,
		{{1,1,-1},{0,2,0},{1,1,1},{2,0,0}}/s,
		{{-1,1,-1},{-2,0,0},{-1,1,1},{0,2,0}}/s,
		{{-1,-1,-1},{0,-2,0},{-1,-1,1},{-2,0,0}}/s}}
	},3]];
	a=Centroid[v[[{1,7,9}]]];
	b=Centroid[v[[{2,12,5}]]];
	c=v[[4]];
	u=(a-c)/Sqrt[(c-a).(c-a)];
	w=Table[{0,0,0},{Length[v]}];
	w[[4]]=v[[4]]+2(b-c)+h u;
	Do[
		w[[short[[i]]]]=v[[short[[i]]]]+h u,
		{i,Length[short]}
	];
	Do[
		w[[long[[i]]]]=v[[long[[i]]]]+2(b-a)+h u,
		{i,Length[long]}
	];
	{
	Polygon/@{v[[{4,9,5,1}]],v[[{4,9,12,7}]],v[[{4,7,2,1}]]},
	Polygon/@{w[[{4,9,5,1}]],w[[{4,9,12,7}]],w[[{4,7,2,1}]]},
	Polygon/@{
		{v[[5]],v[[9]],w[[9]],w[[5]]},{v[[9]],v[[12]],w[[12]],w[[9]]},
		{v[[12]],v[[7]],w[[7]],w[[12]]},{v[[7]],v[[2]],w[[2]],w[[7]]},
		{v[[2]],v[[1]],w[[1]],w[[2]]},{v[[1]],v[[5]],w[[5]],w[[1]]}}
	}
]

StellaOctangulaCubeEdges:=Module[
	{diags=Flatten[StellaOctangulaDiagonals,1,Line],l={},i=2},
    While[diags!={},
		While[(diags[[1,2]]+diags[[1,1]])!=(diags[[i,2]]+diags[[i,1]]),i++];
		l=Append[l,{diags[[1,1]],diags[[i,1]],diags[[1,2]],diags[[i,2]],diags[[1,1]]}];
		diags=Drop[Drop[diags,{i}],1];
		i=2;
	];
	Line/@l
]

StellaOctangulaDiagonals:=
	Line/@Union[Flatten[Diagonals/@Flatten[StellaOctangula[[1]],1,Polygon],1]];
  
StellaOctangulaPoints:=Union[Table[Point[Together[(
	StellaOctangulaDiagonals[[i,1,1]]+StellaOctangulaDiagonals[[i,1,2]])/2]],
	{i,12}]
]

StellaOctangulaOctahedron:=Module[{v=Flatten[StellaOctangulaPoints,1,Point],i},
	Graphics3D[Table[{
		Polygon[{v[[i]],v[[3]],v[[4]]}],
		Polygon[{v[[i]],v[[5]],v[[6]]}],
		Polygon[{v[[i]],v[[3]],v[[5]]}],
		Polygon[{v[[i]],v[[4]],v[[6]]}]},
	{i,2}]]
]

PolyhedronName[Szilassi]:="Szilassi polyhedron"
PolyhedronFaces[Szilassi]:=1+{{9,7,5,0,1,13},{10,12,0,5,3,2},{6,7,9,10,2,4},{7,6,8,11,3,5},
		{11,13,1,4,2,3},{8,6,4,1,0,12},{13,11,8,12,10,9}}
PolyhedronVertices[Szilassi]:={{-1.200,0.000,1.200},{1.200,0.000,1.200},{0.000,-1.260,-1.200},
		{0.000,1.260,-1.200},{0.200,-0.500,-0.800},{-0.200,0.500,-0.800},
		{-0.375,-0.375,-0.300},{0.375,0.375,-0.300},{0.450,-0.250,0.200},
		{-0.450,0.250,0.200},{-0.700,0.000,0.200},{0.700,0.000,0.200},
		{-0.700,-0.250,0.200},{0.700,0.250,0.200}
		}

(*
Szilassi:=TriangulateSimplePolygons3D[
	Graphics3D[SzilassiPolygons],TriangleEdges->Automatic][[1]]
*)

(* Tetrahemihexahedron *)

PolyhedronName[Tetrahemihexahedron]:="tetrahemihexahedron"
NetFaces[Tetrahemihexahedron]:={{4,6,7},{1,3,4},{4,3,6},{6,3,2},{10,6,5},{12,8,10},{10,8,6},{6,8,7},{17,14,13},{18,16,17},{17,16,14},{14,16,15},{10,14,12},{9,11,10},{10,11,14},{14,11,13}}
NetVertices[Tetrahemihexahedron]:={{(-1-Sqrt[3])/2,(-3+Sqrt[3])/6},{-Sqrt[3]/2,(-3-2Sqrt[3])/6},{(-1-Sqrt[3])/4,(-3-Sqrt[3])/12},{-1/2,1/(2Sqrt[3])},{0,(-3-Sqrt[3])/3},{0,-(1/Sqrt[3])},{1/2,1/(2Sqrt[3])},{(1+Sqrt[3])/4,(-3-Sqrt[3])/12},{Sqrt[3]/2,(-9-2Sqrt[3])/6},{Sqrt[3]/2,(-3-2Sqrt[3])/6},{(1+Sqrt[3])/2,(-3-Sqrt[3])/3},{(1+Sqrt[3])/2,(-3+Sqrt[3])/6},{(2+Sqrt[3])/2,(-9-2Sqrt[3])/6},{(2+Sqrt[3])/2,(-3-2Sqrt[3])/6},{(3+Sqrt[3])/2,(-3+Sqrt[3])/6},{(5+3Sqrt[3])/4,(-9-Sqrt[3])/12},{1+Sqrt[3],(-3-Sqrt[3])/3},{(3+2Sqrt[3])/2,(-6+Sqrt[3])/6}}
PolyhedronFaces[Tetrahemihexahedron]:={{6,5,7},{1,4,6},{6,4,5},{5,4,1},{2,5,1},{7,4,2},{2,4,5},{5,4,7},{6,3,1},{7,4,6},{6,4,3},{3,4,7},{2,3,7},{1,4,2},{2,4,3},{3,4,1}}
PolyhedronVertices[Tetrahemihexahedron]:={{1.9940169358628587,-.35566243269371522,1.84557863754038},{2.1316414545285817,-.93427707211306912,1.041672802936344},{2.4880338717151991,0,1.0521988413179606},{2.5557511543173783,-.56572292787741363,1.4709731701758223},{2.6234684369145995,-1.1314458557558181,1.88974749902929},{2.9798608541069637,-.19716878363837495,1.9002735374132989},{3.1174853727715124,-.77578342305886739,1.0963677028091161}}

(* This code due to Russell Towle *)

Trapezohedron[n_Integer,pitch_]:=Block[
	{c=1/(2*(Sin[Pi/(2*n)])),d=Tan[Degree pitch]/2,
		faceslope=(ArcTan[Tan[Degree pitch]/Cos[(Pi-(Pi/n))/2]]),
		apex=(Tan[faceslope]*c*Cos[Pi/n])+d},
		Graphics3D[
			{N[Table[
				{Polygon[{{c Cos[2Pi i/n], c Sin[2Pi i/n], -d},
				{0,0,-apex},
			 	{c Cos[2Pi (i+1)/n], c Sin[2Pi (i+1)/n], -d},
			 	{c Cos[(Pi/n)+(2Pi i/n)], c Sin[(Pi/n)+(2Pi i/n)], d}}],
				Polygon[{{c Cos[(Pi/n)+(2Pi i/n)], c Sin[(Pi/n)+(2Pi i/n)], d},
			 	{c Cos[(2Pi (i+1)/n)], c Sin[(2Pi (i+1)/n)], -d},
			 	{c Cos[(Pi/n)+(2Pi (i+1)/n)], c Sin[(Pi/n)+(2Pi (i+1)/n)], d},
			 	{0,0,apex}}]},
				{i, n}]
			]}
		]
	]/; n > 2
	
Trapezohedron[n_:7, pitch_:30] := Trapezohedron[n, pitch]

(* standard list of {name, Wythoff symbol} *)

UniformPolyhedronName[n_]:=standard[[n,1]]

UniformPolyhedronHullName[n_]:=standard[[n,3]]

UniformPolyhedronDualName[n_]:=dualnames[[n]]

UniformPolyhedron[n_Integer,prec_:25] := Module[{p=First/@Flatten[{Graphics3D[MakeUniform[standard[[n, 2]],prec]][[1]]}],v},
	v=Union[Join@@p];
	GraphicsComplex[v,Polygon[p/.Thread[v->Range[Length[v]]]]]
] /; 1 <= n <= Length[standard]

standard = {
{"tetrahedron", w1[3, 2, 3], "tetrahedron"},
{"truncated tetrahedron", w2[2, 3, 3], "truncated tetrahedron"},
{"octahemioctahedron", w2[3/2, 3, 3], "cuboctahedron"},
{"tetrahemihexahedron", w2[3/2, 3, 2], "octahedron"},
{"octahedron", w1[4, 2, 3], "octahedron"},
{"cube", w1[3, 2, 4], "cube", "cube"},
{"cuboctahedron", w1[2, 3, 4], "cuboctahedron"},
{"truncated octahedron", w2[2, 4, 3], "truncated octahedron"},
{"truncated cube", w2[2, 3, 4], "truncated cube"},
{"small rhombicuboctahedron", w2[3, 4, 2], "small rhombicuboctahedron"},
{"uniform great rhombicuboctahedron", w3[2, 3, 4], "great rhombicuboctahedron (Archimedean)"},
{"snub cube", w0[2, 3, 4], "snub cube"},
{"small cubicuboctahedron", w2[3/2, 4, 4], "small rhombicuboctahedron"},
{"great cubicuboctahedron", w2[3, 4, 4/3], "truncated cube"},
{"cubohemioctahedron", w2[4/3, 4, 3], "cuboctahedron"},
{"cubitruncated cuboctahedron", w3[4/3, 3, 4], "H1"},
{"great rhombicuboctahedron", w2[3/2, 4, 2], "truncated cube"},
{"small rhombihexahedron", w3[3/2, 2, 4], "small rhombicuboctahedron"},
{"stellated truncated hexahedron", w2[2, 3, 4/3], "small rhombicuboctahedron"},
{"great truncated cuboctahedron", w3[4/3, 2, 3], "H2"},
{"great rhombihexahedron", w3[4/3, 3/2, 2], "truncated cube"},
{"icosahedron", w1[5, 2, 3], "icosahedron"},
{"dodecahedron", w1[3, 2, 5], "dodecahedron"},
{"icosidodecahedron", w1[2, 3, 5], "icosidodecahedron"},
{"truncated icosahedron", w2[2, 5, 3], "truncated icosahedron"},
{"truncated dodecahedron", w2[2, 3, 5], "truncated dodecahedron"},
{"small rhombicosidodecahedron", w2[3, 5, 2], "small rhombicosidodecahedron"},
{"uniform great rhomicosidodecahedron", w3[2, 3, 5], "great rhomicosidodecahedron (Archimedean)"},
{"snub dodecahedron", w0[2, 3, 5], "snub dodecahedron"},
{"small ditrigonal icosidodecahedron", w1[3, 5/2, 3], "dodecahedron"},
{"small icosicosidodecahedron", w2[5/2, 3, 3], "H3"},
{"small snub icosicosidodecahedron", w0[5/2, 3, 3], "truncated icosahedron"},
{"small dodecicosidodecahedron", w2[3/2, 5, 5], "small rhombicosidodecahedron"},
{"small stellated dodecahedron", w1[5, 2, 5/2], "icosahedron"},
{"great dodecahedron", w1[5/2, 2, 5], "icosahedron"},
{"dodecadodecahedron", w1[2, 5/2, 5], "icosidodecahedron"},
{"truncated great dodecahedron", w2[2, 5/2, 5], "H4"},
{"rhombidodecadodecahedron", w2[5/2, 5, 2], "H5"},
{"small rhombidodecahedron", w3[2, 5/2, 5], "small rhombicosidodecahedron"},
{"snub dodecadodecahedron", w0[2, 5/2, 5], "snub dodecahedron"},
{"ditrigonal dodecadodecahedron", w1[3, 5/3, 5], "dodecahedron"},
{"great ditrigonal dodecicosidodecahedron", w2[3, 5, 5/3], "truncated dodecahedron"},
{"small ditrigonal dodecicosidodecahedron", w2[5/3, 3, 5], "H3"},
{"icosidodecadodecahedron", w2[5/3, 5, 3], "H5"},
{"icositruncated dodecadodecahedron", w3[5/3, 3, 5], "H6"},
{"snub icosidodecadodecahedron", w0[5/3, 3, 5], "H6"},
{"great ditrigonal icosidodecahedron", w1[3/2, 3, 5], "dodecahedron"},
{"great icosicosidodecahedron", w2[3/2, 5, 3], "truncated dodecahedron"},
{"small icosihemidodecahedron", w2[3/2, 3, 5], "icosidodecahedron"},
{"small dodecicosahedron", w3[3/2, 3, 5], "H3"},
{"small dodecahemidodecahedron", w2[5/4, 5, 5], "icosidodecahedron"},
{"great stellated dodecahedron", w1[3, 2, 5/2], "dodecahedron"},
{"great icosahedron", w1[5/2, 2, 3], "icosahedron"},
{"great icosidodecahedron", w1[2, 5/2, 3], "icosidodecahedron"},
{"great truncated icosahedron", w2[2, 5/2, 3], "H7"},
{"rhombicosahedron", w3[2, 5/2, 3], "H5"},
{"great snub icosidodecahedron", w0[2, 5/2, 3], "H7"},
{"small stellated truncated dodecahedron", w2[2, 5, 5/3], "small rhombicosidodecahedron"},
{"truncated dodecadodecahedron", w3[5/3, 2, 5], "H8"},
{"inverted snub dodecadodecahedron", w0[5/3, 2, 5], "H7'"},
{"great dodecicosidodecahedron", w2[5/2, 3, 5/3], "H4"},
{"small dodecahemicosahedron", w2[5/3, 5/2, 3], "icosidodecahedron"},
{"great dodecicosahedron", w3[5/3, 5/2, 3], "truncated dodecahedron"},
{"great snub dodecicosidodecahedron", w0[5/3, 5/2, 3], "small rhombicosidodecahedron"},
{"great dodecahemicosahedron", w2[5/4, 5, 3], "icosidodecahedron"},
{"great stellated truncated dodecahedron", w2[2, 3, 5/3], "H3"},
{"great rhombicosidodecahedron", w2[5/3, 3, 2], "H4"},
{"great truncated icosidodecahedron", w3[5/3, 2, 3], "H9"},
{"great inverted snub icosidodecahedron", w0[5/3, 2, 3], "H7"},
{"great dodecahemidodecahedron", w2[5/3, 5/2, 5/3], "icosidodecahedron"},
{"great icosihemidodecahedron", w2[3/2, 3, 5/3], "icosidodecahedron"},
{"small retrosnub icosicosidodecahedron", w0[3/2, 3/2, 5/2], "H10"},
{"great rhombidodecahedron", w3[3/2, 5/3, 2], "H4"},
{"great retrosnub icosidodecahedron", w0[3/2, 5/3, 2], "H11"},
{"great dirhombicosidodecahedron", w0[3/2, 5/3, 3, 5/2], "small rhombicosidodecahedron"},
{"pentagonal prism", w2[2, 5, 2], "pentagonal prism"},
{"pentagonal antiprism", w0[2, 2, 5], "pentagonal antiprism"},
{"pentagrammic prism", w2[2, 5/2, 2], "pentagonal prism"},
{"pentagrammic antiprism", w0[2, 2, 5/2], "pentagonal prism"},
{"pentagrammic crossed antiprism", w0[2, 2, 5/3], "pentagonal antiprism"}
};

dualnames={
"tetrahedron",
"triakis tetrahedron",
"octahemioctacron",
"tetrahemihexacron",
"cube",
"octahedron",
"rhombic dodecahedron",
"tetrakis hexahedron",
"triakis octahedron",
"deltoidal icositetrahedron",
"disdyakis dodecahedron",
"pentagonal icositetrahedron",
"small hexacronic icositetrahedron",
"great hexacronic icositetrahedron",
"hexahemioctahedron",
"tetradyakis hexahedron",
"great deltoidal icositetrahedron",
"small rhombihexacron",
"great triakis octahedron",
"great disdyakis dodecahedron",
"great rhombihexacron",
"dodecahedron",
"icosahedron",
"rhombic triacontahedron",
"pentakis dodecahedron",
"triakis icosahedron",
"deltoidal hexecontahedron",
"disdyakis triacontahedron",
"pentagonal hexecontahedron",
"small triambic icosahedron",
"small icosacronic hexecontahedron",
"small hexagonal hexecontahedron",
"small dodecacronic hexecontahedron",
"great dodecahedron",
"small stellated dodecahedron",
"medial rhombic triacontahedron",
"small stellapentakis dodecahedron",
"medial deltoidal hexecontahedron",
"small rhombidodecacron",
"medial pentagonal hexecontahedron",
"medial triambic icosahedron",
"great ditrigonal dodecacronic hexecontahedron",
"small ditrigonal dodecacronic hexecontahedron",
"medial icosacronic hexecontahedron",
"tridyakis icosahedron",
"medial hexagonal hexecontahedron",
"great triambic icosahedron",
"great icosacronic hexecontahedron",
"small icosihemidodecacron",
"small dodecicosacron",
"small dodecahemidodecacron",
"great icosahedron",
"great stellated dodecahedron",
"great rhombic triacontahedron",
"great stellapentakis dodecahedron",
"rhombicosacron",
"great pentagonal hexecontahedron",
"great pentakis dodecahedron",
"medial disdyakis triacontahedron",
"medial inverted pentagonal hexecontahedron",
"great dodecacronic hexecontahedron",
"small dodecahemicosacron",
"great dodecicosacron",
"great hexagonal hexecontahedron",
"great dodecahemicosacron",
"great triakis icosahedron",
"great deltoidal hexecontahedron",
"great disdyakis triacontahedron",
"great inverted pentagonal hexecontahedron",
"great dodecahemidodecacron",
"great icosihemidodecacron",
"small hexagrammic hexecontahedron",
"great rhombidodecacron",
"great pentagrammic hexecontahedron",
"great dirhombicosidodecacron",
"pentagonal dipyramid",
"pentagonal deltohedron",
"pentagrammic dipyramid",
"pentagrammic deltohedron",
"pentagrammic concave deltohedron"
};

uniforms:=Module[{n},Table[UniformPolyhedronName[n],{n,Length[standard]}]]

ustring[str_String]:=Module[{p=Position[uniforms,ToLowerCase[str]]},
	If[p=={},"unknown U","U"<>ToString[p[[1,1]]]]
]

udualstring[str_String]:=Module[{p=Position[dualnames,ToLowerCase[str]]},
	If[p=={},"unknown U","U"<>ToString[p[[1,1]]]]
]

unit[v_List]:=v/Sqrt[v.v]
Unit[v_List]:=#/Sqrt[#.#]&[v]

UnitCuboid[{x_,y_,z_}]:={
		Polygon[{{x,y,z},{x+1,y,z},{x+1,y+1,z},{x,y+1,z}}],
		Polygon[{{x,y,z+1},{x+1,y,z+1},{x+1,y+1,z+1},{x,y+1,z+1}}],
		Polygon[{{x,y,z},{x,y+1,z},{x,y+1,z+1},{x,y,z+1}}],
		Polygon[{{x+1,y,z},{x+1,y+1,z},{x+1,y+1,z+1},{x+1,y,z+1}}],
		Polygon[{{x,y,z},{x+1,y,z},{x+1,y,z+1},{x,y,z+1}}],
		Polygon[{{x,y+1,z},{x+1,y+1,z},{x+1,y+1,z+1},{x,y+1,z+1}}]
	}

WenningerDuals:={
{1,"tetrahedron",1,"tetrahedron",8},
{2,"octahedron",2,"cube",8},
{3,"cube",3,"octahedron",9},
{4,"icosahedron",4,"dodecahedron",9},
{5,"dodecahedron",5,"lcosahedron",9},
{6,"truncated tetrahedron",6,"triakistetrahedron",14},
{7,"truncated octahedron",7,"tetrakishexahedron",14},
{8,"truncated hexahedron",8,"triakisoctahedron",17},
{9,"truncated icosahedron",9,"pentakisdodecahedron",18},
{10,"truncated dodecahedron",10,"triakisicosahedron",19},
{11,"cuboctahedron",11,"rhombic dodecahedron",19},
{12,"icosidodecahedron",12,"rhombic triacontahedron",22},
{13,"rhombicuboctahedron",13,"deltoidal icositetrahedron",22},
{14,"rhombicosidodecahedron",14,"deltoidal hexecontahedron",24},
{15,"rhombitruncated cuboctahedron",15,"disdyakisdodecahedron",25},
{16,"rhombitruncated icosidodecahedron",16,"disdyakistriacontahedron",25},
{17,"snub cuboctahedron",17,"pentagonal icositetrahedron",28},
{18,"snub icosidodecahedron",18,"pentagonal hexecontahedron",29},
{"","",19,"first stellation of the triakistetrahedron",37},
{"","",20,"final stellation of the triakistetrahedron",37},
{"","",21,"a stellation of the triakisoctahedron",38},
{"","",22,"another stellation of the triakisoctahedron",38},
{20,"small stellated dodecahedron",23,"great dodecahedron",39},
{21,"great dodecahedron",24,"small stellated dodecahedron",39},
{22,"great stellated dodecahedron",25,"great icosahedron",40},
{41,"great icosabedron",26,"great stellated dodecahedron",40},
{73,"dodecadodecahedron",27,"medial rhombic triacontahedron",46},
{80,"ditrigonal dodecadodecahedron",28,"medial triambic icosahedron",46},
{87,"great ditrigonal icosidodecahedron",28,"great triambic icosahedron",46},
{70,"small ditrigonal icosidodecahedron",29,"small triambic icosahedron",46},
{"","",30,"compound of dodecahedron and icosahedron stellations",51},
{"","",31,"compound of great stellated dodecahedron and great icosahedron",52},
{94,"great icosidodecahedron",32,"great rhombic triacontahedron",54},
{69,"small cubicuboctahedron",33,"small hexacronic icositetrahedron",57},
{86,"small rhombihexahedron",33,"small rhombihexacron",57},
{92,"stellated truncated hexahedron",34,"great triakisoctahedron",57},
{77,"great cubicuboctahedron",35,"great hexacronic icositetrahedron",58},
{85,"great rhombicuboctahedron",36,"great deltoidal icositetrahedron",59},
{103,"great rhombihexahedron",37,"great rhombihexacron",60},
{81,"great ditrigonal dodecicosidodecahedron",38,"great ditrigonal dodecacronic hexecontahedron",62},
{88,"great icosicosidodecahedron",39,"great icosacronic hexecontahedron",65},
{101,"great dodecicosahedron",40,"great dodecicosacron",67},
{72,"small dodecicosidodecahedron",41,"small dodecacronic hexecontahedron",70},
{74,"small rhombidodecahedron",41,"small rhombidodecacron",70},
{97," small stellated truncated dodecahedron",42,"great pentakisdodecahedron",70},
{71,"small icosicosidodecahedron",43,"hidden vertices of the great pentakisdodecahedron",74},
{8,"small ditrigonal dodecicosidodecahedron",44,"small icosacronic hexecontabedron",74},
{90,"small dodecicosahedron",45,"small ditrigonal dodecacronic hexecontahedron",74},
{95,"great truncated icosahedron",45,"small dodecicosacron",74},
{104,"great stellated truncated dodecahedron",46,"great stellapentakisdodecahedron",75},
{75,"great truncated dodecahedron",47,"great triakisicosahedron",77},
{76,"rhombidodecadodecahedron",48,"small stellapentakisdodecahedron",84},
{83,"lcosidodecadodecahedron",49,"medial deltoidal hexecontahedron",84},
{96,"rhombicosahedron",50,"medial icosacronic hexecontahedron",85},
{99,"great dodecicosidodecahedron",51,"rhombicosacron",85},
{105,"great rhombicosidodecahedron",52,"great dodecacronic hexecontahedron",88},
{109,"great rhombidodecahedron",53,"great deltoidal hexecontahedron",88},
{79,"cubitruncated cuboctahedron",53,"great rhombidodecacron",88},
{93,"great truncated cuboctahedron",54,"tetradyakishexabedron",92},
{84,"icositruncated dodecadodecahedron",55,"great disdyakisdodecahedron",92},
{98,"truncated dodecadodecahedron",56,"tridyakisicosahedron",96},
{108,"great truncated icosidodecahedron",57,"medial disdyakistriacontahedron",96},
{67,"tetrahemihexahedron",58,"great disdyakistriacontahedron",96},
{68,"octahemioctahedron",59,"tetrahemihexacron",101},
{78,"cubohemioctahedron",60,"octahemioctacron",104},
{89,"small icosihemidodecahedron",60,"hexahemioctacron",104},
{91,"small dodecahemidodecahedron",61,"small icosihemidodecacron",104},
{100,"small dodecahemicosahedron",61,"small dodecahemidodecacron",104},
{102,"great dodecahemicosahedron",62,"small dodecahemicosacron",107},
{106,"great icosihemidodecahedron",62,"great dodecahemicosacron",107},
{107,"great dodecahemidodecahedron",63,"great icosihemidodecacron",107},
{"","",63,"great dodecahemidodecacron",107},
{"","",64,"stellation to infinity"," rhombic dodecahedron",115},
{"","",65,"stellation to infinity"," five cubes",115},
{"","",66,"stellation to infinity"," rhombic triacontahedron",115},
{110,"small snub icosicosidodecahedron",67,"small hexagonal hexecontahedron",119},
{111,"snub dodecadodecahedron",68,"medial pentagonal hexecontahedron",120},
{112,"snub icosidodecadodecahedron",69,"medial hexagonal hexecontahedron",121},
{113,"great snub icosidodecahedron",70,"great pentagonal hexecontahedron",123},
{114,"inverted snub dodecadodecahedron",71,"medial inverted pentagonal hexecontahedron",124},
{"","",72,"truncation of the dual of 114",124},
{116,"great inverted snub icosidodecahedron",73,"great inverted pentagonal hexecontahedron",126},
{117,"great retrosnub icosidodecahedron",74,"great pentagrammic hexecontahedron",128},
{118,"small retrosnub icosicosidodecahedron",75,"small hexagrammic hexecontahedron",135},
{115,"great snub dodecicosidodecahedron",76,"great hexagonal hexecontahedron",136},
{119,"great dirhombicosidodecahedron",77,"great dirhombicosidodecacron",139},
{"","",78,"compound of twenty cubes",140},
{"","",79,"compound of two small stellated dodecahedra",144},
{"","",80,"compound of two great stellated dodecahedra",144},
{"","",81,"compound of five dodecahedra",145},
{"","",82,"compound of five small stellated dodecahedra",146},
{"","",83,"compound of five great stellated dodecahedra",147}
}

WythoffSymbol[n_]:=standard[[n,2]]

Zome:={Polygon[{{(1/4)*(1 + Sqrt[5]), 1/2, (-(1/4))*(1 + Sqrt[5])^2}, 
    {(1/4)*(1 + Sqrt[5]), -(1/2), (-(1/4))*(1 + Sqrt[5])^2}, {(1/4)*(-1 - Sqrt[5]), -(1/2), 
     (-(1/4))*(1 + Sqrt[5])^2}, {(1/4)*(-1 - Sqrt[5]), 1/2, (-(1/4))*(1 + Sqrt[5])^2}}], 
  Polygon[{{0, (1/4)*(5 + Sqrt[5]), -1 - Sqrt[5]/2}, {(1/4)*(1 + Sqrt[5]), 1/2, 
     (-(1/4))*(1 + Sqrt[5])^2}, {(1/4)*(-1 - Sqrt[5]), 1/2, (-(1/4))*(1 + Sqrt[5])^2}}], 
  Polygon[{{(1/2)*(1 + Sqrt[5]), (1/4)*(-1 - Sqrt[5]), -1 - Sqrt[5]/2}, 
    {(1/4)*(1 + Sqrt[5]), -(1/2), (-(1/4))*(1 + Sqrt[5])^2}, {(1/4)*(1 + Sqrt[5]), 1/2, 
     (-(1/4))*(1 + Sqrt[5])^2}, {(1/2)*(1 + Sqrt[5]), (1/4)*(1 + Sqrt[5]), -1 - Sqrt[5]/2}, 
    {(1/2)*(2 + Sqrt[5]), 0, (1/4)*(-5 - Sqrt[5])}}], 
  Polygon[{{(1/2)*(-1 - Sqrt[5]), (1/4)*(-1 - Sqrt[5]), -1 - Sqrt[5]/2}, 
    {(1/4)*(-1 - Sqrt[5]), -(1/2), (-(1/4))*(1 + Sqrt[5])^2}, {(1/4)*(-1 - Sqrt[5]), 1/2, 
     (-(1/4))*(1 + Sqrt[5])^2}, {(1/2)*(-1 - Sqrt[5]), (1/4)*(1 + Sqrt[5]), -1 - Sqrt[5]/2}, 
    {-1 - Sqrt[5]/2, 0, (1/4)*(-5 - Sqrt[5])}}], 
  Polygon[{{0, (1/4)*(-5 - Sqrt[5]), -1 - Sqrt[5]/2}, {(1/4)*(1 + Sqrt[5]), -(1/2), 
     (-(1/4))*(1 + Sqrt[5])^2}, {(1/4)*(-1 - Sqrt[5]), -(1/2), (-(1/4))*(1 + Sqrt[5])^2}}], 
  Polygon[{{0, (1/4)*(5 + Sqrt[5]), -1 - Sqrt[5]/2}, {(1/4)*(1 + Sqrt[5]), 1/2, 
     (-(1/4))*(1 + Sqrt[5])^2}, {(1/2)*(1 + Sqrt[5]), (1/4)*(1 + Sqrt[5]), -1 - Sqrt[5]/2}, 
    {(1/4)*(1 + Sqrt[5]), (1/2)*(2 + Sqrt[5]), (1/2)*(-1 - Sqrt[5])}}], 
  Polygon[{{0, (1/4)*(-5 - Sqrt[5]), -1 - Sqrt[5]/2}, {(1/4)*(1 + Sqrt[5]), -(1/2), 
     (-(1/4))*(1 + Sqrt[5])^2}, {(1/2)*(1 + Sqrt[5]), (1/4)*(-1 - Sqrt[5]), -1 - Sqrt[5]/2}, 
    {(1/4)*(1 + Sqrt[5]), -1 - Sqrt[5]/2, (1/2)*(-1 - Sqrt[5])}}], 
  Polygon[{{0, (1/4)*(5 + Sqrt[5]), -1 - Sqrt[5]/2}, {(1/4)*(-1 - Sqrt[5]), 1/2, 
     (-(1/4))*(1 + Sqrt[5])^2}, {(1/2)*(-1 - Sqrt[5]), (1/4)*(1 + Sqrt[5]), -1 - Sqrt[5]/2}, 
    {(1/4)*(-1 - Sqrt[5]), (1/2)*(2 + Sqrt[5]), (1/2)*(-1 - Sqrt[5])}}], 
  Polygon[{{0, (1/4)*(-5 - Sqrt[5]), -1 - Sqrt[5]/2}, {(1/4)*(-1 - Sqrt[5]), -(1/2), 
     (-(1/4))*(1 + Sqrt[5])^2}, {(1/2)*(-1 - Sqrt[5]), (1/4)*(-1 - Sqrt[5]), -1 - Sqrt[5]/2}, 
    {(1/4)*(-1 - Sqrt[5]), -1 - Sqrt[5]/2, (1/2)*(-1 - Sqrt[5])}}], 
  Polygon[{{(1/4)*(-1 - Sqrt[5]), -(1/2), (1/2)*(3 + Sqrt[5])}, 
    {(1/4)*(-1 - Sqrt[5]), 1/2, (1/2)*(3 + Sqrt[5])}, {(1/4)*(1 + Sqrt[5]), 1/2, 
     (1/2)*(3 + Sqrt[5])}, {(1/4)*(1 + Sqrt[5]), -(1/2), (1/2)*(3 + Sqrt[5])}}], 
  Polygon[{{0, (1/4)*(-5 - Sqrt[5]), (1/2)*(2 + Sqrt[5])}, {(1/4)*(-1 - Sqrt[5]), -(1/2), 
     (1/2)*(3 + Sqrt[5])}, {(1/4)*(1 + Sqrt[5]), -(1/2), (1/2)*(3 + Sqrt[5])}}], 
  Polygon[{{(1/2)*(-1 - Sqrt[5]), (1/4)*(1 + Sqrt[5]), (1/2)*(2 + Sqrt[5])}, 
    {(1/4)*(-1 - Sqrt[5]), 1/2, (1/2)*(3 + Sqrt[5])}, {(1/4)*(-1 - Sqrt[5]), -(1/2), 
     (1/2)*(3 + Sqrt[5])}, {(1/2)*(-1 - Sqrt[5]), (1/4)*(-1 - Sqrt[5]), (1/2)*(2 + Sqrt[5])}, 
    {-1 - Sqrt[5]/2, 0, (1/4)*(5 + Sqrt[5])}}], 
  Polygon[{{(1/2)*(1 + Sqrt[5]), (1/4)*(1 + Sqrt[5]), (1/2)*(2 + Sqrt[5])}, 
    {(1/4)*(1 + Sqrt[5]), 1/2, (1/2)*(3 + Sqrt[5])}, {(1/4)*(1 + Sqrt[5]), -(1/2), 
     (1/2)*(3 + Sqrt[5])}, {(1/2)*(1 + Sqrt[5]), (1/4)*(-1 - Sqrt[5]), (1/2)*(2 + Sqrt[5])}, 
    {(1/2)*(2 + Sqrt[5]), 0, (1/4)*(5 + Sqrt[5])}}], 
  Polygon[{{0, (1/4)*(5 + Sqrt[5]), (1/2)*(2 + Sqrt[5])}, {(1/4)*(-1 - Sqrt[5]), 1/2, 
     (1/2)*(3 + Sqrt[5])}, {(1/4)*(1 + Sqrt[5]), 1/2, (1/2)*(3 + Sqrt[5])}}], 
  Polygon[{{0, (1/4)*(-5 - Sqrt[5]), (1/2)*(2 + Sqrt[5])}, {(1/4)*(-1 - Sqrt[5]), -(1/2), 
     (1/2)*(3 + Sqrt[5])}, {(1/2)*(-1 - Sqrt[5]), (1/4)*(-1 - Sqrt[5]), (1/2)*(2 + Sqrt[5])}, 
    {(1/4)*(-1 - Sqrt[5]), -1 - Sqrt[5]/2, (1/2)*(1 + Sqrt[5])}}], 
  Polygon[{{0, (1/4)*(5 + Sqrt[5]), (1/2)*(2 + Sqrt[5])}, {(1/4)*(-1 - Sqrt[5]), 1/2, 
     (1/2)*(3 + Sqrt[5])}, {(1/2)*(-1 - Sqrt[5]), (1/4)*(1 + Sqrt[5]), (1/2)*(2 + Sqrt[5])}, 
    {(1/4)*(-1 - Sqrt[5]), (1/2)*(2 + Sqrt[5]), (1/2)*(1 + Sqrt[5])}}], 
  Polygon[{{0, (1/4)*(-5 - Sqrt[5]), (1/2)*(2 + Sqrt[5])}, {(1/4)*(1 + Sqrt[5]), -(1/2), 
     (1/2)*(3 + Sqrt[5])}, {(1/2)*(1 + Sqrt[5]), (1/4)*(-1 - Sqrt[5]), (1/2)*(2 + Sqrt[5])}, 
    {(1/4)*(1 + Sqrt[5]), -1 - Sqrt[5]/2, (1/2)*(1 + Sqrt[5])}}], 
  Polygon[{{0, (1/4)*(5 + Sqrt[5]), (1/2)*(2 + Sqrt[5])}, {(1/4)*(1 + Sqrt[5]), 1/2, 
     (1/2)*(3 + Sqrt[5])}, {(1/2)*(1 + Sqrt[5]), (1/4)*(1 + Sqrt[5]), (1/2)*(2 + Sqrt[5])}, 
    {(1/4)*(1 + Sqrt[5]), (1/2)*(2 + Sqrt[5]), (1/2)*(1 + Sqrt[5])}}], 
  Polygon[{{1/2, (-(1/4))*(1 + Sqrt[5])^2, (1/4)*(1 + Sqrt[5])}, 
    {-(1/2), (-(1/4))*(1 + Sqrt[5])^2, (1/4)*(1 + Sqrt[5])}, {-(1/2), (-(1/4))*(1 + Sqrt[5])^2, 
     (1/4)*(-1 - Sqrt[5])}, {1/2, (-(1/4))*(1 + Sqrt[5])^2, (1/4)*(-1 - Sqrt[5])}}], 
  Polygon[{{(1/4)*(5 + Sqrt[5]), -1 - Sqrt[5]/2, 0}, {1/2, (-(1/4))*(1 + Sqrt[5])^2, 
     (1/4)*(1 + Sqrt[5])}, {1/2, (-(1/4))*(1 + Sqrt[5])^2, (1/4)*(-1 - Sqrt[5])}}], 
  Polygon[{{(1/4)*(-1 - Sqrt[5]), -1 - Sqrt[5]/2, (1/2)*(1 + Sqrt[5])}, 
    {-(1/2), (-(1/4))*(1 + Sqrt[5])^2, (1/4)*(1 + Sqrt[5])}, {1/2, (-(1/4))*(1 + Sqrt[5])^2, 
     (1/4)*(1 + Sqrt[5])}, {(1/4)*(1 + Sqrt[5]), -1 - Sqrt[5]/2, (1/2)*(1 + Sqrt[5])}, 
    {0, (1/4)*(-5 - Sqrt[5]), (1/2)*(2 + Sqrt[5])}}], 
  Polygon[{{(1/4)*(-1 - Sqrt[5]), -1 - Sqrt[5]/2, (1/2)*(-1 - Sqrt[5])}, 
    {-(1/2), (-(1/4))*(1 + Sqrt[5])^2, (1/4)*(-1 - Sqrt[5])}, {1/2, (-(1/4))*(1 + Sqrt[5])^2, 
     (1/4)*(-1 - Sqrt[5])}, {(1/4)*(1 + Sqrt[5]), -1 - Sqrt[5]/2, (1/2)*(-1 - Sqrt[5])}, 
    {0, (1/4)*(-5 - Sqrt[5]), -1 - Sqrt[5]/2}}], 
  Polygon[{{(1/4)*(-5 - Sqrt[5]), -1 - Sqrt[5]/2, 0}, {-(1/2), (-(1/4))*(1 + Sqrt[5])^2, 
     (1/4)*(1 + Sqrt[5])}, {-(1/2), (-(1/4))*(1 + Sqrt[5])^2, (1/4)*(-1 - Sqrt[5])}}], 
  Polygon[{{(1/4)*(5 + Sqrt[5]), -1 - Sqrt[5]/2, 0}, {1/2, (-(1/4))*(1 + Sqrt[5])^2, 
     (1/4)*(1 + Sqrt[5])}, {(1/4)*(1 + Sqrt[5]), -1 - Sqrt[5]/2, (1/2)*(1 + Sqrt[5])}, 
    {(1/2)*(2 + Sqrt[5]), (1/2)*(-1 - Sqrt[5]), (1/4)*(1 + Sqrt[5])}}], 
  Polygon[{{(1/4)*(-5 - Sqrt[5]), -1 - Sqrt[5]/2, 0}, {-(1/2), (-(1/4))*(1 + Sqrt[5])^2, 
     (1/4)*(1 + Sqrt[5])}, {(1/4)*(-1 - Sqrt[5]), -1 - Sqrt[5]/2, (1/2)*(1 + Sqrt[5])}, 
    {-1 - Sqrt[5]/2, (1/2)*(-1 - Sqrt[5]), (1/4)*(1 + Sqrt[5])}}], 
  Polygon[{{(1/4)*(5 + Sqrt[5]), -1 - Sqrt[5]/2, 0}, {1/2, (-(1/4))*(1 + Sqrt[5])^2, 
     (1/4)*(-1 - Sqrt[5])}, {(1/4)*(1 + Sqrt[5]), -1 - Sqrt[5]/2, (1/2)*(-1 - Sqrt[5])}, 
    {(1/2)*(2 + Sqrt[5]), (1/2)*(-1 - Sqrt[5]), (1/4)*(-1 - Sqrt[5])}}], 
  Polygon[{{(1/4)*(-5 - Sqrt[5]), -1 - Sqrt[5]/2, 0}, {-(1/2), (-(1/4))*(1 + Sqrt[5])^2, 
     (1/4)*(-1 - Sqrt[5])}, {(1/4)*(-1 - Sqrt[5]), -1 - Sqrt[5]/2, (1/2)*(-1 - Sqrt[5])}, 
    {-1 - Sqrt[5]/2, (1/2)*(-1 - Sqrt[5]), (1/4)*(-1 - Sqrt[5])}}], 
  Polygon[{{-(1/2), (1/2)*(3 + Sqrt[5]), (1/4)*(-1 - Sqrt[5])}, 
    {1/2, (1/2)*(3 + Sqrt[5]), (1/4)*(-1 - Sqrt[5])}, {1/2, (1/2)*(3 + Sqrt[5]), 
     (1/4)*(1 + Sqrt[5])}, {-(1/2), (1/2)*(3 + Sqrt[5]), (1/4)*(1 + Sqrt[5])}}], 
  Polygon[{{(1/4)*(-5 - Sqrt[5]), (1/2)*(2 + Sqrt[5]), 0}, {-(1/2), (1/2)*(3 + Sqrt[5]), 
     (1/4)*(-1 - Sqrt[5])}, {-(1/2), (1/2)*(3 + Sqrt[5]), (1/4)*(1 + Sqrt[5])}}], 
  Polygon[{{(1/4)*(1 + Sqrt[5]), (1/2)*(2 + Sqrt[5]), (1/2)*(-1 - Sqrt[5])}, 
    {1/2, (1/2)*(3 + Sqrt[5]), (1/4)*(-1 - Sqrt[5])}, {-(1/2), (1/2)*(3 + Sqrt[5]), 
     (1/4)*(-1 - Sqrt[5])}, {(1/4)*(-1 - Sqrt[5]), (1/2)*(2 + Sqrt[5]), (1/2)*(-1 - Sqrt[5])}, 
    {0, (1/4)*(5 + Sqrt[5]), -1 - Sqrt[5]/2}}], 
  Polygon[{{(1/4)*(1 + Sqrt[5]), (1/2)*(2 + Sqrt[5]), (1/2)*(1 + Sqrt[5])}, 
    {1/2, (1/2)*(3 + Sqrt[5]), (1/4)*(1 + Sqrt[5])}, {-(1/2), (1/2)*(3 + Sqrt[5]), 
     (1/4)*(1 + Sqrt[5])}, {(1/4)*(-1 - Sqrt[5]), (1/2)*(2 + Sqrt[5]), (1/2)*(1 + Sqrt[5])}, 
    {0, (1/4)*(5 + Sqrt[5]), (1/2)*(2 + Sqrt[5])}}], 
  Polygon[{{(1/4)*(5 + Sqrt[5]), (1/2)*(2 + Sqrt[5]), 0}, {1/2, (1/2)*(3 + Sqrt[5]), 
     (1/4)*(-1 - Sqrt[5])}, {1/2, (1/2)*(3 + Sqrt[5]), (1/4)*(1 + Sqrt[5])}}], 
  Polygon[{{(1/4)*(-5 - Sqrt[5]), (1/2)*(2 + Sqrt[5]), 0}, {-(1/2), (1/2)*(3 + Sqrt[5]), 
     (1/4)*(-1 - Sqrt[5])}, {(1/4)*(-1 - Sqrt[5]), (1/2)*(2 + Sqrt[5]), (1/2)*(-1 - Sqrt[5])}, 
    {-1 - Sqrt[5]/2, (1/2)*(1 + Sqrt[5]), (1/4)*(-1 - Sqrt[5])}}], 
  Polygon[{{(1/4)*(5 + Sqrt[5]), (1/2)*(2 + Sqrt[5]), 0}, {1/2, (1/2)*(3 + Sqrt[5]), 
     (1/4)*(-1 - Sqrt[5])}, {(1/4)*(1 + Sqrt[5]), (1/2)*(2 + Sqrt[5]), (1/2)*(-1 - Sqrt[5])}, 
    {(1/2)*(2 + Sqrt[5]), (1/2)*(1 + Sqrt[5]), (1/4)*(-1 - Sqrt[5])}}], 
  Polygon[{{(1/4)*(-5 - Sqrt[5]), (1/2)*(2 + Sqrt[5]), 0}, {-(1/2), (1/2)*(3 + Sqrt[5]), 
     (1/4)*(1 + Sqrt[5])}, {(1/4)*(-1 - Sqrt[5]), (1/2)*(2 + Sqrt[5]), (1/2)*(1 + Sqrt[5])}, 
    {-1 - Sqrt[5]/2, (1/2)*(1 + Sqrt[5]), (1/4)*(1 + Sqrt[5])}}], 
  Polygon[{{(1/4)*(5 + Sqrt[5]), (1/2)*(2 + Sqrt[5]), 0}, {1/2, (1/2)*(3 + Sqrt[5]), 
     (1/4)*(1 + Sqrt[5])}, {(1/4)*(1 + Sqrt[5]), (1/2)*(2 + Sqrt[5]), (1/2)*(1 + Sqrt[5])}, 
    {(1/2)*(2 + Sqrt[5]), (1/2)*(1 + Sqrt[5]), (1/4)*(1 + Sqrt[5])}}], 
  Polygon[{{(-(1/4))*(1 + Sqrt[5])^2, (1/4)*(1 + Sqrt[5]), 1/2}, 
    {(-(1/4))*(1 + Sqrt[5])^2, (1/4)*(1 + Sqrt[5]), -(1/2)}, {(-(1/4))*(1 + Sqrt[5])^2, 
     (1/4)*(-1 - Sqrt[5]), -(1/2)}, {(-(1/4))*(1 + Sqrt[5])^2, (1/4)*(-1 - Sqrt[5]), 1/2}}], 
  Polygon[{{-1 - Sqrt[5]/2, 0, (1/4)*(5 + Sqrt[5])}, {(-(1/4))*(1 + Sqrt[5])^2, 
     (1/4)*(1 + Sqrt[5]), 1/2}, {(-(1/4))*(1 + Sqrt[5])^2, (1/4)*(-1 - Sqrt[5]), 1/2}}], 
  Polygon[{{-1 - Sqrt[5]/2, (1/2)*(1 + Sqrt[5]), (1/4)*(-1 - Sqrt[5])}, 
    {(-(1/4))*(1 + Sqrt[5])^2, (1/4)*(1 + Sqrt[5]), -(1/2)}, {(-(1/4))*(1 + Sqrt[5])^2, 
     (1/4)*(1 + Sqrt[5]), 1/2}, {-1 - Sqrt[5]/2, (1/2)*(1 + Sqrt[5]), (1/4)*(1 + Sqrt[5])}, 
    {(1/4)*(-5 - Sqrt[5]), (1/2)*(2 + Sqrt[5]), 0}}], 
  Polygon[{{-1 - Sqrt[5]/2, (1/2)*(-1 - Sqrt[5]), (1/4)*(-1 - Sqrt[5])}, 
    {(-(1/4))*(1 + Sqrt[5])^2, (1/4)*(-1 - Sqrt[5]), -(1/2)}, {(-(1/4))*(1 + Sqrt[5])^2, 
     (1/4)*(-1 - Sqrt[5]), 1/2}, {-1 - Sqrt[5]/2, (1/2)*(-1 - Sqrt[5]), (1/4)*(1 + Sqrt[5])}, 
    {(1/4)*(-5 - Sqrt[5]), -1 - Sqrt[5]/2, 0}}], 
  Polygon[{{-1 - Sqrt[5]/2, 0, (1/4)*(-5 - Sqrt[5])}, {(-(1/4))*(1 + Sqrt[5])^2, 
     (1/4)*(1 + Sqrt[5]), -(1/2)}, {(-(1/4))*(1 + Sqrt[5])^2, (1/4)*(-1 - Sqrt[5]), -(1/2)}}], 
  Polygon[{{-1 - Sqrt[5]/2, 0, (1/4)*(5 + Sqrt[5])}, {(-(1/4))*(1 + Sqrt[5])^2, 
     (1/4)*(1 + Sqrt[5]), 1/2}, {-1 - Sqrt[5]/2, (1/2)*(1 + Sqrt[5]), (1/4)*(1 + Sqrt[5])}, 
    {(1/2)*(-1 - Sqrt[5]), (1/4)*(1 + Sqrt[5]), (1/2)*(2 + Sqrt[5])}}], 
  Polygon[{{-1 - Sqrt[5]/2, 0, (1/4)*(-5 - Sqrt[5])}, {(-(1/4))*(1 + Sqrt[5])^2, 
     (1/4)*(1 + Sqrt[5]), -(1/2)}, {-1 - Sqrt[5]/2, (1/2)*(1 + Sqrt[5]), (1/4)*(-1 - Sqrt[5])}, 
    {(1/2)*(-1 - Sqrt[5]), (1/4)*(1 + Sqrt[5]), -1 - Sqrt[5]/2}}], 
  Polygon[{{-1 - Sqrt[5]/2, 0, (1/4)*(5 + Sqrt[5])}, {(-(1/4))*(1 + Sqrt[5])^2, 
     (1/4)*(-1 - Sqrt[5]), 1/2}, {-1 - Sqrt[5]/2, (1/2)*(-1 - Sqrt[5]), (1/4)*(1 + Sqrt[5])}, 
    {(1/2)*(-1 - Sqrt[5]), (1/4)*(-1 - Sqrt[5]), (1/2)*(2 + Sqrt[5])}}], 
  Polygon[{{-1 - Sqrt[5]/2, 0, (1/4)*(-5 - Sqrt[5])}, {(-(1/4))*(1 + Sqrt[5])^2, 
     (1/4)*(-1 - Sqrt[5]), -(1/2)}, {-1 - Sqrt[5]/2, (1/2)*(-1 - Sqrt[5]), (1/4)*(-1 - Sqrt[5])}, 
    {(1/2)*(-1 - Sqrt[5]), (1/4)*(-1 - Sqrt[5]), -1 - Sqrt[5]/2}}], 
  Polygon[{{(1/2)*(3 + Sqrt[5]), (1/4)*(-1 - Sqrt[5]), -(1/2)}, 
    {(1/2)*(3 + Sqrt[5]), (1/4)*(-1 - Sqrt[5]), 1/2}, {(1/2)*(3 + Sqrt[5]), (1/4)*(1 + Sqrt[5]), 
     1/2}, {(1/2)*(3 + Sqrt[5]), (1/4)*(1 + Sqrt[5]), -(1/2)}}], 
  Polygon[{{(1/2)*(2 + Sqrt[5]), 0, (1/4)*(-5 - Sqrt[5])}, {(1/2)*(3 + Sqrt[5]), 
     (1/4)*(-1 - Sqrt[5]), -(1/2)}, {(1/2)*(3 + Sqrt[5]), (1/4)*(1 + Sqrt[5]), -(1/2)}}], 
  Polygon[{{(1/2)*(2 + Sqrt[5]), (1/2)*(-1 - Sqrt[5]), (1/4)*(1 + Sqrt[5])}, 
    {(1/2)*(3 + Sqrt[5]), (1/4)*(-1 - Sqrt[5]), 1/2}, {(1/2)*(3 + Sqrt[5]), (1/4)*(-1 - Sqrt[5]), 
     -(1/2)}, {(1/2)*(2 + Sqrt[5]), (1/2)*(-1 - Sqrt[5]), (1/4)*(-1 - Sqrt[5])}, 
    {(1/4)*(5 + Sqrt[5]), -1 - Sqrt[5]/2, 0}}], 
  Polygon[{{(1/2)*(2 + Sqrt[5]), (1/2)*(1 + Sqrt[5]), (1/4)*(1 + Sqrt[5])}, 
    {(1/2)*(3 + Sqrt[5]), (1/4)*(1 + Sqrt[5]), 1/2}, {(1/2)*(3 + Sqrt[5]), (1/4)*(1 + Sqrt[5]), 
     -(1/2)}, {(1/2)*(2 + Sqrt[5]), (1/2)*(1 + Sqrt[5]), (1/4)*(-1 - Sqrt[5])}, 
    {(1/4)*(5 + Sqrt[5]), (1/2)*(2 + Sqrt[5]), 0}}], 
  Polygon[{{(1/2)*(2 + Sqrt[5]), 0, (1/4)*(5 + Sqrt[5])}, {(1/2)*(3 + Sqrt[5]), 
     (1/4)*(-1 - Sqrt[5]), 1/2}, {(1/2)*(3 + Sqrt[5]), (1/4)*(1 + Sqrt[5]), 1/2}}], 
  Polygon[{{(1/2)*(2 + Sqrt[5]), 0, (1/4)*(-5 - Sqrt[5])}, {(1/2)*(3 + Sqrt[5]), 
     (1/4)*(-1 - Sqrt[5]), -(1/2)}, {(1/2)*(2 + Sqrt[5]), (1/2)*(-1 - Sqrt[5]), 
     (1/4)*(-1 - Sqrt[5])}, {(1/2)*(1 + Sqrt[5]), (1/4)*(-1 - Sqrt[5]), -1 - Sqrt[5]/2}}], 
  Polygon[{{(1/2)*(2 + Sqrt[5]), 0, (1/4)*(5 + Sqrt[5])}, {(1/2)*(3 + Sqrt[5]), 
     (1/4)*(-1 - Sqrt[5]), 1/2}, {(1/2)*(2 + Sqrt[5]), (1/2)*(-1 - Sqrt[5]), 
     (1/4)*(1 + Sqrt[5])}, {(1/2)*(1 + Sqrt[5]), (1/4)*(-1 - Sqrt[5]), (1/2)*(2 + Sqrt[5])}}], 
  Polygon[{{(1/2)*(2 + Sqrt[5]), 0, (1/4)*(-5 - Sqrt[5])}, {(1/2)*(3 + Sqrt[5]), 
     (1/4)*(1 + Sqrt[5]), -(1/2)}, {(1/2)*(2 + Sqrt[5]), (1/2)*(1 + Sqrt[5]), 
     (1/4)*(-1 - Sqrt[5])}, {(1/2)*(1 + Sqrt[5]), (1/4)*(1 + Sqrt[5]), -1 - Sqrt[5]/2}}], 
  Polygon[{{(1/2)*(2 + Sqrt[5]), 0, (1/4)*(5 + Sqrt[5])}, {(1/2)*(3 + Sqrt[5]), 
     (1/4)*(1 + Sqrt[5]), 1/2}, {(1/2)*(2 + Sqrt[5]), (1/2)*(1 + Sqrt[5]), (1/4)*(1 + Sqrt[5])}, 
    {(1/2)*(1 + Sqrt[5]), (1/4)*(1 + Sqrt[5]), (1/2)*(2 + Sqrt[5])}}], 
  Polygon[{{(1/2)*(1 + Sqrt[5]), (1/4)*(1 + Sqrt[5]), (1/2)*(2 + Sqrt[5])}, 
    {(1/4)*(1 + Sqrt[5]), (1/2)*(2 + Sqrt[5]), (1/2)*(1 + Sqrt[5])}, 
    {(1/2)*(2 + Sqrt[5]), (1/2)*(1 + Sqrt[5]), (1/4)*(1 + Sqrt[5])}}], 
  Polygon[{{(1/2)*(1 + Sqrt[5]), (1/4)*(1 + Sqrt[5]), -1 - Sqrt[5]/2}, 
    {(1/4)*(1 + Sqrt[5]), (1/2)*(2 + Sqrt[5]), (1/2)*(-1 - Sqrt[5])}, 
    {(1/2)*(2 + Sqrt[5]), (1/2)*(1 + Sqrt[5]), (1/4)*(-1 - Sqrt[5])}}], 
  Polygon[{{(1/2)*(1 + Sqrt[5]), (1/4)*(-1 - Sqrt[5]), (1/2)*(2 + Sqrt[5])}, 
    {(1/4)*(1 + Sqrt[5]), -1 - Sqrt[5]/2, (1/2)*(1 + Sqrt[5])}, 
    {(1/2)*(2 + Sqrt[5]), (1/2)*(-1 - Sqrt[5]), (1/4)*(1 + Sqrt[5])}}], 
  Polygon[{{(1/2)*(-1 - Sqrt[5]), (1/4)*(1 + Sqrt[5]), (1/2)*(2 + Sqrt[5])}, 
    {(1/4)*(-1 - Sqrt[5]), (1/2)*(2 + Sqrt[5]), (1/2)*(1 + Sqrt[5])}, 
    {-1 - Sqrt[5]/2, (1/2)*(1 + Sqrt[5]), (1/4)*(1 + Sqrt[5])}}], 
  Polygon[{{(1/2)*(1 + Sqrt[5]), (1/4)*(-1 - Sqrt[5]), -1 - Sqrt[5]/2}, 
    {(1/4)*(1 + Sqrt[5]), -1 - Sqrt[5]/2, (1/2)*(-1 - Sqrt[5])}, 
    {(1/2)*(2 + Sqrt[5]), (1/2)*(-1 - Sqrt[5]), (1/4)*(-1 - Sqrt[5])}}], 
  Polygon[{{(1/2)*(-1 - Sqrt[5]), (1/4)*(-1 - Sqrt[5]), (1/2)*(2 + Sqrt[5])}, 
    {(1/4)*(-1 - Sqrt[5]), -1 - Sqrt[5]/2, (1/2)*(1 + Sqrt[5])}, 
    {-1 - Sqrt[5]/2, (1/2)*(-1 - Sqrt[5]), (1/4)*(1 + Sqrt[5])}}], 
  Polygon[{{(1/2)*(-1 - Sqrt[5]), (1/4)*(1 + Sqrt[5]), -1 - Sqrt[5]/2}, 
    {(1/4)*(-1 - Sqrt[5]), (1/2)*(2 + Sqrt[5]), (1/2)*(-1 - Sqrt[5])}, 
    {-1 - Sqrt[5]/2, (1/2)*(1 + Sqrt[5]), (1/4)*(-1 - Sqrt[5])}}], 
  Polygon[{{(1/2)*(-1 - Sqrt[5]), (1/4)*(-1 - Sqrt[5]), -1 - Sqrt[5]/2}, 
    {(1/4)*(-1 - Sqrt[5]), -1 - Sqrt[5]/2, (1/2)*(-1 - Sqrt[5])}, 
    {-1 - Sqrt[5]/2, (1/2)*(-1 - Sqrt[5]), (1/4)*(-1 - Sqrt[5])}}]};

(* Zonohedron *)
(* Code by David Eppstein:
http://www.ics.uci.edu/~eppstein/junkyard/ukraine/ukraine.ma
*)

eps=10^-16;

ZSignTest[vv_,f_] :=
	Det [ Part[vv,f] ~Join~
		  Table[(i+Pi)^j,
				{i,Length[vv[[1]]]-Length[f]},
				{j,Length[vv[[1]]]}]]

ZOldFaces[vv_,ff_,i_,d_] :=(ZAddToFace[vv, #, i, d])& /@ ff
ZAddToFace[vv_,f_,i_,d_] :=
	If[ Length[f] < (d-1) ||
		Abs[ZSignTest[vv, Append[Take[f,d-1],i]]] < eps,
		Append[f,i], f ]
		
ZTuples[i_,1,ff_] :=If[MemberQ[Flatten[ff],i], {}, {{i}}]
ZTuples[i_,d_,ff_] :=(Append[#,i]&) /@
	ZAllTuples[i-1,d-1,Select[ff,MemberQ[#,i]&]]
ZAllTuples[i_,1,ff_] :=List /@ Complement[Range[i], Flatten[ff]]
ZAllTuples[i_,d_,ff_] :=Join @@ Table[ZTuples[j,d,ff],{j,i}]
ZAddTuples[ff_,i_,d_] := ff ~Join~ ZTuples[i,d-1,ff]

ZNewFaces[vv_,ff_,i_,d_] := ZAddTuples[ZOldFaces[vv,ff,i,d], i, d]
ZAllFaces[vv_,d_] :=Fold[ZNewFaces[vv,#1,#2,d]&,
		 {{}}, Table[i,{i,Length[vv]}]]
ZLiftAll[vv_,ff_,d_] :=Join @@ Map[ZLiftFace[vv,#,d]&,ff]

ZOrigin[vv_] := Table[ 0, {Length[ vv[[1]] ]} ]
ZFace[vv_,f_,1] := ZOrigin[vv];
ZFace[vv_,{i_},2] := {ZOrigin[vv],vv[[i]]};
ZFace[vv_,f_,d_] := Zonotope[ Part[vv,f], d-1 ];

ZLiftVector[vv_,f_,i_,d_] :=
	If [ MemberQ[f, i], {ZOrigin[vv],ZOrigin[vv]},
		 If [ ZSignTest[vv, Append[Take[f,d-1],i]] < 0,
		 	  {vv[[i]], ZOrigin[vv]},
		 	  {ZOrigin[vv], vv[[i]]}]]
ZVecPlus[a_,v_] :=
	If[Head[First[a]] === List,
		ZVecPlus[#,v]& /@ a, a+v]
ZLiftFace[vv_,f_,d_] :=
	{#1 ~ZVecPlus~ #2[[1]], #1 ~ZVecPlus~ #2[[2]]}& [
		ZFace[vv,f,d],
		Sum[ZLiftVector[vv,f,j,d],{j,Length[vv]}]]

Zonotope[vv_,d_] :=
	ZLiftAll[vv,ZAllFaces[vv,d],d]

ZvEq[u_,v_] := Abs[Plus @@ (Abs /@ (u-v))] < eps

ZNext[f_,e_] :=
	Join @@ Map[
		If[ e[[2]] ~ZvEq~ #[[1]] &&
					Not[e[[1]] ~ZvEq~ #[[2]]], #,
			If[ e[[2]] ~ZvEq~ #[[2]] &&
					Not[e[[1]] ~ZvEq~ #[[1]]],
				Reverse[#], {}]]&, f]

ZMakePolygon[f_] :=
	First /@ NestList[ ZNext[f,#]&, f[[1]], Length[f]-1 ]

Zonohedron[vv_] := Polygon /@ ZMakePolygon /@ Zonotope[vv,3]

(* End David Eppstein code *)


End[]

(* Protect[  ] *)

EndPackage[]